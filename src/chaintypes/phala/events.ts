// Generated by dedot cli

import type { GenericChainEvents, GenericPalletEvent, RpcVersion } from 'dedot/types'
import type { DispatchInfo, DispatchError, AccountId32, H256, Result, FixedBytes, Bytes, U256 } from 'dedot/codecs'
import type {
  PalletMultisigTimepoint,
  PhalaParachainRuntimeProxyType,
  SpWeightsWeightV2Weight,
  StagingXcmV3TraitsError,
  PolkadotParachainPrimitivesPrimitivesId,
  StagingXcmV3TraitsOutcome,
  StagingXcmV3MultilocationMultiLocation,
  StagingXcmV3Xcm,
  StagingXcmV3Response,
  StagingXcmVersionedMultiAssets,
  StagingXcmV3MultiassetMultiAssets,
  StagingXcmVersionedMultiLocation,
  FrameSupportTokensMiscBalanceStatus,
  PalletDemocracyVoteThreshold,
  PalletDemocracyVoteAccountVote,
  PalletDemocracyMetadataOwner,
  StagingXcmV3MultiassetMultiAsset,
  SpCoreSr25519Public,
  PhalaTypesAttestationProvider,
  PhalaPalletsComputeVaultPalletForceShutdownReason,
  RmrkTraitsNftAccountIdOrCollectionNftTuple,
  StagingXcmV3MultiassetAssetId,
  SygmaTraitsTransferType,
  SygmaFeeHandlerRouterFeeHandlerType,
  PalletIndexDepositInfo,
} from './types'

export interface ChainEvents<Rv extends RpcVersion> extends GenericChainEvents<Rv> {
  /**
   * Pallet `System`'s events
   **/
  system: {
    /**
     * An extrinsic completed successfully.
     **/
    ExtrinsicSuccess: GenericPalletEvent<Rv, 'System', 'ExtrinsicSuccess', { dispatchInfo: DispatchInfo }>

    /**
     * An extrinsic failed.
     **/
    ExtrinsicFailed: GenericPalletEvent<
      Rv,
      'System',
      'ExtrinsicFailed',
      { dispatchError: DispatchError; dispatchInfo: DispatchInfo }
    >

    /**
     * `:code` was updated.
     **/
    CodeUpdated: GenericPalletEvent<Rv, 'System', 'CodeUpdated', null>

    /**
     * A new account was created.
     **/
    NewAccount: GenericPalletEvent<Rv, 'System', 'NewAccount', { account: AccountId32 }>

    /**
     * An account was reaped.
     **/
    KilledAccount: GenericPalletEvent<Rv, 'System', 'KilledAccount', { account: AccountId32 }>

    /**
     * On on-chain remark happened.
     **/
    Remarked: GenericPalletEvent<Rv, 'System', 'Remarked', { sender: AccountId32; hash: H256 }>

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>
  }
  /**
   * Pallet `Utility`'s events
   **/
  utility: {
    /**
     * Batch of dispatches did not complete fully. Index of first failing dispatch given, as
     * well as the error.
     **/
    BatchInterrupted: GenericPalletEvent<Rv, 'Utility', 'BatchInterrupted', { index: number; error: DispatchError }>

    /**
     * Batch of dispatches completed fully with no error.
     **/
    BatchCompleted: GenericPalletEvent<Rv, 'Utility', 'BatchCompleted', null>

    /**
     * Batch of dispatches completed but has errors.
     **/
    BatchCompletedWithErrors: GenericPalletEvent<Rv, 'Utility', 'BatchCompletedWithErrors', null>

    /**
     * A single item within a Batch of dispatches has completed with no error.
     **/
    ItemCompleted: GenericPalletEvent<Rv, 'Utility', 'ItemCompleted', null>

    /**
     * A single item within a Batch of dispatches has completed with error.
     **/
    ItemFailed: GenericPalletEvent<Rv, 'Utility', 'ItemFailed', { error: DispatchError }>

    /**
     * A call was dispatched.
     **/
    DispatchedAs: GenericPalletEvent<Rv, 'Utility', 'DispatchedAs', { result: Result<[], DispatchError> }>

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>
  }
  /**
   * Pallet `Multisig`'s events
   **/
  multisig: {
    /**
     * A new multisig operation has begun.
     **/
    NewMultisig: GenericPalletEvent<
      Rv,
      'Multisig',
      'NewMultisig',
      { approving: AccountId32; multisig: AccountId32; callHash: FixedBytes<32> }
    >

    /**
     * A multisig operation has been approved by someone.
     **/
    MultisigApproval: GenericPalletEvent<
      Rv,
      'Multisig',
      'MultisigApproval',
      { approving: AccountId32; timepoint: PalletMultisigTimepoint; multisig: AccountId32; callHash: FixedBytes<32> }
    >

    /**
     * A multisig operation has been executed.
     **/
    MultisigExecuted: GenericPalletEvent<
      Rv,
      'Multisig',
      'MultisigExecuted',
      {
        approving: AccountId32
        timepoint: PalletMultisigTimepoint
        multisig: AccountId32
        callHash: FixedBytes<32>
        result: Result<[], DispatchError>
      }
    >

    /**
     * A multisig operation has been cancelled.
     **/
    MultisigCancelled: GenericPalletEvent<
      Rv,
      'Multisig',
      'MultisigCancelled',
      { cancelling: AccountId32; timepoint: PalletMultisigTimepoint; multisig: AccountId32; callHash: FixedBytes<32> }
    >

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>
  }
  /**
   * Pallet `Proxy`'s events
   **/
  proxy: {
    /**
     * A proxy was executed correctly, with the given.
     **/
    ProxyExecuted: GenericPalletEvent<Rv, 'Proxy', 'ProxyExecuted', { result: Result<[], DispatchError> }>

    /**
     * A pure account has been created by new proxy with given
     * disambiguation index and proxy type.
     **/
    PureCreated: GenericPalletEvent<
      Rv,
      'Proxy',
      'PureCreated',
      { pure: AccountId32; who: AccountId32; proxyType: PhalaParachainRuntimeProxyType; disambiguationIndex: number }
    >

    /**
     * An announcement was placed to make a call in the future.
     **/
    Announced: GenericPalletEvent<Rv, 'Proxy', 'Announced', { real: AccountId32; proxy: AccountId32; callHash: H256 }>

    /**
     * A proxy was added.
     **/
    ProxyAdded: GenericPalletEvent<
      Rv,
      'Proxy',
      'ProxyAdded',
      { delegator: AccountId32; delegatee: AccountId32; proxyType: PhalaParachainRuntimeProxyType; delay: number }
    >

    /**
     * A proxy was removed.
     **/
    ProxyRemoved: GenericPalletEvent<
      Rv,
      'Proxy',
      'ProxyRemoved',
      { delegator: AccountId32; delegatee: AccountId32; proxyType: PhalaParachainRuntimeProxyType; delay: number }
    >

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>
  }
  /**
   * Pallet `Vesting`'s events
   **/
  vesting: {
    /**
     * The amount vested has been updated. This could indicate a change in funds available.
     * The balance given is the amount which is left unvested (and thus locked).
     **/
    VestingUpdated: GenericPalletEvent<Rv, 'Vesting', 'VestingUpdated', { account: AccountId32; unvested: bigint }>

    /**
     * An \[account\] has become fully vested.
     **/
    VestingCompleted: GenericPalletEvent<Rv, 'Vesting', 'VestingCompleted', { account: AccountId32 }>

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>
  }
  /**
   * Pallet `Scheduler`'s events
   **/
  scheduler: {
    /**
     * Scheduled some task.
     **/
    Scheduled: GenericPalletEvent<Rv, 'Scheduler', 'Scheduled', { when: number; index: number }>

    /**
     * Canceled some task.
     **/
    Canceled: GenericPalletEvent<Rv, 'Scheduler', 'Canceled', { when: number; index: number }>

    /**
     * Dispatched some task.
     **/
    Dispatched: GenericPalletEvent<
      Rv,
      'Scheduler',
      'Dispatched',
      { task: [number, number]; id?: FixedBytes<32> | undefined; result: Result<[], DispatchError> }
    >

    /**
     * The call for the provided hash was not found so the task has been aborted.
     **/
    CallUnavailable: GenericPalletEvent<
      Rv,
      'Scheduler',
      'CallUnavailable',
      { task: [number, number]; id?: FixedBytes<32> | undefined }
    >

    /**
     * The given task was unable to be renewed since the agenda is full at that block.
     **/
    PeriodicFailed: GenericPalletEvent<
      Rv,
      'Scheduler',
      'PeriodicFailed',
      { task: [number, number]; id?: FixedBytes<32> | undefined }
    >

    /**
     * The given task can never be executed since it is overweight.
     **/
    PermanentlyOverweight: GenericPalletEvent<
      Rv,
      'Scheduler',
      'PermanentlyOverweight',
      { task: [number, number]; id?: FixedBytes<32> | undefined }
    >

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>
  }
  /**
   * Pallet `Preimage`'s events
   **/
  preimage: {
    /**
     * A preimage has been noted.
     **/
    Noted: GenericPalletEvent<Rv, 'Preimage', 'Noted', { hash: H256 }>

    /**
     * A preimage has been requested.
     **/
    Requested: GenericPalletEvent<Rv, 'Preimage', 'Requested', { hash: H256 }>

    /**
     * A preimage has ben cleared.
     **/
    Cleared: GenericPalletEvent<Rv, 'Preimage', 'Cleared', { hash: H256 }>

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>
  }
  /**
   * Pallet `ParachainSystem`'s events
   **/
  parachainSystem: {
    /**
     * The validation function has been scheduled to apply.
     **/
    ValidationFunctionStored: GenericPalletEvent<Rv, 'ParachainSystem', 'ValidationFunctionStored', null>

    /**
     * The validation function was applied as of the contained relay chain block number.
     **/
    ValidationFunctionApplied: GenericPalletEvent<
      Rv,
      'ParachainSystem',
      'ValidationFunctionApplied',
      { relayChainBlockNum: number }
    >

    /**
     * The relay-chain aborted the upgrade process.
     **/
    ValidationFunctionDiscarded: GenericPalletEvent<Rv, 'ParachainSystem', 'ValidationFunctionDiscarded', null>

    /**
     * An upgrade has been authorized.
     **/
    UpgradeAuthorized: GenericPalletEvent<Rv, 'ParachainSystem', 'UpgradeAuthorized', { codeHash: H256 }>

    /**
     * Some downward messages have been received and will be processed.
     **/
    DownwardMessagesReceived: GenericPalletEvent<Rv, 'ParachainSystem', 'DownwardMessagesReceived', { count: number }>

    /**
     * Downward messages were processed using the given weight.
     **/
    DownwardMessagesProcessed: GenericPalletEvent<
      Rv,
      'ParachainSystem',
      'DownwardMessagesProcessed',
      { weightUsed: SpWeightsWeightV2Weight; dmqHead: H256 }
    >

    /**
     * An upward message was sent to the relay chain.
     **/
    UpwardMessageSent: GenericPalletEvent<
      Rv,
      'ParachainSystem',
      'UpwardMessageSent',
      { messageHash?: FixedBytes<32> | undefined }
    >

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>
  }
  /**
   * Pallet `XcmpQueue`'s events
   **/
  xcmpQueue: {
    /**
     * Some XCM was executed ok.
     **/
    Success: GenericPalletEvent<
      Rv,
      'XcmpQueue',
      'Success',
      { messageHash: FixedBytes<32>; messageId: FixedBytes<32>; weight: SpWeightsWeightV2Weight }
    >

    /**
     * Some XCM failed.
     **/
    Fail: GenericPalletEvent<
      Rv,
      'XcmpQueue',
      'Fail',
      {
        messageHash: FixedBytes<32>
        messageId: FixedBytes<32>
        error: StagingXcmV3TraitsError
        weight: SpWeightsWeightV2Weight
      }
    >

    /**
     * Bad XCM version used.
     **/
    BadVersion: GenericPalletEvent<Rv, 'XcmpQueue', 'BadVersion', { messageHash: FixedBytes<32> }>

    /**
     * Bad XCM format used.
     **/
    BadFormat: GenericPalletEvent<Rv, 'XcmpQueue', 'BadFormat', { messageHash: FixedBytes<32> }>

    /**
     * An HRMP message was sent to a sibling parachain.
     **/
    XcmpMessageSent: GenericPalletEvent<Rv, 'XcmpQueue', 'XcmpMessageSent', { messageHash: FixedBytes<32> }>

    /**
     * An XCM exceeded the individual message weight budget.
     **/
    OverweightEnqueued: GenericPalletEvent<
      Rv,
      'XcmpQueue',
      'OverweightEnqueued',
      {
        sender: PolkadotParachainPrimitivesPrimitivesId
        sentAt: number
        index: bigint
        required: SpWeightsWeightV2Weight
      }
    >

    /**
     * An XCM from the overweight queue was executed with the given actual weight used.
     **/
    OverweightServiced: GenericPalletEvent<
      Rv,
      'XcmpQueue',
      'OverweightServiced',
      { index: bigint; used: SpWeightsWeightV2Weight }
    >

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>
  }
  /**
   * Pallet `CumulusXcm`'s events
   **/
  cumulusXcm: {
    /**
     * Downward message is invalid XCM.
     * \[ id \]
     **/
    InvalidFormat: GenericPalletEvent<Rv, 'CumulusXcm', 'InvalidFormat', FixedBytes<32>>

    /**
     * Downward message is unsupported version of XCM.
     * \[ id \]
     **/
    UnsupportedVersion: GenericPalletEvent<Rv, 'CumulusXcm', 'UnsupportedVersion', FixedBytes<32>>

    /**
     * Downward message executed with the given outcome.
     * \[ id, outcome \]
     **/
    ExecutedDownward: GenericPalletEvent<
      Rv,
      'CumulusXcm',
      'ExecutedDownward',
      [FixedBytes<32>, StagingXcmV3TraitsOutcome]
    >

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>
  }
  /**
   * Pallet `DmpQueue`'s events
   **/
  dmpQueue: {
    /**
     * Downward message is invalid XCM.
     **/
    InvalidFormat: GenericPalletEvent<Rv, 'DmpQueue', 'InvalidFormat', { messageHash: FixedBytes<32> }>

    /**
     * Downward message is unsupported version of XCM.
     **/
    UnsupportedVersion: GenericPalletEvent<Rv, 'DmpQueue', 'UnsupportedVersion', { messageHash: FixedBytes<32> }>

    /**
     * Downward message executed with the given outcome.
     **/
    ExecutedDownward: GenericPalletEvent<
      Rv,
      'DmpQueue',
      'ExecutedDownward',
      { messageHash: FixedBytes<32>; messageId: FixedBytes<32>; outcome: StagingXcmV3TraitsOutcome }
    >

    /**
     * The weight limit for handling downward messages was reached.
     **/
    WeightExhausted: GenericPalletEvent<
      Rv,
      'DmpQueue',
      'WeightExhausted',
      {
        messageHash: FixedBytes<32>
        messageId: FixedBytes<32>
        remainingWeight: SpWeightsWeightV2Weight
        requiredWeight: SpWeightsWeightV2Weight
      }
    >

    /**
     * Downward message is overweight and was placed in the overweight queue.
     **/
    OverweightEnqueued: GenericPalletEvent<
      Rv,
      'DmpQueue',
      'OverweightEnqueued',
      {
        messageHash: FixedBytes<32>
        messageId: FixedBytes<32>
        overweightIndex: bigint
        requiredWeight: SpWeightsWeightV2Weight
      }
    >

    /**
     * Downward message from the overweight queue was executed.
     **/
    OverweightServiced: GenericPalletEvent<
      Rv,
      'DmpQueue',
      'OverweightServiced',
      { overweightIndex: bigint; weightUsed: SpWeightsWeightV2Weight }
    >

    /**
     * The maximum number of downward messages was reached.
     **/
    MaxMessagesExhausted: GenericPalletEvent<Rv, 'DmpQueue', 'MaxMessagesExhausted', { messageHash: FixedBytes<32> }>

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>
  }
  /**
   * Pallet `PolkadotXcm`'s events
   **/
  polkadotXcm: {
    /**
     * Execution of an XCM message was attempted.
     **/
    Attempted: GenericPalletEvent<Rv, 'PolkadotXcm', 'Attempted', { outcome: StagingXcmV3TraitsOutcome }>

    /**
     * A XCM message was sent.
     **/
    Sent: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'Sent',
      {
        origin: StagingXcmV3MultilocationMultiLocation
        destination: StagingXcmV3MultilocationMultiLocation
        message: StagingXcmV3Xcm
        messageId: FixedBytes<32>
      }
    >

    /**
     * Query response received which does not match a registered query. This may be because a
     * matching query was never registered, it may be because it is a duplicate response, or
     * because the query timed out.
     **/
    UnexpectedResponse: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'UnexpectedResponse',
      { origin: StagingXcmV3MultilocationMultiLocation; queryId: bigint }
    >

    /**
     * Query response has been received and is ready for taking with `take_response`. There is
     * no registered notification call.
     **/
    ResponseReady: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'ResponseReady',
      { queryId: bigint; response: StagingXcmV3Response }
    >

    /**
     * Query response has been received and query is removed. The registered notification has
     * been dispatched and executed successfully.
     **/
    Notified: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'Notified',
      { queryId: bigint; palletIndex: number; callIndex: number }
    >

    /**
     * Query response has been received and query is removed. The registered notification
     * could not be dispatched because the dispatch weight is greater than the maximum weight
     * originally budgeted by this runtime for the query result.
     **/
    NotifyOverweight: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'NotifyOverweight',
      {
        queryId: bigint
        palletIndex: number
        callIndex: number
        actualWeight: SpWeightsWeightV2Weight
        maxBudgetedWeight: SpWeightsWeightV2Weight
      }
    >

    /**
     * Query response has been received and query is removed. There was a general error with
     * dispatching the notification call.
     **/
    NotifyDispatchError: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'NotifyDispatchError',
      { queryId: bigint; palletIndex: number; callIndex: number }
    >

    /**
     * Query response has been received and query is removed. The dispatch was unable to be
     * decoded into a `Call`; this might be due to dispatch function having a signature which
     * is not `(origin, QueryId, Response)`.
     **/
    NotifyDecodeFailed: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'NotifyDecodeFailed',
      { queryId: bigint; palletIndex: number; callIndex: number }
    >

    /**
     * Expected query response has been received but the origin location of the response does
     * not match that expected. The query remains registered for a later, valid, response to
     * be received and acted upon.
     **/
    InvalidResponder: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'InvalidResponder',
      {
        origin: StagingXcmV3MultilocationMultiLocation
        queryId: bigint
        expectedLocation?: StagingXcmV3MultilocationMultiLocation | undefined
      }
    >

    /**
     * Expected query response has been received but the expected origin location placed in
     * storage by this runtime previously cannot be decoded. The query remains registered.
     *
     * This is unexpected (since a location placed in storage in a previously executing
     * runtime should be readable prior to query timeout) and dangerous since the possibly
     * valid response will be dropped. Manual governance intervention is probably going to be
     * needed.
     **/
    InvalidResponderVersion: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'InvalidResponderVersion',
      { origin: StagingXcmV3MultilocationMultiLocation; queryId: bigint }
    >

    /**
     * Received query response has been read and removed.
     **/
    ResponseTaken: GenericPalletEvent<Rv, 'PolkadotXcm', 'ResponseTaken', { queryId: bigint }>

    /**
     * Some assets have been placed in an asset trap.
     **/
    AssetsTrapped: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'AssetsTrapped',
      { hash: H256; origin: StagingXcmV3MultilocationMultiLocation; assets: StagingXcmVersionedMultiAssets }
    >

    /**
     * An XCM version change notification message has been attempted to be sent.
     *
     * The cost of sending it (borne by the chain) is included.
     **/
    VersionChangeNotified: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'VersionChangeNotified',
      {
        destination: StagingXcmV3MultilocationMultiLocation
        result: number
        cost: StagingXcmV3MultiassetMultiAssets
        messageId: FixedBytes<32>
      }
    >

    /**
     * The supported version of a location has been changed. This might be through an
     * automatic notification or a manual intervention.
     **/
    SupportedVersionChanged: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'SupportedVersionChanged',
      { location: StagingXcmV3MultilocationMultiLocation; version: number }
    >

    /**
     * A given location which had a version change subscription was dropped owing to an error
     * sending the notification to it.
     **/
    NotifyTargetSendFail: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'NotifyTargetSendFail',
      { location: StagingXcmV3MultilocationMultiLocation; queryId: bigint; error: StagingXcmV3TraitsError }
    >

    /**
     * A given location which had a version change subscription was dropped owing to an error
     * migrating the location to our new XCM format.
     **/
    NotifyTargetMigrationFail: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'NotifyTargetMigrationFail',
      { location: StagingXcmVersionedMultiLocation; queryId: bigint }
    >

    /**
     * Expected query response has been received but the expected querier location placed in
     * storage by this runtime previously cannot be decoded. The query remains registered.
     *
     * This is unexpected (since a location placed in storage in a previously executing
     * runtime should be readable prior to query timeout) and dangerous since the possibly
     * valid response will be dropped. Manual governance intervention is probably going to be
     * needed.
     **/
    InvalidQuerierVersion: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'InvalidQuerierVersion',
      { origin: StagingXcmV3MultilocationMultiLocation; queryId: bigint }
    >

    /**
     * Expected query response has been received but the querier location of the response does
     * not match the expected. The query remains registered for a later, valid, response to
     * be received and acted upon.
     **/
    InvalidQuerier: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'InvalidQuerier',
      {
        origin: StagingXcmV3MultilocationMultiLocation
        queryId: bigint
        expectedQuerier: StagingXcmV3MultilocationMultiLocation
        maybeActualQuerier?: StagingXcmV3MultilocationMultiLocation | undefined
      }
    >

    /**
     * A remote has requested XCM version change notification from us and we have honored it.
     * A version information message is sent to them and its cost is included.
     **/
    VersionNotifyStarted: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'VersionNotifyStarted',
      {
        destination: StagingXcmV3MultilocationMultiLocation
        cost: StagingXcmV3MultiassetMultiAssets
        messageId: FixedBytes<32>
      }
    >

    /**
     * We have requested that a remote chain send us XCM version change notifications.
     **/
    VersionNotifyRequested: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'VersionNotifyRequested',
      {
        destination: StagingXcmV3MultilocationMultiLocation
        cost: StagingXcmV3MultiassetMultiAssets
        messageId: FixedBytes<32>
      }
    >

    /**
     * We have requested that a remote chain stops sending us XCM version change
     * notifications.
     **/
    VersionNotifyUnrequested: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'VersionNotifyUnrequested',
      {
        destination: StagingXcmV3MultilocationMultiLocation
        cost: StagingXcmV3MultiassetMultiAssets
        messageId: FixedBytes<32>
      }
    >

    /**
     * Fees were paid from a location for an operation (often for using `SendXcm`).
     **/
    FeesPaid: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'FeesPaid',
      { paying: StagingXcmV3MultilocationMultiLocation; fees: StagingXcmV3MultiassetMultiAssets }
    >

    /**
     * Some assets have been claimed from an asset trap
     **/
    AssetsClaimed: GenericPalletEvent<
      Rv,
      'PolkadotXcm',
      'AssetsClaimed',
      { hash: H256; origin: StagingXcmV3MultilocationMultiLocation; assets: StagingXcmVersionedMultiAssets }
    >

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>
  }
  /**
   * Pallet `Balances`'s events
   **/
  balances: {
    /**
     * An account was created with some free balance.
     **/
    Endowed: GenericPalletEvent<Rv, 'Balances', 'Endowed', { account: AccountId32; freeBalance: bigint }>

    /**
     * An account was removed whose balance was non-zero but below ExistentialDeposit,
     * resulting in an outright loss.
     **/
    DustLost: GenericPalletEvent<Rv, 'Balances', 'DustLost', { account: AccountId32; amount: bigint }>

    /**
     * Transfer succeeded.
     **/
    Transfer: GenericPalletEvent<Rv, 'Balances', 'Transfer', { from: AccountId32; to: AccountId32; amount: bigint }>

    /**
     * A balance was set by root.
     **/
    BalanceSet: GenericPalletEvent<Rv, 'Balances', 'BalanceSet', { who: AccountId32; free: bigint }>

    /**
     * Some balance was reserved (moved from free to reserved).
     **/
    Reserved: GenericPalletEvent<Rv, 'Balances', 'Reserved', { who: AccountId32; amount: bigint }>

    /**
     * Some balance was unreserved (moved from reserved to free).
     **/
    Unreserved: GenericPalletEvent<Rv, 'Balances', 'Unreserved', { who: AccountId32; amount: bigint }>

    /**
     * Some balance was moved from the reserve of the first account to the second account.
     * Final argument indicates the destination balance type.
     **/
    ReserveRepatriated: GenericPalletEvent<
      Rv,
      'Balances',
      'ReserveRepatriated',
      { from: AccountId32; to: AccountId32; amount: bigint; destinationStatus: FrameSupportTokensMiscBalanceStatus }
    >

    /**
     * Some amount was deposited (e.g. for transaction fees).
     **/
    Deposit: GenericPalletEvent<Rv, 'Balances', 'Deposit', { who: AccountId32; amount: bigint }>

    /**
     * Some amount was withdrawn from the account (e.g. for transaction fees).
     **/
    Withdraw: GenericPalletEvent<Rv, 'Balances', 'Withdraw', { who: AccountId32; amount: bigint }>

    /**
     * Some amount was removed from the account (e.g. for misbehavior).
     **/
    Slashed: GenericPalletEvent<Rv, 'Balances', 'Slashed', { who: AccountId32; amount: bigint }>

    /**
     * Some amount was minted into an account.
     **/
    Minted: GenericPalletEvent<Rv, 'Balances', 'Minted', { who: AccountId32; amount: bigint }>

    /**
     * Some amount was burned from an account.
     **/
    Burned: GenericPalletEvent<Rv, 'Balances', 'Burned', { who: AccountId32; amount: bigint }>

    /**
     * Some amount was suspended from an account (it can be restored later).
     **/
    Suspended: GenericPalletEvent<Rv, 'Balances', 'Suspended', { who: AccountId32; amount: bigint }>

    /**
     * Some amount was restored into an account.
     **/
    Restored: GenericPalletEvent<Rv, 'Balances', 'Restored', { who: AccountId32; amount: bigint }>

    /**
     * An account was upgraded.
     **/
    Upgraded: GenericPalletEvent<Rv, 'Balances', 'Upgraded', { who: AccountId32 }>

    /**
     * Total issuance was increased by `amount`, creating a credit to be balanced.
     **/
    Issued: GenericPalletEvent<Rv, 'Balances', 'Issued', { amount: bigint }>

    /**
     * Total issuance was decreased by `amount`, creating a debt to be balanced.
     **/
    Rescinded: GenericPalletEvent<Rv, 'Balances', 'Rescinded', { amount: bigint }>

    /**
     * Some balance was locked.
     **/
    Locked: GenericPalletEvent<Rv, 'Balances', 'Locked', { who: AccountId32; amount: bigint }>

    /**
     * Some balance was unlocked.
     **/
    Unlocked: GenericPalletEvent<Rv, 'Balances', 'Unlocked', { who: AccountId32; amount: bigint }>

    /**
     * Some balance was frozen.
     **/
    Frozen: GenericPalletEvent<Rv, 'Balances', 'Frozen', { who: AccountId32; amount: bigint }>

    /**
     * Some balance was thawed.
     **/
    Thawed: GenericPalletEvent<Rv, 'Balances', 'Thawed', { who: AccountId32; amount: bigint }>

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>
  }
  /**
   * Pallet `TransactionPayment`'s events
   **/
  transactionPayment: {
    /**
     * A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,
     * has been paid by `who`.
     **/
    TransactionFeePaid: GenericPalletEvent<
      Rv,
      'TransactionPayment',
      'TransactionFeePaid',
      { who: AccountId32; actualFee: bigint; tip: bigint }
    >

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>
  }
  /**
   * Pallet `Assets`'s events
   **/
  assets: {
    /**
     * Some asset class was created.
     **/
    Created: GenericPalletEvent<Rv, 'Assets', 'Created', { assetId: number; creator: AccountId32; owner: AccountId32 }>

    /**
     * Some assets were issued.
     **/
    Issued: GenericPalletEvent<Rv, 'Assets', 'Issued', { assetId: number; owner: AccountId32; amount: bigint }>

    /**
     * Some assets were transferred.
     **/
    Transferred: GenericPalletEvent<
      Rv,
      'Assets',
      'Transferred',
      { assetId: number; from: AccountId32; to: AccountId32; amount: bigint }
    >

    /**
     * Some assets were destroyed.
     **/
    Burned: GenericPalletEvent<Rv, 'Assets', 'Burned', { assetId: number; owner: AccountId32; balance: bigint }>

    /**
     * The management team changed.
     **/
    TeamChanged: GenericPalletEvent<
      Rv,
      'Assets',
      'TeamChanged',
      { assetId: number; issuer: AccountId32; admin: AccountId32; freezer: AccountId32 }
    >

    /**
     * The owner changed.
     **/
    OwnerChanged: GenericPalletEvent<Rv, 'Assets', 'OwnerChanged', { assetId: number; owner: AccountId32 }>

    /**
     * Some account `who` was frozen.
     **/
    Frozen: GenericPalletEvent<Rv, 'Assets', 'Frozen', { assetId: number; who: AccountId32 }>

    /**
     * Some account `who` was thawed.
     **/
    Thawed: GenericPalletEvent<Rv, 'Assets', 'Thawed', { assetId: number; who: AccountId32 }>

    /**
     * Some asset `asset_id` was frozen.
     **/
    AssetFrozen: GenericPalletEvent<Rv, 'Assets', 'AssetFrozen', { assetId: number }>

    /**
     * Some asset `asset_id` was thawed.
     **/
    AssetThawed: GenericPalletEvent<Rv, 'Assets', 'AssetThawed', { assetId: number }>

    /**
     * Accounts were destroyed for given asset.
     **/
    AccountsDestroyed: GenericPalletEvent<
      Rv,
      'Assets',
      'AccountsDestroyed',
      { assetId: number; accountsDestroyed: number; accountsRemaining: number }
    >

    /**
     * Approvals were destroyed for given asset.
     **/
    ApprovalsDestroyed: GenericPalletEvent<
      Rv,
      'Assets',
      'ApprovalsDestroyed',
      { assetId: number; approvalsDestroyed: number; approvalsRemaining: number }
    >

    /**
     * An asset class is in the process of being destroyed.
     **/
    DestructionStarted: GenericPalletEvent<Rv, 'Assets', 'DestructionStarted', { assetId: number }>

    /**
     * An asset class was destroyed.
     **/
    Destroyed: GenericPalletEvent<Rv, 'Assets', 'Destroyed', { assetId: number }>

    /**
     * Some asset class was force-created.
     **/
    ForceCreated: GenericPalletEvent<Rv, 'Assets', 'ForceCreated', { assetId: number; owner: AccountId32 }>

    /**
     * New metadata has been set for an asset.
     **/
    MetadataSet: GenericPalletEvent<
      Rv,
      'Assets',
      'MetadataSet',
      { assetId: number; name: Bytes; symbol: Bytes; decimals: number; isFrozen: boolean }
    >

    /**
     * Metadata has been cleared for an asset.
     **/
    MetadataCleared: GenericPalletEvent<Rv, 'Assets', 'MetadataCleared', { assetId: number }>

    /**
     * (Additional) funds have been approved for transfer to a destination account.
     **/
    ApprovedTransfer: GenericPalletEvent<
      Rv,
      'Assets',
      'ApprovedTransfer',
      { assetId: number; source: AccountId32; delegate: AccountId32; amount: bigint }
    >

    /**
     * An approval for account `delegate` was cancelled by `owner`.
     **/
    ApprovalCancelled: GenericPalletEvent<
      Rv,
      'Assets',
      'ApprovalCancelled',
      { assetId: number; owner: AccountId32; delegate: AccountId32 }
    >

    /**
     * An `amount` was transferred in its entirety from `owner` to `destination` by
     * the approved `delegate`.
     **/
    TransferredApproved: GenericPalletEvent<
      Rv,
      'Assets',
      'TransferredApproved',
      { assetId: number; owner: AccountId32; delegate: AccountId32; destination: AccountId32; amount: bigint }
    >

    /**
     * An asset has had its attributes changed by the `Force` origin.
     **/
    AssetStatusChanged: GenericPalletEvent<Rv, 'Assets', 'AssetStatusChanged', { assetId: number }>

    /**
     * The min_balance of an asset has been updated by the asset owner.
     **/
    AssetMinBalanceChanged: GenericPalletEvent<
      Rv,
      'Assets',
      'AssetMinBalanceChanged',
      { assetId: number; newMinBalance: bigint }
    >

    /**
     * Some account `who` was created with a deposit from `depositor`.
     **/
    Touched: GenericPalletEvent<Rv, 'Assets', 'Touched', { assetId: number; who: AccountId32; depositor: AccountId32 }>

    /**
     * Some account `who` was blocked.
     **/
    Blocked: GenericPalletEvent<Rv, 'Assets', 'Blocked', { assetId: number; who: AccountId32 }>

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>
  }
  /**
   * Pallet `CollatorSelection`'s events
   **/
  collatorSelection: {
    /**
     * New Invulnerables were set.
     **/
    NewInvulnerables: GenericPalletEvent<
      Rv,
      'CollatorSelection',
      'NewInvulnerables',
      { invulnerables: Array<AccountId32> }
    >

    /**
     * A new Invulnerable was added.
     **/
    InvulnerableAdded: GenericPalletEvent<Rv, 'CollatorSelection', 'InvulnerableAdded', { accountId: AccountId32 }>

    /**
     * An Invulnerable was removed.
     **/
    InvulnerableRemoved: GenericPalletEvent<Rv, 'CollatorSelection', 'InvulnerableRemoved', { accountId: AccountId32 }>

    /**
     * The number of desired candidates was set.
     **/
    NewDesiredCandidates: GenericPalletEvent<
      Rv,
      'CollatorSelection',
      'NewDesiredCandidates',
      { desiredCandidates: number }
    >

    /**
     * The candidacy bond was set.
     **/
    NewCandidacyBond: GenericPalletEvent<Rv, 'CollatorSelection', 'NewCandidacyBond', { bondAmount: bigint }>

    /**
     * A new candidate joined.
     **/
    CandidateAdded: GenericPalletEvent<
      Rv,
      'CollatorSelection',
      'CandidateAdded',
      { accountId: AccountId32; deposit: bigint }
    >

    /**
     * A candidate was removed.
     **/
    CandidateRemoved: GenericPalletEvent<Rv, 'CollatorSelection', 'CandidateRemoved', { accountId: AccountId32 }>

    /**
     * An account was unable to be added to the Invulnerables because they did not have keys
     * registered. Other Invulnerables may have been set.
     **/
    InvalidInvulnerableSkipped: GenericPalletEvent<
      Rv,
      'CollatorSelection',
      'InvalidInvulnerableSkipped',
      { accountId: AccountId32 }
    >

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>
  }
  /**
   * Pallet `Session`'s events
   **/
  session: {
    /**
     * New session has happened. Note that the argument is the session index, not the
     * block number as the type might suggest.
     **/
    NewSession: GenericPalletEvent<Rv, 'Session', 'NewSession', { sessionIndex: number }>

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>
  }
  /**
   * Pallet `Identity`'s events
   **/
  identity: {
    /**
     * A name was set or reset (which will remove all judgements).
     **/
    IdentitySet: GenericPalletEvent<Rv, 'Identity', 'IdentitySet', { who: AccountId32 }>

    /**
     * A name was cleared, and the given balance returned.
     **/
    IdentityCleared: GenericPalletEvent<Rv, 'Identity', 'IdentityCleared', { who: AccountId32; deposit: bigint }>

    /**
     * A name was removed and the given balance slashed.
     **/
    IdentityKilled: GenericPalletEvent<Rv, 'Identity', 'IdentityKilled', { who: AccountId32; deposit: bigint }>

    /**
     * A judgement was asked from a registrar.
     **/
    JudgementRequested: GenericPalletEvent<
      Rv,
      'Identity',
      'JudgementRequested',
      { who: AccountId32; registrarIndex: number }
    >

    /**
     * A judgement request was retracted.
     **/
    JudgementUnrequested: GenericPalletEvent<
      Rv,
      'Identity',
      'JudgementUnrequested',
      { who: AccountId32; registrarIndex: number }
    >

    /**
     * A judgement was given by a registrar.
     **/
    JudgementGiven: GenericPalletEvent<
      Rv,
      'Identity',
      'JudgementGiven',
      { target: AccountId32; registrarIndex: number }
    >

    /**
     * A registrar was added.
     **/
    RegistrarAdded: GenericPalletEvent<Rv, 'Identity', 'RegistrarAdded', { registrarIndex: number }>

    /**
     * A sub-identity was added to an identity and the deposit paid.
     **/
    SubIdentityAdded: GenericPalletEvent<
      Rv,
      'Identity',
      'SubIdentityAdded',
      { sub: AccountId32; main: AccountId32; deposit: bigint }
    >

    /**
     * A sub-identity was removed from an identity and the deposit freed.
     **/
    SubIdentityRemoved: GenericPalletEvent<
      Rv,
      'Identity',
      'SubIdentityRemoved',
      { sub: AccountId32; main: AccountId32; deposit: bigint }
    >

    /**
     * A sub-identity was cleared, and the given deposit repatriated from the
     * main identity account to the sub-identity account.
     **/
    SubIdentityRevoked: GenericPalletEvent<
      Rv,
      'Identity',
      'SubIdentityRevoked',
      { sub: AccountId32; main: AccountId32; deposit: bigint }
    >

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>
  }
  /**
   * Pallet `Democracy`'s events
   **/
  democracy: {
    /**
     * A motion has been proposed by a public account.
     **/
    Proposed: GenericPalletEvent<Rv, 'Democracy', 'Proposed', { proposalIndex: number; deposit: bigint }>

    /**
     * A public proposal has been tabled for referendum vote.
     **/
    Tabled: GenericPalletEvent<Rv, 'Democracy', 'Tabled', { proposalIndex: number; deposit: bigint }>

    /**
     * An external proposal has been tabled.
     **/
    ExternalTabled: GenericPalletEvent<Rv, 'Democracy', 'ExternalTabled', null>

    /**
     * A referendum has begun.
     **/
    Started: GenericPalletEvent<
      Rv,
      'Democracy',
      'Started',
      { refIndex: number; threshold: PalletDemocracyVoteThreshold }
    >

    /**
     * A proposal has been approved by referendum.
     **/
    Passed: GenericPalletEvent<Rv, 'Democracy', 'Passed', { refIndex: number }>

    /**
     * A proposal has been rejected by referendum.
     **/
    NotPassed: GenericPalletEvent<Rv, 'Democracy', 'NotPassed', { refIndex: number }>

    /**
     * A referendum has been cancelled.
     **/
    Cancelled: GenericPalletEvent<Rv, 'Democracy', 'Cancelled', { refIndex: number }>

    /**
     * An account has delegated their vote to another account.
     **/
    Delegated: GenericPalletEvent<Rv, 'Democracy', 'Delegated', { who: AccountId32; target: AccountId32 }>

    /**
     * An account has cancelled a previous delegation operation.
     **/
    Undelegated: GenericPalletEvent<Rv, 'Democracy', 'Undelegated', { account: AccountId32 }>

    /**
     * An external proposal has been vetoed.
     **/
    Vetoed: GenericPalletEvent<Rv, 'Democracy', 'Vetoed', { who: AccountId32; proposalHash: H256; until: number }>

    /**
     * A proposal_hash has been blacklisted permanently.
     **/
    Blacklisted: GenericPalletEvent<Rv, 'Democracy', 'Blacklisted', { proposalHash: H256 }>

    /**
     * An account has voted in a referendum
     **/
    Voted: GenericPalletEvent<
      Rv,
      'Democracy',
      'Voted',
      { voter: AccountId32; refIndex: number; vote: PalletDemocracyVoteAccountVote }
    >

    /**
     * An account has secconded a proposal
     **/
    Seconded: GenericPalletEvent<Rv, 'Democracy', 'Seconded', { seconder: AccountId32; propIndex: number }>

    /**
     * A proposal got canceled.
     **/
    ProposalCanceled: GenericPalletEvent<Rv, 'Democracy', 'ProposalCanceled', { propIndex: number }>

    /**
     * Metadata for a proposal or a referendum has been set.
     **/
    MetadataSet: GenericPalletEvent<
      Rv,
      'Democracy',
      'MetadataSet',
      {
        /**
         * Metadata owner.
         **/
        owner: PalletDemocracyMetadataOwner

        /**
         * Preimage hash.
         **/
        hash: H256
      }
    >

    /**
     * Metadata for a proposal or a referendum has been cleared.
     **/
    MetadataCleared: GenericPalletEvent<
      Rv,
      'Democracy',
      'MetadataCleared',
      {
        /**
         * Metadata owner.
         **/
        owner: PalletDemocracyMetadataOwner

        /**
         * Preimage hash.
         **/
        hash: H256
      }
    >

    /**
     * Metadata has been transferred to new owner.
     **/
    MetadataTransferred: GenericPalletEvent<
      Rv,
      'Democracy',
      'MetadataTransferred',
      {
        /**
         * Previous metadata owner.
         **/
        prevOwner: PalletDemocracyMetadataOwner

        /**
         * New metadata owner.
         **/
        owner: PalletDemocracyMetadataOwner

        /**
         * Preimage hash.
         **/
        hash: H256
      }
    >

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>
  }
  /**
   * Pallet `Council`'s events
   **/
  council: {
    /**
     * A motion (given hash) has been proposed (by given account) with a threshold (given
     * `MemberCount`).
     **/
    Proposed: GenericPalletEvent<
      Rv,
      'Council',
      'Proposed',
      { account: AccountId32; proposalIndex: number; proposalHash: H256; threshold: number }
    >

    /**
     * A motion (given hash) has been voted on by given account, leaving
     * a tally (yes votes and no votes given respectively as `MemberCount`).
     **/
    Voted: GenericPalletEvent<
      Rv,
      'Council',
      'Voted',
      { account: AccountId32; proposalHash: H256; voted: boolean; yes: number; no: number }
    >

    /**
     * A motion was approved by the required threshold.
     **/
    Approved: GenericPalletEvent<Rv, 'Council', 'Approved', { proposalHash: H256 }>

    /**
     * A motion was not approved by the required threshold.
     **/
    Disapproved: GenericPalletEvent<Rv, 'Council', 'Disapproved', { proposalHash: H256 }>

    /**
     * A motion was executed; result will be `Ok` if it returned without error.
     **/
    Executed: GenericPalletEvent<Rv, 'Council', 'Executed', { proposalHash: H256; result: Result<[], DispatchError> }>

    /**
     * A single member did some action; result will be `Ok` if it returned without error.
     **/
    MemberExecuted: GenericPalletEvent<
      Rv,
      'Council',
      'MemberExecuted',
      { proposalHash: H256; result: Result<[], DispatchError> }
    >

    /**
     * A proposal was closed because its threshold was reached or after its duration was up.
     **/
    Closed: GenericPalletEvent<Rv, 'Council', 'Closed', { proposalHash: H256; yes: number; no: number }>

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>
  }
  /**
   * Pallet `Treasury`'s events
   **/
  treasury: {
    /**
     * New proposal.
     **/
    Proposed: GenericPalletEvent<Rv, 'Treasury', 'Proposed', { proposalIndex: number }>

    /**
     * We have ended a spend period and will now allocate funds.
     **/
    Spending: GenericPalletEvent<Rv, 'Treasury', 'Spending', { budgetRemaining: bigint }>

    /**
     * Some funds have been allocated.
     **/
    Awarded: GenericPalletEvent<
      Rv,
      'Treasury',
      'Awarded',
      { proposalIndex: number; award: bigint; account: AccountId32 }
    >

    /**
     * A proposal was rejected; funds were slashed.
     **/
    Rejected: GenericPalletEvent<Rv, 'Treasury', 'Rejected', { proposalIndex: number; slashed: bigint }>

    /**
     * Some of our funds have been burnt.
     **/
    Burnt: GenericPalletEvent<Rv, 'Treasury', 'Burnt', { burntFunds: bigint }>

    /**
     * Spending has finished; this is the amount that rolls over until next spend.
     **/
    Rollover: GenericPalletEvent<Rv, 'Treasury', 'Rollover', { rolloverBalance: bigint }>

    /**
     * Some funds have been deposited.
     **/
    Deposit: GenericPalletEvent<Rv, 'Treasury', 'Deposit', { value: bigint }>

    /**
     * A new spend proposal has been approved.
     **/
    SpendApproved: GenericPalletEvent<
      Rv,
      'Treasury',
      'SpendApproved',
      { proposalIndex: number; amount: bigint; beneficiary: AccountId32 }
    >

    /**
     * The inactive funds of the pallet have been updated.
     **/
    UpdatedInactive: GenericPalletEvent<Rv, 'Treasury', 'UpdatedInactive', { reactivated: bigint; deactivated: bigint }>

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>
  }
  /**
   * Pallet `Bounties`'s events
   **/
  bounties: {
    /**
     * New bounty proposal.
     **/
    BountyProposed: GenericPalletEvent<Rv, 'Bounties', 'BountyProposed', { index: number }>

    /**
     * A bounty proposal was rejected; funds were slashed.
     **/
    BountyRejected: GenericPalletEvent<Rv, 'Bounties', 'BountyRejected', { index: number; bond: bigint }>

    /**
     * A bounty proposal is funded and became active.
     **/
    BountyBecameActive: GenericPalletEvent<Rv, 'Bounties', 'BountyBecameActive', { index: number }>

    /**
     * A bounty is awarded to a beneficiary.
     **/
    BountyAwarded: GenericPalletEvent<Rv, 'Bounties', 'BountyAwarded', { index: number; beneficiary: AccountId32 }>

    /**
     * A bounty is claimed by beneficiary.
     **/
    BountyClaimed: GenericPalletEvent<
      Rv,
      'Bounties',
      'BountyClaimed',
      { index: number; payout: bigint; beneficiary: AccountId32 }
    >

    /**
     * A bounty is cancelled.
     **/
    BountyCanceled: GenericPalletEvent<Rv, 'Bounties', 'BountyCanceled', { index: number }>

    /**
     * A bounty expiry is extended.
     **/
    BountyExtended: GenericPalletEvent<Rv, 'Bounties', 'BountyExtended', { index: number }>

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>
  }
  /**
   * Pallet `Lottery`'s events
   **/
  lottery: {
    /**
     * A lottery has been started!
     **/
    LotteryStarted: GenericPalletEvent<Rv, 'Lottery', 'LotteryStarted', null>

    /**
     * A new set of calls have been set!
     **/
    CallsUpdated: GenericPalletEvent<Rv, 'Lottery', 'CallsUpdated', null>

    /**
     * A winner has been chosen!
     **/
    Winner: GenericPalletEvent<Rv, 'Lottery', 'Winner', { winner: AccountId32; lotteryBalance: bigint }>

    /**
     * A ticket has been bought!
     **/
    TicketBought: GenericPalletEvent<Rv, 'Lottery', 'TicketBought', { who: AccountId32; callIndex: [number, number] }>

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>
  }
  /**
   * Pallet `TechnicalCommittee`'s events
   **/
  technicalCommittee: {
    /**
     * A motion (given hash) has been proposed (by given account) with a threshold (given
     * `MemberCount`).
     **/
    Proposed: GenericPalletEvent<
      Rv,
      'TechnicalCommittee',
      'Proposed',
      { account: AccountId32; proposalIndex: number; proposalHash: H256; threshold: number }
    >

    /**
     * A motion (given hash) has been voted on by given account, leaving
     * a tally (yes votes and no votes given respectively as `MemberCount`).
     **/
    Voted: GenericPalletEvent<
      Rv,
      'TechnicalCommittee',
      'Voted',
      { account: AccountId32; proposalHash: H256; voted: boolean; yes: number; no: number }
    >

    /**
     * A motion was approved by the required threshold.
     **/
    Approved: GenericPalletEvent<Rv, 'TechnicalCommittee', 'Approved', { proposalHash: H256 }>

    /**
     * A motion was not approved by the required threshold.
     **/
    Disapproved: GenericPalletEvent<Rv, 'TechnicalCommittee', 'Disapproved', { proposalHash: H256 }>

    /**
     * A motion was executed; result will be `Ok` if it returned without error.
     **/
    Executed: GenericPalletEvent<
      Rv,
      'TechnicalCommittee',
      'Executed',
      { proposalHash: H256; result: Result<[], DispatchError> }
    >

    /**
     * A single member did some action; result will be `Ok` if it returned without error.
     **/
    MemberExecuted: GenericPalletEvent<
      Rv,
      'TechnicalCommittee',
      'MemberExecuted',
      { proposalHash: H256; result: Result<[], DispatchError> }
    >

    /**
     * A proposal was closed because its threshold was reached or after its duration was up.
     **/
    Closed: GenericPalletEvent<Rv, 'TechnicalCommittee', 'Closed', { proposalHash: H256; yes: number; no: number }>

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>
  }
  /**
   * Pallet `TechnicalMembership`'s events
   **/
  technicalMembership: {
    /**
     * The given member was added; see the transaction for who.
     **/
    MemberAdded: GenericPalletEvent<Rv, 'TechnicalMembership', 'MemberAdded', undefined>

    /**
     * The given member was removed; see the transaction for who.
     **/
    MemberRemoved: GenericPalletEvent<Rv, 'TechnicalMembership', 'MemberRemoved', undefined>

    /**
     * Two members were swapped; see the transaction for who.
     **/
    MembersSwapped: GenericPalletEvent<Rv, 'TechnicalMembership', 'MembersSwapped', undefined>

    /**
     * The membership was reset; see the transaction for who the new set is.
     **/
    MembersReset: GenericPalletEvent<Rv, 'TechnicalMembership', 'MembersReset', undefined>

    /**
     * One of the members' keys changed.
     **/
    KeyChanged: GenericPalletEvent<Rv, 'TechnicalMembership', 'KeyChanged', undefined>

    /**
     * Phantom member, never used.
     **/
    Dummy: GenericPalletEvent<Rv, 'TechnicalMembership', 'Dummy', undefined>

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>
  }
  /**
   * Pallet `PhragmenElection`'s events
   **/
  phragmenElection: {
    /**
     * A new term with new_members. This indicates that enough candidates existed to run
     * the election, not that enough have has been elected. The inner value must be examined
     * for this purpose. A `NewTerm(\[\])` indicates that some candidates got their bond
     * slashed and none were elected, whilst `EmptyTerm` means that no candidates existed to
     * begin with.
     **/
    NewTerm: GenericPalletEvent<Rv, 'PhragmenElection', 'NewTerm', { newMembers: Array<[AccountId32, bigint]> }>

    /**
     * No (or not enough) candidates existed for this round. This is different from
     * `NewTerm(\[\])`. See the description of `NewTerm`.
     **/
    EmptyTerm: GenericPalletEvent<Rv, 'PhragmenElection', 'EmptyTerm', null>

    /**
     * Internal error happened while trying to perform election.
     **/
    ElectionError: GenericPalletEvent<Rv, 'PhragmenElection', 'ElectionError', null>

    /**
     * A member has been removed. This should always be followed by either `NewTerm` or
     * `EmptyTerm`.
     **/
    MemberKicked: GenericPalletEvent<Rv, 'PhragmenElection', 'MemberKicked', { member: AccountId32 }>

    /**
     * Someone has renounced their candidacy.
     **/
    Renounced: GenericPalletEvent<Rv, 'PhragmenElection', 'Renounced', { candidate: AccountId32 }>

    /**
     * A candidate was slashed by amount due to failing to obtain a seat as member or
     * runner-up.
     *
     * Note that old members and runners-up are also candidates.
     **/
    CandidateSlashed: GenericPalletEvent<
      Rv,
      'PhragmenElection',
      'CandidateSlashed',
      { candidate: AccountId32; amount: bigint }
    >

    /**
     * A seat holder was slashed by amount by being forcefully removed from the set.
     **/
    SeatHolderSlashed: GenericPalletEvent<
      Rv,
      'PhragmenElection',
      'SeatHolderSlashed',
      { seatHolder: AccountId32; amount: bigint }
    >

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>
  }
  /**
   * Pallet `Tips`'s events
   **/
  tips: {
    /**
     * A new tip suggestion has been opened.
     **/
    NewTip: GenericPalletEvent<Rv, 'Tips', 'NewTip', { tipHash: H256 }>

    /**
     * A tip suggestion has reached threshold and is closing.
     **/
    TipClosing: GenericPalletEvent<Rv, 'Tips', 'TipClosing', { tipHash: H256 }>

    /**
     * A tip suggestion has been closed.
     **/
    TipClosed: GenericPalletEvent<Rv, 'Tips', 'TipClosed', { tipHash: H256; who: AccountId32; payout: bigint }>

    /**
     * A tip suggestion has been retracted.
     **/
    TipRetracted: GenericPalletEvent<Rv, 'Tips', 'TipRetracted', { tipHash: H256 }>

    /**
     * A tip suggestion has been slashed.
     **/
    TipSlashed: GenericPalletEvent<Rv, 'Tips', 'TipSlashed', { tipHash: H256; finder: AccountId32; deposit: bigint }>

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>
  }
  /**
   * Pallet `ChildBounties`'s events
   **/
  childBounties: {
    /**
     * A child-bounty is added.
     **/
    Added: GenericPalletEvent<Rv, 'ChildBounties', 'Added', { index: number; childIndex: number }>

    /**
     * A child-bounty is awarded to a beneficiary.
     **/
    Awarded: GenericPalletEvent<
      Rv,
      'ChildBounties',
      'Awarded',
      { index: number; childIndex: number; beneficiary: AccountId32 }
    >

    /**
     * A child-bounty is claimed by beneficiary.
     **/
    Claimed: GenericPalletEvent<
      Rv,
      'ChildBounties',
      'Claimed',
      { index: number; childIndex: number; payout: bigint; beneficiary: AccountId32 }
    >

    /**
     * A child-bounty is cancelled.
     **/
    Canceled: GenericPalletEvent<Rv, 'ChildBounties', 'Canceled', { index: number; childIndex: number }>

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>
  }
  /**
   * Pallet `ChainBridge`'s events
   **/
  chainBridge: {
    /**
     * Vote threshold has changed (new_threshold)
     **/
    RelayerThresholdChanged: GenericPalletEvent<Rv, 'ChainBridge', 'RelayerThresholdChanged', number>

    /**
     * Chain now available for transfers (chain_id)
     **/
    ChainWhitelisted: GenericPalletEvent<Rv, 'ChainBridge', 'ChainWhitelisted', number>

    /**
     * Relayer added to set
     **/
    RelayerAdded: GenericPalletEvent<Rv, 'ChainBridge', 'RelayerAdded', AccountId32>

    /**
     * Relayer removed from set
     **/
    RelayerRemoved: GenericPalletEvent<Rv, 'ChainBridge', 'RelayerRemoved', AccountId32>

    /**
     * FungibleTransfer is for relaying fungibles (dest_id, nonce, resource_id, amount, recipient)
     **/
    FungibleTransfer: GenericPalletEvent<
      Rv,
      'ChainBridge',
      'FungibleTransfer',
      [number, bigint, FixedBytes<32>, U256, Bytes]
    >

    /**
     * NonFungibleTransfer is for relaying NFTs (dest_id, nonce, resource_id, token_id, recipient, metadata)
     **/
    NonFungibleTransfer: GenericPalletEvent<
      Rv,
      'ChainBridge',
      'NonFungibleTransfer',
      [number, bigint, FixedBytes<32>, Bytes, Bytes, Bytes]
    >

    /**
     * GenericTransfer is for a generic data payload (dest_id, nonce, resource_id, metadata)
     **/
    GenericTransfer: GenericPalletEvent<Rv, 'ChainBridge', 'GenericTransfer', [number, bigint, FixedBytes<32>, Bytes]>

    /**
     * Vote submitted in favour of proposal
     **/
    VoteFor: GenericPalletEvent<Rv, 'ChainBridge', 'VoteFor', [number, bigint, AccountId32]>

    /**
     * Vot submitted against proposal
     **/
    VoteAgainst: GenericPalletEvent<Rv, 'ChainBridge', 'VoteAgainst', [number, bigint, AccountId32]>

    /**
     * Voting successful for a proposal
     **/
    ProposalApproved: GenericPalletEvent<Rv, 'ChainBridge', 'ProposalApproved', [number, bigint]>

    /**
     * Voting rejected a proposal
     **/
    ProposalRejected: GenericPalletEvent<Rv, 'ChainBridge', 'ProposalRejected', [number, bigint]>

    /**
     * Execution of call succeeded
     **/
    ProposalSucceeded: GenericPalletEvent<Rv, 'ChainBridge', 'ProposalSucceeded', [number, bigint]>

    /**
     * Execution of call failed
     **/
    ProposalFailed: GenericPalletEvent<Rv, 'ChainBridge', 'ProposalFailed', [number, bigint]>
    FeeUpdated: GenericPalletEvent<Rv, 'ChainBridge', 'FeeUpdated', { destId: number; fee: bigint }>

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>
  }
  /**
   * Pallet `XcmBridge`'s events
   **/
  xcmBridge: {
    /**
     * Assets sent to parachain or relaychain.
     **/
    AssetTransfered: GenericPalletEvent<
      Rv,
      'XcmBridge',
      'AssetTransfered',
      {
        asset: StagingXcmV3MultiassetMultiAsset
        origin: StagingXcmV3MultilocationMultiLocation
        dest: StagingXcmV3MultilocationMultiLocation
      }
    >

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>
  }
  /**
   * Pallet `XTransfer`'s events
   **/
  xTransfer: {
    /**
     * Assets being withdrawn from somewhere.
     **/
    Withdrawn: GenericPalletEvent<
      Rv,
      'XTransfer',
      'Withdrawn',
      { what: StagingXcmV3MultiassetMultiAsset; who: StagingXcmV3MultilocationMultiLocation; memo: Bytes }
    >

    /**
     * Assets being deposited to somewhere.
     **/
    Deposited: GenericPalletEvent<
      Rv,
      'XTransfer',
      'Deposited',
      { what: StagingXcmV3MultiassetMultiAsset; who: StagingXcmV3MultilocationMultiLocation; memo: Bytes }
    >

    /**
     * Assets being forwarded to somewhere.
     **/
    Forwarded: GenericPalletEvent<
      Rv,
      'XTransfer',
      'Forwarded',
      { what: StagingXcmV3MultiassetMultiAsset; who: StagingXcmV3MultilocationMultiLocation; memo: Bytes }
    >

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>
  }
  /**
   * Pallet `AssetsRegistry`'s events
   **/
  assetsRegistry: {
    /**
     * Asset is registerd.
     **/
    AssetRegistered: GenericPalletEvent<
      Rv,
      'AssetsRegistry',
      'AssetRegistered',
      { assetId: number; location: StagingXcmV3MultilocationMultiLocation }
    >

    /**
     * Asset is unregisterd.
     **/
    AssetUnregistered: GenericPalletEvent<
      Rv,
      'AssetsRegistry',
      'AssetUnregistered',
      { assetId: number; location: StagingXcmV3MultilocationMultiLocation }
    >

    /**
     * Asset enabled chainbridge.
     **/
    ChainbridgeEnabled: GenericPalletEvent<
      Rv,
      'AssetsRegistry',
      'ChainbridgeEnabled',
      { assetId: number; chainId: number; resourceId: FixedBytes<32> }
    >

    /**
     * Asset disabled chainbridge.
     **/
    ChainbridgeDisabled: GenericPalletEvent<
      Rv,
      'AssetsRegistry',
      'ChainbridgeDisabled',
      { assetId: number; chainId: number; resourceId: FixedBytes<32> }
    >

    /**
     * Asset enabled sygmabridge.
     **/
    SygmabridgeEnabled: GenericPalletEvent<
      Rv,
      'AssetsRegistry',
      'SygmabridgeEnabled',
      { assetId: number; domainId: number; resourceId: FixedBytes<32> }
    >

    /**
     * Asset disabled sygmabridge.
     **/
    SygmabridgeDisabled: GenericPalletEvent<
      Rv,
      'AssetsRegistry',
      'SygmabridgeDisabled',
      { assetId: number; domainId: number; resourceId: FixedBytes<32> }
    >

    /**
     * Force mint asset to an certain account.
     **/
    ForceMinted: GenericPalletEvent<
      Rv,
      'AssetsRegistry',
      'ForceMinted',
      { assetId: number; beneficiary: AccountId32; amount: bigint }
    >

    /**
     * Force burn asset from an certain account.
     **/
    ForceBurnt: GenericPalletEvent<
      Rv,
      'AssetsRegistry',
      'ForceBurnt',
      { assetId: number; who: AccountId32; amount: bigint }
    >

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>
  }
  /**
   * Pallet `PhalaRegistry`'s events
   **/
  phalaRegistry: {
    /**
     * A new Gatekeeper is enabled on the blockchain
     **/
    GatekeeperAdded: GenericPalletEvent<Rv, 'PhalaRegistry', 'GatekeeperAdded', { pubkey: SpCoreSr25519Public }>
    GatekeeperRemoved: GenericPalletEvent<Rv, 'PhalaRegistry', 'GatekeeperRemoved', { pubkey: SpCoreSr25519Public }>
    WorkerAdded: GenericPalletEvent<
      Rv,
      'PhalaRegistry',
      'WorkerAdded',
      {
        pubkey: SpCoreSr25519Public
        attestationProvider?: PhalaTypesAttestationProvider | undefined
        confidenceLevel: number
      }
    >
    WorkerUpdated: GenericPalletEvent<
      Rv,
      'PhalaRegistry',
      'WorkerUpdated',
      {
        pubkey: SpCoreSr25519Public
        attestationProvider?: PhalaTypesAttestationProvider | undefined
        confidenceLevel: number
      }
    >
    MasterKeyRotated: GenericPalletEvent<
      Rv,
      'PhalaRegistry',
      'MasterKeyRotated',
      { rotationId: bigint; masterPubkey: SpCoreSr25519Public }
    >
    MasterKeyRotationFailed: GenericPalletEvent<
      Rv,
      'PhalaRegistry',
      'MasterKeyRotationFailed',
      { rotationLock?: bigint | undefined; gatekeeperRotationId: bigint }
    >
    InitialScoreSet: GenericPalletEvent<
      Rv,
      'PhalaRegistry',
      'InitialScoreSet',
      { pubkey: SpCoreSr25519Public; initScore: number }
    >
    MinimumPRuntimeVersionChangedTo: GenericPalletEvent<
      Rv,
      'PhalaRegistry',
      'MinimumPRuntimeVersionChangedTo',
      [number, number, number]
    >
    PRuntimeConsensusVersionChangedTo: GenericPalletEvent<
      Rv,
      'PhalaRegistry',
      'PRuntimeConsensusVersionChangedTo',
      number
    >
    GatekeeperLaunched: GenericPalletEvent<Rv, 'PhalaRegistry', 'GatekeeperLaunched', null>

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>
  }
  /**
   * Pallet `PhalaComputation`'s events
   **/
  phalaComputation: {
    /**
     * Cool down expiration changed (in sec).
     *
     * Indicates a change in [`CoolDownPeriod`].
     **/
    CoolDownExpirationChanged: GenericPalletEvent<
      Rv,
      'PhalaComputation',
      'CoolDownExpirationChanged',
      { period: bigint }
    >

    /**
     * A worker starts computing.
     *
     * Affected states:
     * - the worker info at [`Sessions`] is updated with `WorkerIdle` state
     * - [`NextSessionId`] for the session is incremented
     * - [`Stakes`] for the session is updated
     * - [`OnlineWorkers`] is incremented
     **/
    WorkerStarted: GenericPalletEvent<
      Rv,
      'PhalaComputation',
      'WorkerStarted',
      { session: AccountId32; initV: bigint; initP: number }
    >

    /**
     * Worker stops computing.
     *
     * Affected states:
     * - the worker info at [`Sessions`] is updated with `WorkerCoolingDown` state
     * - [`OnlineWorkers`] is decremented
     **/
    WorkerStopped: GenericPalletEvent<Rv, 'PhalaComputation', 'WorkerStopped', { session: AccountId32 }>

    /**
     * Worker is reclaimed, with its slash settled.
     **/
    WorkerReclaimed: GenericPalletEvent<
      Rv,
      'PhalaComputation',
      'WorkerReclaimed',
      { session: AccountId32; originalStake: bigint; slashed: bigint }
    >

    /**
     * Worker & session are bounded.
     *
     * Affected states:
     * - [`SessionBindings`] for the session account is pointed to the worker
     * - [`WorkerBindings`] for the worker is pointed to the session account
     * - the worker info at [`Sessions`] is updated with `Ready` state
     **/
    SessionBound: GenericPalletEvent<
      Rv,
      'PhalaComputation',
      'SessionBound',
      { session: AccountId32; worker: SpCoreSr25519Public }
    >

    /**
     * Worker & worker are unbound.
     *
     * Affected states:
     * - [`SessionBindings`] for the session account is removed
     * - [`WorkerBindings`] for the worker is removed
     **/
    SessionUnbound: GenericPalletEvent<
      Rv,
      'PhalaComputation',
      'SessionUnbound',
      { session: AccountId32; worker: SpCoreSr25519Public }
    >

    /**
     * Worker enters unresponsive state.
     *
     * Affected states:
     * - the worker info at [`Sessions`] is updated from `WorkerIdle` to `WorkerUnresponsive`
     **/
    WorkerEnterUnresponsive: GenericPalletEvent<
      Rv,
      'PhalaComputation',
      'WorkerEnterUnresponsive',
      { session: AccountId32 }
    >

    /**
     * Worker returns to responsive state.
     *
     * Affected states:
     * - the worker info at [`Sessions`] is updated from `WorkerUnresponsive` to `WorkerIdle`
     **/
    WorkerExitUnresponsive: GenericPalletEvent<
      Rv,
      'PhalaComputation',
      'WorkerExitUnresponsive',
      { session: AccountId32 }
    >

    /**
     * Worker settled successfully.
     *
     * It results in the v in [`Sessions`] being updated. It also indicates the downstream
     * stake pool has received the computing reward (payout), and the treasury has received the
     * tax.
     **/
    SessionSettled: GenericPalletEvent<
      Rv,
      'PhalaComputation',
      'SessionSettled',
      { session: AccountId32; vBits: bigint; payoutBits: bigint }
    >

    /**
     * Some internal error happened when settling a worker's ledger.
     **/
    InternalErrorWorkerSettleFailed: GenericPalletEvent<
      Rv,
      'PhalaComputation',
      'InternalErrorWorkerSettleFailed',
      { worker: SpCoreSr25519Public }
    >

    /**
     * Block subsidy halved by 25%.
     *
     * This event will be followed by a [`TokenomicParametersChanged`](#variant.TokenomicParametersChanged)
     * event indicating the change of the block subsidy budget in the parameter.
     **/
    SubsidyBudgetHalved: GenericPalletEvent<Rv, 'PhalaComputation', 'SubsidyBudgetHalved', null>

    /**
     * Some internal error happened when trying to halve the subsidy
     **/
    InternalErrorWrongHalvingConfigured: GenericPalletEvent<
      Rv,
      'PhalaComputation',
      'InternalErrorWrongHalvingConfigured',
      null
    >

    /**
     * Tokenomic parameter changed.
     *
     * Affected states:
     * - [`TokenomicParameters`] is updated.
     **/
    TokenomicParametersChanged: GenericPalletEvent<Rv, 'PhalaComputation', 'TokenomicParametersChanged', null>

    /**
     * A session settlement was dropped because the on-chain version is more up-to-date.
     *
     * This is a temporary walk-around of the computing staking design. Will be fixed by
     * StakePool v2.
     **/
    SessionSettlementDropped: GenericPalletEvent<
      Rv,
      'PhalaComputation',
      'SessionSettlementDropped',
      { session: AccountId32; v: bigint; payout: bigint }
    >

    /**
     * Benchmark Updated
     **/
    BenchmarkUpdated: GenericPalletEvent<
      Rv,
      'PhalaComputation',
      'BenchmarkUpdated',
      { session: AccountId32; pInstant: number }
    >
    BudgetUpdated: GenericPalletEvent<Rv, 'PhalaComputation', 'BudgetUpdated', { nonce: bigint; budget: bigint }>

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>
  }
  /**
   * Pallet `PhalaStakePool`'s events
   **/
  phalaStakePool: {
    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>
  }
  /**
   * Pallet `PhalaStakePoolv2`'s events
   **/
  phalaStakePoolv2: {
    /**
     * A stake pool is created by `owner`
     *
     * Affected states:
     * - a new entry in [`Pools`] with the pid
     **/
    PoolCreated: GenericPalletEvent<
      Rv,
      'PhalaStakePoolv2',
      'PoolCreated',
      { owner: AccountId32; pid: bigint; cid: number; poolAccountId: AccountId32 }
    >

    /**
     * The commission of a pool is updated
     *
     * The commission ratio is represented by an integer. The real value is
     * `commission / 1_000_000u32`.
     *
     * Affected states:
     * - the `payout_commission` field in [`Pools`] is updated
     **/
    PoolCommissionSet: GenericPalletEvent<
      Rv,
      'PhalaStakePoolv2',
      'PoolCommissionSet',
      { pid: bigint; commission: number }
    >

    /**
     * The stake capacity of the pool is updated
     *
     * Affected states:
     * - the `cap` field in [`Pools`] is updated
     **/
    PoolCapacitySet: GenericPalletEvent<Rv, 'PhalaStakePoolv2', 'PoolCapacitySet', { pid: bigint; cap: bigint }>

    /**
     * A worker is added to the pool
     *
     * Affected states:
     * - the `worker` is added to the vector `workers` in [`Pools`]
     * - the worker in the [`WorkerAssignments`] is pointed to `pid`
     * - the worker-session binding is updated in `computation` pallet ([`WorkerBindings`](computation::pallet::WorkerBindings),
     * [`SessionBindings`](computation::pallet::SessionBindings))
     **/
    PoolWorkerAdded: GenericPalletEvent<
      Rv,
      'PhalaStakePoolv2',
      'PoolWorkerAdded',
      { pid: bigint; worker: SpCoreSr25519Public; session: AccountId32 }
    >

    /**
     * Someone contributed to a pool
     *
     * Affected states:
     * - the stake related fields in [`Pools`]
     * - the user W-PHA balance reduced
     * - the user recive ad share NFT once contribution succeeded
     * - when there was any request in the withdraw queue, the action may trigger withdrawals
     * ([`Withdrawal`](#variant.Withdrawal) event)
     **/
    Contribution: GenericPalletEvent<
      Rv,
      'PhalaStakePoolv2',
      'Contribution',
      { pid: bigint; user: AccountId32; amount: bigint; shares: bigint; asVault?: bigint | undefined }
    >

    /**
     * Owner rewards were withdrawn by pool owner
     *
     * Affected states:
     * - the stake related fields in [`Pools`]
     * - the owner asset account
     **/
    OwnerRewardsWithdrawn: GenericPalletEvent<
      Rv,
      'PhalaStakePoolv2',
      'OwnerRewardsWithdrawn',
      { pid: bigint; user: AccountId32; amount: bigint }
    >

    /**
     * The pool received a slash event from one of its workers (currently disabled)
     *
     * The slash is accured to the pending slash accumulator.
     **/
    PoolSlashed: GenericPalletEvent<Rv, 'PhalaStakePoolv2', 'PoolSlashed', { pid: bigint; amount: bigint }>

    /**
     * Some slash is actually settled to a contributor (currently disabled)
     **/
    SlashSettled: GenericPalletEvent<
      Rv,
      'PhalaStakePoolv2',
      'SlashSettled',
      { pid: bigint; user: AccountId32; amount: bigint }
    >

    /**
     * Some reward is dismissed because the worker is no longer bound to a pool
     *
     * There's no affected state.
     **/
    RewardDismissedNotInPool: GenericPalletEvent<
      Rv,
      'PhalaStakePoolv2',
      'RewardDismissedNotInPool',
      { worker: SpCoreSr25519Public; amount: bigint }
    >

    /**
     * Some reward is dismissed because the pool doesn't have any share
     *
     * There's no affected state.
     **/
    RewardDismissedNoShare: GenericPalletEvent<
      Rv,
      'PhalaStakePoolv2',
      'RewardDismissedNoShare',
      { pid: bigint; amount: bigint }
    >

    /**
     * Some reward is dismissed because the amount is too tiny (dust)
     *
     * There's no affected state.
     **/
    RewardDismissedDust: GenericPalletEvent<
      Rv,
      'PhalaStakePoolv2',
      'RewardDismissedDust',
      { pid: bigint; amount: bigint }
    >

    /**
     * A worker is removed from a pool.
     *
     * Affected states:
     * - the worker item in [`WorkerAssignments`] is removed
     * - the worker is removed from the [`Pools`] item
     **/
    PoolWorkerRemoved: GenericPalletEvent<
      Rv,
      'PhalaStakePoolv2',
      'PoolWorkerRemoved',
      { pid: bigint; worker: SpCoreSr25519Public }
    >

    /**
     * A worker is reclaimed from the pool
     **/
    WorkerReclaimed: GenericPalletEvent<
      Rv,
      'PhalaStakePoolv2',
      'WorkerReclaimed',
      { pid: bigint; worker: SpCoreSr25519Public }
    >

    /**
     * The amount of reward that distributed to owner and stakers
     **/
    RewardReceived: GenericPalletEvent<
      Rv,
      'PhalaStakePoolv2',
      'RewardReceived',
      { pid: bigint; toOwner: bigint; toStakers: bigint }
    >

    /**
     * The amount of stakes for a worker to start computing
     **/
    WorkingStarted: GenericPalletEvent<
      Rv,
      'PhalaStakePoolv2',
      'WorkingStarted',
      { pid: bigint; worker: SpCoreSr25519Public; amount: bigint }
    >

    /**
     * Some to-distribute reward is dismissed because the amount is too tiny (dust)
     *
     * There's no affected state.
     **/
    RewardToOwnerDismissedDust: GenericPalletEvent<
      Rv,
      'PhalaStakePoolv2',
      'RewardToOwnerDismissedDust',
      { pid: bigint; amount: bigint }
    >

    /**
     * Some to-distribute reward is dismissed because the amount is too tiny (dust)
     *
     * There's no affected state.
     **/
    RewardToDistributionDismissedDust: GenericPalletEvent<
      Rv,
      'PhalaStakePoolv2',
      'RewardToDistributionDismissedDust',
      { pid: bigint; amount: bigint }
    >

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>
  }
  /**
   * Pallet `PhalaVault`'s events
   **/
  phalaVault: {
    /**
     * A vault is created by `owner`
     *
     * Affected states:
     * - a new entry in [`Pools`] with the pid
     **/
    PoolCreated: GenericPalletEvent<
      Rv,
      'PhalaVault',
      'PoolCreated',
      { owner: AccountId32; pid: bigint; cid: number; poolAccountId: AccountId32 }
    >

    /**
     * The commission of a vault is updated
     *
     * The commission ratio is represented by an integer. The real value is
     * `commission / 1_000_000u32`.
     *
     * Affected states:
     * - the `commission` field in [`Pools`] is updated
     **/
    VaultCommissionSet: GenericPalletEvent<Rv, 'PhalaVault', 'VaultCommissionSet', { pid: bigint; commission: number }>

    /**
     * Owner shares is claimed by pool owner
     * Affected states:
     * - the shares related fields in [`Pools`]
     * - the nft related storages in rmrk and pallet unique
     **/
    OwnerSharesClaimed: GenericPalletEvent<
      Rv,
      'PhalaVault',
      'OwnerSharesClaimed',
      { pid: bigint; user: AccountId32; shares: bigint }
    >

    /**
     * Additional owner shares are mint into the pool
     *
     * Affected states:
     * - the shares related fields in [`Pools`]
     * - last_share_price_checkpoint in [`Pools`]
     **/
    OwnerSharesGained: GenericPalletEvent<
      Rv,
      'PhalaVault',
      'OwnerSharesGained',
      { pid: bigint; shares: bigint; checkoutPrice: bigint }
    >

    /**
     * Someone contributed to a vault
     *
     * Affected states:
     * - the stake related fields in [`Pools`]
     * - the user W-PHA balance reduced
     * - the user recive ad share NFT once contribution succeeded
     * - when there was any request in the withdraw queue, the action may trigger withdrawals
     * ([`Withdrawal`](#variant.Withdrawal) event)
     **/
    Contribution: GenericPalletEvent<
      Rv,
      'PhalaVault',
      'Contribution',
      { pid: bigint; user: AccountId32; amount: bigint; shares: bigint }
    >
    ForceShutdown: GenericPalletEvent<
      Rv,
      'PhalaVault',
      'ForceShutdown',
      { pid: bigint; reason: PhalaPalletsComputeVaultPalletForceShutdownReason }
    >

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>
  }
  /**
   * Pallet `PhalaWrappedBalances`'s events
   **/
  phalaWrappedBalances: {
    /**
     * Some dust stake is removed
     *
     * Triggered when the remaining stake of a user is too small after withdrawal or slash.
     *
     * Affected states:
     * - the balance of the locking ledger of the contributor at [`StakeLedger`] is set to 0
     * - the user's dust stake is moved to treasury
     **/
    DustRemoved: GenericPalletEvent<Rv, 'PhalaWrappedBalances', 'DustRemoved', { user: AccountId32; amount: bigint }>
    Wrapped: GenericPalletEvent<Rv, 'PhalaWrappedBalances', 'Wrapped', { user: AccountId32; amount: bigint }>
    Unwrapped: GenericPalletEvent<Rv, 'PhalaWrappedBalances', 'Unwrapped', { user: AccountId32; amount: bigint }>
    Voted: GenericPalletEvent<
      Rv,
      'PhalaWrappedBalances',
      'Voted',
      { user: AccountId32; voteId: number; ayeAmount: bigint; nayAmount: bigint }
    >

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>
  }
  /**
   * Pallet `PhalaBasePool`'s events
   **/
  phalaBasePool: {
    /**
     * A Nft is created to contain pool shares
     **/
    NftCreated: GenericPalletEvent<
      Rv,
      'PhalaBasePool',
      'NftCreated',
      { pid: bigint; cid: number; nftId: number; owner: AccountId32; shares: bigint }
    >

    /**
     * A withdrawal request is inserted to a queue
     *
     * Affected states:
     * - a new item is inserted to or an old item is being replaced by the new item in the
     * withdraw queue in [`Pools`]
     **/
    WithdrawalQueued: GenericPalletEvent<
      Rv,
      'PhalaBasePool',
      'WithdrawalQueued',
      {
        pid: bigint
        user: AccountId32
        shares: bigint

        /**
         * Target NFT to withdraw
         **/
        nftId: number
        asVault?: bigint | undefined

        /**
         * Splitted NFT for withdrawing
         **/
        withdrawingNftId: number
      }
    >

    /**
     * Some stake was withdrawn from a pool
     *
     * The lock in [`Balances`](pallet_balances::pallet::Pallet) is updated to release the
     * locked stake.
     *
     * Affected states:
     * - the stake related fields in [`Pools`]
     * - the user staking asset account
     **/
    Withdrawal: GenericPalletEvent<
      Rv,
      'PhalaBasePool',
      'Withdrawal',
      { pid: bigint; user: AccountId32; amount: bigint; shares: bigint; burntShares: bigint }
    >

    /**
     * A pool contribution whitelist is added
     *
     * - lazy operated when the first staker is added to the whitelist
     **/
    PoolWhitelistCreated: GenericPalletEvent<Rv, 'PhalaBasePool', 'PoolWhitelistCreated', { pid: bigint }>

    /**
     * The pool contribution whitelist is deleted
     *
     * - lazy operated when the last staker is removed from the whitelist
     **/
    PoolWhitelistDeleted: GenericPalletEvent<Rv, 'PhalaBasePool', 'PoolWhitelistDeleted', { pid: bigint }>

    /**
     * A staker is added to the pool contribution whitelist
     **/
    PoolWhitelistStakerAdded: GenericPalletEvent<
      Rv,
      'PhalaBasePool',
      'PoolWhitelistStakerAdded',
      { pid: bigint; staker: AccountId32 }
    >

    /**
     * A staker is removed from the pool contribution whitelist
     **/
    PoolWhitelistStakerRemoved: GenericPalletEvent<
      Rv,
      'PhalaBasePool',
      'PoolWhitelistStakerRemoved',
      { pid: bigint; staker: AccountId32 }
    >

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>
  }
  /**
   * Pallet `PhalaPhatContracts`'s events
   **/
  phalaPhatContracts: {
    ClusterCreated: GenericPalletEvent<
      Rv,
      'PhalaPhatContracts',
      'ClusterCreated',
      { cluster: H256; systemContract: H256 }
    >
    ClusterPubkeyAvailable: GenericPalletEvent<
      Rv,
      'PhalaPhatContracts',
      'ClusterPubkeyAvailable',
      { cluster: H256; pubkey: SpCoreSr25519Public }
    >
    ClusterDeployed: GenericPalletEvent<
      Rv,
      'PhalaPhatContracts',
      'ClusterDeployed',
      { cluster: H256; pubkey: SpCoreSr25519Public; worker: SpCoreSr25519Public }
    >
    ClusterDeploymentFailed: GenericPalletEvent<
      Rv,
      'PhalaPhatContracts',
      'ClusterDeploymentFailed',
      { cluster: H256; worker: SpCoreSr25519Public }
    >
    Instantiating: GenericPalletEvent<
      Rv,
      'PhalaPhatContracts',
      'Instantiating',
      { contract: H256; cluster: H256; deployer: AccountId32 }
    >
    ContractPubkeyAvailable: GenericPalletEvent<
      Rv,
      'PhalaPhatContracts',
      'ContractPubkeyAvailable',
      { contract: H256; cluster: H256; pubkey: SpCoreSr25519Public }
    >
    Instantiated: GenericPalletEvent<
      Rv,
      'PhalaPhatContracts',
      'Instantiated',
      { contract: H256; cluster: H256; deployer: H256 }
    >
    ClusterDestroyed: GenericPalletEvent<Rv, 'PhalaPhatContracts', 'ClusterDestroyed', { cluster: H256 }>
    Transfered: GenericPalletEvent<
      Rv,
      'PhalaPhatContracts',
      'Transfered',
      { cluster: H256; account: H256; amount: bigint }
    >
    WorkerAddedToCluster: GenericPalletEvent<
      Rv,
      'PhalaPhatContracts',
      'WorkerAddedToCluster',
      { worker: SpCoreSr25519Public; cluster: H256 }
    >
    WorkerRemovedFromCluster: GenericPalletEvent<
      Rv,
      'PhalaPhatContracts',
      'WorkerRemovedFromCluster',
      { worker: SpCoreSr25519Public; cluster: H256 }
    >

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>
  }
  /**
   * Pallet `PhalaPhatTokenomic`'s events
   **/
  phalaPhatTokenomic: {
    ContractDepositChanged: GenericPalletEvent<
      Rv,
      'PhalaPhatTokenomic',
      'ContractDepositChanged',
      { cluster?: H256 | undefined; contract: H256; deposit: bigint }
    >
    UserStakeChanged: GenericPalletEvent<
      Rv,
      'PhalaPhatTokenomic',
      'UserStakeChanged',
      { cluster?: H256 | undefined; account: AccountId32; contract: H256; stake: bigint }
    >

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>
  }
  /**
   * Pallet `Uniques`'s events
   **/
  uniques: {
    /**
     * A `collection` was created.
     **/
    Created: GenericPalletEvent<
      Rv,
      'Uniques',
      'Created',
      { collection: number; creator: AccountId32; owner: AccountId32 }
    >

    /**
     * A `collection` was force-created.
     **/
    ForceCreated: GenericPalletEvent<Rv, 'Uniques', 'ForceCreated', { collection: number; owner: AccountId32 }>

    /**
     * A `collection` was destroyed.
     **/
    Destroyed: GenericPalletEvent<Rv, 'Uniques', 'Destroyed', { collection: number }>

    /**
     * An `item` was issued.
     **/
    Issued: GenericPalletEvent<Rv, 'Uniques', 'Issued', { collection: number; item: number; owner: AccountId32 }>

    /**
     * An `item` was transferred.
     **/
    Transferred: GenericPalletEvent<
      Rv,
      'Uniques',
      'Transferred',
      { collection: number; item: number; from: AccountId32; to: AccountId32 }
    >

    /**
     * An `item` was destroyed.
     **/
    Burned: GenericPalletEvent<Rv, 'Uniques', 'Burned', { collection: number; item: number; owner: AccountId32 }>

    /**
     * Some `item` was frozen.
     **/
    Frozen: GenericPalletEvent<Rv, 'Uniques', 'Frozen', { collection: number; item: number }>

    /**
     * Some `item` was thawed.
     **/
    Thawed: GenericPalletEvent<Rv, 'Uniques', 'Thawed', { collection: number; item: number }>

    /**
     * Some `collection` was frozen.
     **/
    CollectionFrozen: GenericPalletEvent<Rv, 'Uniques', 'CollectionFrozen', { collection: number }>

    /**
     * Some `collection` was thawed.
     **/
    CollectionThawed: GenericPalletEvent<Rv, 'Uniques', 'CollectionThawed', { collection: number }>

    /**
     * The owner changed.
     **/
    OwnerChanged: GenericPalletEvent<Rv, 'Uniques', 'OwnerChanged', { collection: number; newOwner: AccountId32 }>

    /**
     * The management team changed.
     **/
    TeamChanged: GenericPalletEvent<
      Rv,
      'Uniques',
      'TeamChanged',
      { collection: number; issuer: AccountId32; admin: AccountId32; freezer: AccountId32 }
    >

    /**
     * An `item` of a `collection` has been approved by the `owner` for transfer by
     * a `delegate`.
     **/
    ApprovedTransfer: GenericPalletEvent<
      Rv,
      'Uniques',
      'ApprovedTransfer',
      { collection: number; item: number; owner: AccountId32; delegate: AccountId32 }
    >

    /**
     * An approval for a `delegate` account to transfer the `item` of an item
     * `collection` was cancelled by its `owner`.
     **/
    ApprovalCancelled: GenericPalletEvent<
      Rv,
      'Uniques',
      'ApprovalCancelled',
      { collection: number; item: number; owner: AccountId32; delegate: AccountId32 }
    >

    /**
     * A `collection` has had its attributes changed by the `Force` origin.
     **/
    ItemStatusChanged: GenericPalletEvent<Rv, 'Uniques', 'ItemStatusChanged', { collection: number }>

    /**
     * New metadata has been set for a `collection`.
     **/
    CollectionMetadataSet: GenericPalletEvent<
      Rv,
      'Uniques',
      'CollectionMetadataSet',
      { collection: number; data: Bytes; isFrozen: boolean }
    >

    /**
     * Metadata has been cleared for a `collection`.
     **/
    CollectionMetadataCleared: GenericPalletEvent<Rv, 'Uniques', 'CollectionMetadataCleared', { collection: number }>

    /**
     * New metadata has been set for an item.
     **/
    MetadataSet: GenericPalletEvent<
      Rv,
      'Uniques',
      'MetadataSet',
      { collection: number; item: number; data: Bytes; isFrozen: boolean }
    >

    /**
     * Metadata has been cleared for an item.
     **/
    MetadataCleared: GenericPalletEvent<Rv, 'Uniques', 'MetadataCleared', { collection: number; item: number }>

    /**
     * Metadata has been cleared for an item.
     **/
    Redeposited: GenericPalletEvent<
      Rv,
      'Uniques',
      'Redeposited',
      { collection: number; successfulItems: Array<number> }
    >

    /**
     * New attribute metadata has been set for a `collection` or `item`.
     **/
    AttributeSet: GenericPalletEvent<
      Rv,
      'Uniques',
      'AttributeSet',
      { collection: number; maybeItem?: number | undefined; key: Bytes; value: Bytes }
    >

    /**
     * Attribute metadata has been cleared for a `collection` or `item`.
     **/
    AttributeCleared: GenericPalletEvent<
      Rv,
      'Uniques',
      'AttributeCleared',
      { collection: number; maybeItem?: number | undefined; key: Bytes }
    >

    /**
     * Ownership acceptance has changed for an account.
     **/
    OwnershipAcceptanceChanged: GenericPalletEvent<
      Rv,
      'Uniques',
      'OwnershipAcceptanceChanged',
      { who: AccountId32; maybeCollection?: number | undefined }
    >

    /**
     * Max supply has been set for a collection.
     **/
    CollectionMaxSupplySet: GenericPalletEvent<
      Rv,
      'Uniques',
      'CollectionMaxSupplySet',
      { collection: number; maxSupply: number }
    >

    /**
     * The price was set for the instance.
     **/
    ItemPriceSet: GenericPalletEvent<
      Rv,
      'Uniques',
      'ItemPriceSet',
      { collection: number; item: number; price: bigint; whitelistedBuyer?: AccountId32 | undefined }
    >

    /**
     * The price for the instance was removed.
     **/
    ItemPriceRemoved: GenericPalletEvent<Rv, 'Uniques', 'ItemPriceRemoved', { collection: number; item: number }>

    /**
     * An item was bought.
     **/
    ItemBought: GenericPalletEvent<
      Rv,
      'Uniques',
      'ItemBought',
      { collection: number; item: number; price: bigint; seller: AccountId32; buyer: AccountId32 }
    >

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>
  }
  /**
   * Pallet `RmrkCore`'s events
   **/
  rmrkCore: {
    CollectionCreated: GenericPalletEvent<
      Rv,
      'RmrkCore',
      'CollectionCreated',
      { issuer: AccountId32; collectionId: number }
    >
    NftMinted: GenericPalletEvent<
      Rv,
      'RmrkCore',
      'NftMinted',
      { owner: RmrkTraitsNftAccountIdOrCollectionNftTuple; collectionId: number; nftId: number }
    >
    NftBurned: GenericPalletEvent<
      Rv,
      'RmrkCore',
      'NFTBurned',
      { owner: AccountId32; collectionId: number; nftId: number }
    >
    CollectionDestroyed: GenericPalletEvent<
      Rv,
      'RmrkCore',
      'CollectionDestroyed',
      { issuer: AccountId32; collectionId: number }
    >
    NftSent: GenericPalletEvent<
      Rv,
      'RmrkCore',
      'NFTSent',
      {
        sender: AccountId32
        recipient: RmrkTraitsNftAccountIdOrCollectionNftTuple
        collectionId: number
        nftId: number
        approvalRequired: boolean
      }
    >
    NftAccepted: GenericPalletEvent<
      Rv,
      'RmrkCore',
      'NFTAccepted',
      {
        sender: AccountId32
        recipient: RmrkTraitsNftAccountIdOrCollectionNftTuple
        collectionId: number
        nftId: number
      }
    >
    NftRejected: GenericPalletEvent<
      Rv,
      'RmrkCore',
      'NFTRejected',
      { sender: AccountId32; collectionId: number; nftId: number }
    >
    IssuerChanged: GenericPalletEvent<
      Rv,
      'RmrkCore',
      'IssuerChanged',
      { oldIssuer: AccountId32; newIssuer: AccountId32; collectionId: number }
    >
    PropertySet: GenericPalletEvent<
      Rv,
      'RmrkCore',
      'PropertySet',
      { collectionId: number; maybeNftId?: number | undefined; key: Bytes; value: Bytes }
    >
    PropertyRemoved: GenericPalletEvent<
      Rv,
      'RmrkCore',
      'PropertyRemoved',
      { collectionId: number; maybeNftId?: number | undefined; key: Bytes }
    >
    PropertiesRemoved: GenericPalletEvent<
      Rv,
      'RmrkCore',
      'PropertiesRemoved',
      { collectionId: number; maybeNftId?: number | undefined }
    >
    CollectionLocked: GenericPalletEvent<
      Rv,
      'RmrkCore',
      'CollectionLocked',
      { issuer: AccountId32; collectionId: number }
    >
    ResourceAdded: GenericPalletEvent<
      Rv,
      'RmrkCore',
      'ResourceAdded',
      { nftId: number; resourceId: number; collectionId: number }
    >
    ResourceReplaced: GenericPalletEvent<
      Rv,
      'RmrkCore',
      'ResourceReplaced',
      { nftId: number; resourceId: number; collectionId: number }
    >
    ResourceAccepted: GenericPalletEvent<
      Rv,
      'RmrkCore',
      'ResourceAccepted',
      { nftId: number; resourceId: number; collectionId: number }
    >
    ResourceRemoval: GenericPalletEvent<
      Rv,
      'RmrkCore',
      'ResourceRemoval',
      { nftId: number; resourceId: number; collectionId: number }
    >
    ResourceRemovalAccepted: GenericPalletEvent<
      Rv,
      'RmrkCore',
      'ResourceRemovalAccepted',
      { nftId: number; resourceId: number; collectionId: number }
    >
    PrioritySet: GenericPalletEvent<Rv, 'RmrkCore', 'PrioritySet', { collectionId: number; nftId: number }>

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>
  }
  /**
   * Pallet `RmrkEquip`'s events
   **/
  rmrkEquip: {
    BaseCreated: GenericPalletEvent<Rv, 'RmrkEquip', 'BaseCreated', { issuer: AccountId32; baseId: number }>
    SlotEquipped: GenericPalletEvent<
      Rv,
      'RmrkEquip',
      'SlotEquipped',
      { itemCollection: number; itemNft: number; baseId: number; slotId: number }
    >
    SlotUnequipped: GenericPalletEvent<
      Rv,
      'RmrkEquip',
      'SlotUnequipped',
      { itemCollection: number; itemNft: number; baseId: number; slotId: number }
    >
    EquippablesUpdated: GenericPalletEvent<Rv, 'RmrkEquip', 'EquippablesUpdated', { baseId: number; slotId: number }>
    BaseIssuerChanged: GenericPalletEvent<
      Rv,
      'RmrkEquip',
      'BaseIssuerChanged',
      { oldIssuer: AccountId32; newIssuer: AccountId32; baseId: number }
    >

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>
  }
  /**
   * Pallet `RmrkMarket`'s events
   **/
  rmrkMarket: {
    /**
     * The price for a token was updated
     **/
    TokenPriceUpdated: GenericPalletEvent<
      Rv,
      'RmrkMarket',
      'TokenPriceUpdated',
      { owner: AccountId32; collectionId: number; nftId: number; price?: bigint | undefined }
    >

    /**
     * Token was sold to a new owner
     **/
    TokenSold: GenericPalletEvent<
      Rv,
      'RmrkMarket',
      'TokenSold',
      { owner: AccountId32; buyer: AccountId32; collectionId: number; nftId: number; price: bigint }
    >

    /**
     * Token listed on Marketplace
     **/
    TokenListed: GenericPalletEvent<
      Rv,
      'RmrkMarket',
      'TokenListed',
      { owner: AccountId32; collectionId: number; nftId: number; price: bigint }
    >

    /**
     * Token unlisted on Marketplace
     **/
    TokenUnlisted: GenericPalletEvent<
      Rv,
      'RmrkMarket',
      'TokenUnlisted',
      { owner: AccountId32; collectionId: number; nftId: number }
    >

    /**
     * Offer was placed on a token
     **/
    OfferPlaced: GenericPalletEvent<
      Rv,
      'RmrkMarket',
      'OfferPlaced',
      { offerer: AccountId32; collectionId: number; nftId: number; price: bigint }
    >

    /**
     * Offer was withdrawn
     **/
    OfferWithdrawn: GenericPalletEvent<
      Rv,
      'RmrkMarket',
      'OfferWithdrawn',
      { sender: AccountId32; collectionId: number; nftId: number }
    >

    /**
     * Offer was accepted
     **/
    OfferAccepted: GenericPalletEvent<
      Rv,
      'RmrkMarket',
      'OfferAccepted',
      { owner: AccountId32; buyer: AccountId32; collectionId: number; nftId: number }
    >

    /**
     * Royalty fee paid to royalty owner
     **/
    RoyaltyFeePaid: GenericPalletEvent<
      Rv,
      'RmrkMarket',
      'RoyaltyFeePaid',
      { sender: AccountId32; royaltyOwner: AccountId32; collectionId: number; nftId: number; amount: bigint }
    >

    /**
     * Market fee paid to marketplace owner
     **/
    MarketFeePaid: GenericPalletEvent<
      Rv,
      'RmrkMarket',
      'MarketFeePaid',
      { sender: AccountId32; marketplaceOwner: AccountId32; collectionId: number; nftId: number; amount: bigint }
    >

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>
  }
  /**
   * Pallet `SygmaAccessSegregator`'s events
   **/
  sygmaAccessSegregator: {
    /**
     * Extrinsic access grant to someone
     * args: [pallet_index, extrinsic_name, who]
     **/
    AccessGranted: GenericPalletEvent<
      Rv,
      'SygmaAccessSegregator',
      'AccessGranted',
      { palletIndex: number; extrinsicName: Bytes; who: AccountId32 }
    >

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>
  }
  /**
   * Pallet `SygmaBasicFeeHandler`'s events
   **/
  sygmaBasicFeeHandler: {
    /**
     * Fee set for a specific asset
     * args: [domain, asset, amount]
     **/
    FeeSet: GenericPalletEvent<
      Rv,
      'SygmaBasicFeeHandler',
      'FeeSet',
      { domain: number; asset: StagingXcmV3MultiassetAssetId; amount: bigint }
    >

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>
  }
  /**
   * Pallet `SygmaBridge`'s events
   **/
  sygmaBridge: {
    /**
     * When initial bridge transfer send to dest domain
     * args: [dest_domain_id, resource_id, deposit_nonce, sender, transfer_type,
     * deposit_data, handler_response, ]
     **/
    Deposit: GenericPalletEvent<
      Rv,
      'SygmaBridge',
      'Deposit',
      {
        destDomainId: number
        resourceId: FixedBytes<32>
        depositNonce: bigint
        sender: AccountId32
        transferType: SygmaTraitsTransferType
        depositData: Bytes
        handlerResponse: Bytes
      }
    >

    /**
     * When proposal was executed successfully
     **/
    ProposalExecution: GenericPalletEvent<
      Rv,
      'SygmaBridge',
      'ProposalExecution',
      { originDomainId: number; depositNonce: bigint; dataHash: FixedBytes<32> }
    >

    /**
     * When proposal was faild to execute
     **/
    FailedHandlerExecution: GenericPalletEvent<
      Rv,
      'SygmaBridge',
      'FailedHandlerExecution',
      { error: Bytes; originDomainId: number; depositNonce: bigint }
    >

    /**
     * When user is going to retry a bridge transfer
     * args: [deposit_on_block_height, dest_domain_id, sender]
     **/
    Retry: GenericPalletEvent<
      Rv,
      'SygmaBridge',
      'Retry',
      { depositOnBlockHeight: bigint; destDomainId: number; sender: AccountId32 }
    >

    /**
     * When bridge is paused
     * args: [dest_domain_id]
     **/
    BridgePaused: GenericPalletEvent<Rv, 'SygmaBridge', 'BridgePaused', { destDomainId: number }>

    /**
     * When bridge is unpaused
     * args: [dest_domain_id]
     **/
    BridgeUnpaused: GenericPalletEvent<Rv, 'SygmaBridge', 'BridgeUnpaused', { destDomainId: number }>

    /**
     * When registering a new dest domainID with its corresponding chainID
     **/
    RegisterDestDomain: GenericPalletEvent<
      Rv,
      'SygmaBridge',
      'RegisterDestDomain',
      { sender: AccountId32; domainId: number; chainId: U256 }
    >

    /**
     * When unregistering a dest domainID with its corresponding chainID
     **/
    UnregisterDestDomain: GenericPalletEvent<
      Rv,
      'SygmaBridge',
      'UnregisterDestDomain',
      { sender: AccountId32; domainId: number; chainId: U256 }
    >

    /**
     * When bridge fee is collected
     **/
    FeeCollected: GenericPalletEvent<
      Rv,
      'SygmaBridge',
      'FeeCollected',
      {
        feePayer: AccountId32
        destDomainId: number
        resourceId: FixedBytes<32>
        feeAmount: bigint
        feeAssetId: StagingXcmV3MultiassetAssetId
      }
    >

    /**
     * When all bridges are paused
     **/
    AllBridgePaused: GenericPalletEvent<Rv, 'SygmaBridge', 'AllBridgePaused', { sender: AccountId32 }>

    /**
     * When all bridges are unpaused
     **/
    AllBridgeUnpaused: GenericPalletEvent<Rv, 'SygmaBridge', 'AllBridgeUnpaused', { sender: AccountId32 }>

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>
  }
  /**
   * Pallet `SygmaFeeHandlerRouter`'s events
   **/
  sygmaFeeHandlerRouter: {
    /**
     * When fee handler was set for a specific (domain, asset) pair
     * args: [dest_domain_id, asset_id, handler_type]
     **/
    FeeHandlerSet: GenericPalletEvent<
      Rv,
      'SygmaFeeHandlerRouter',
      'FeeHandlerSet',
      { domain: number; asset: StagingXcmV3MultiassetAssetId; handlerType: SygmaFeeHandlerRouterFeeHandlerType }
    >

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>
  }
  /**
   * Pallet `SygmaWrapper`'s events
   **/
  sygmaWrapper: {
    /**
     * Assets sent to EVM chain.
     **/
    AssetTransfered: GenericPalletEvent<
      Rv,
      'SygmaWrapper',
      'AssetTransfered',
      {
        asset: StagingXcmV3MultiassetMultiAsset
        origin: StagingXcmV3MultilocationMultiLocation
        dest: StagingXcmV3MultilocationMultiLocation
      }
    >

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>
  }
  /**
   * Pallet `SygmaPercentageFeeHandler`'s events
   **/
  sygmaPercentageFeeHandler: {
    /**
     * Fee set rate for a specific asset and domain
     * args: [domain, asset, rate_basis_point, fee_lower_bound, fee_upper_bound]
     **/
    FeeRateSet: GenericPalletEvent<
      Rv,
      'SygmaPercentageFeeHandler',
      'FeeRateSet',
      {
        domain: number
        asset: StagingXcmV3MultiassetAssetId
        rateBasisPoint: number
        feeLowerBound: bigint
        feeUpperBound: bigint
      }
    >

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>
  }
  /**
   * Pallet `PalletIndex`'s events
   **/
  palletIndex: {
    /**
     * Worker is set.
     **/
    WorkerAdd: GenericPalletEvent<Rv, 'PalletIndex', 'WorkerAdd', { worker: AccountId32 }>

    /**
     * Worker is set.
     **/
    WorkerRemove: GenericPalletEvent<Rv, 'PalletIndex', 'WorkerRemove', { worker: AccountId32 }>

    /**
     * New task saved.
     **/
    NewTask: GenericPalletEvent<
      Rv,
      'PalletIndex',
      'NewTask',
      {
        /**
         * Record
         **/
        depositInfo: PalletIndexDepositInfo
      }
    >

    /**
     * Task has been claimed.
     **/
    Claimed: GenericPalletEvent<Rv, 'PalletIndex', 'Claimed', { tasks: Array<FixedBytes<32>>; fee: bigint }>

    /**
     * Generic pallet event
     **/
    [prop: string]: GenericPalletEvent<Rv>
  }
}
