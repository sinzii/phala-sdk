// Generated by dedot cli

import type {
  AccountId32Like,
  BytesLike,
  Data,
  Extrinsic,
  FixedBytes,
  H256,
  MultiAddressLike,
  Permill,
  U256,
} from 'dedot/codecs'
import type {
  GenericChainTx,
  GenericTxCall,
  IRuntimeTxCall,
  ISubmittableExtrinsic,
  ISubmittableExtrinsicLegacy,
  ISubmittableResult,
  RpcV2,
  RpcVersion,
} from 'dedot/types'
import type {
  AssetsRegistryAssetProperties,
  CumulusPrimitivesParachainInherentParachainInherentData,
  FrameSupportPreimagesBounded,
  FrameSystemEventRecord,
  PalletDemocracyConviction,
  PalletDemocracyMetadataOwner,
  PalletDemocracyVoteAccountVote,
  PalletElectionsPhragmenRenouncing,
  PalletIdentityBitFlags,
  PalletIdentityIdentityInfo,
  PalletIdentityJudgement,
  PalletMultisigTimepoint,
  PalletUniquesDestroyWitness,
  PalletVestingVestingInfo,
  PhalaMqSignedMessage,
  PhalaPalletsUtilsAttestationLegacyAttestation,
  PhalaParachainRuntimeOpaqueSessionKeys,
  PhalaParachainRuntimeOriginCaller,
  PhalaParachainRuntimeProxyType,
  PhalaParachainRuntimeRuntimeCallLike,
  PhalaTypesAttestationReport,
  PhalaTypesContractClusterPermission,
  PhalaTypesContractCodeIndex,
  PhalaTypesContractMessagingResourceType,
  PhalaTypesMessagingTokenomicParameters,
  PhalaTypesWorkerEndpointPayload,
  PhalaTypesWorkerRegistrationInfo,
  PhalaTypesWorkerRegistrationInfoV2,
  RmrkTraitsNftAccountIdOrCollectionNftTuple,
  RmrkTraitsPartEquippableList,
  RmrkTraitsPartPartType,
  RmrkTraitsResourceBasicResource,
  RmrkTraitsResourceComposableResource,
  RmrkTraitsResourceResourceInfoMin,
  RmrkTraitsResourceResourceTypes,
  RmrkTraitsResourceSlotResource,
  RmrkTraitsTheme,
  SpCoreSr25519Public,
  SpRuntimeMultiSignature,
  SpWeightsWeightV2Weight,
  StagingXcmV3MultiassetAssetId,
  StagingXcmV3MultiassetMultiAsset,
  StagingXcmV3MultilocationMultiLocation,
  StagingXcmV3WeightLimit,
  StagingXcmVersionedMultiAssets,
  StagingXcmVersionedMultiLocation,
  StagingXcmVersionedXcm,
  SygmaBridgeProposal,
  SygmaFeeHandlerRouterFeeHandlerType,
  SygmaTraitsMpcAddress,
} from './types'

export type ChainSubmittableExtrinsic<
  Rv extends RpcVersion,
  T extends IRuntimeTxCall = PhalaParachainRuntimeRuntimeCallLike,
> = Extrinsic<MultiAddressLike, T, SpRuntimeMultiSignature, any[]> &
  (Rv extends RpcV2
    ? ISubmittableExtrinsic<ISubmittableResult<FrameSystemEventRecord>>
    : ISubmittableExtrinsicLegacy<ISubmittableResult<FrameSystemEventRecord>>)


export type TxCall<Rv extends RpcVersion> = (...args: any[]) => ChainSubmittableExtrinsic<Rv>

export interface ChainTx<Rv extends RpcVersion> extends GenericChainTx<Rv, TxCall<Rv>> {
  /**
   * Pallet `System`'s transaction calls
   **/
  system: {
    /**
     * See [`Pallet::remark`].
     *
     * @param {BytesLike} remark
     **/
    remark: GenericTxCall<
      Rv,
      (remark: BytesLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'System'
          palletCall: {
            name: 'Remark'
            params: { remark: BytesLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::set_heap_pages`].
     *
     * @param {bigint} pages
     **/
    setHeapPages: GenericTxCall<
      Rv,
      (pages: bigint) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'System'
          palletCall: {
            name: 'SetHeapPages'
            params: { pages: bigint }
          }
        }
      >
    >

    /**
     * See [`Pallet::set_code`].
     *
     * @param {BytesLike} code
     **/
    setCode: GenericTxCall<
      Rv,
      (code: BytesLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'System'
          palletCall: {
            name: 'SetCode'
            params: { code: BytesLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::set_code_without_checks`].
     *
     * @param {BytesLike} code
     **/
    setCodeWithoutChecks: GenericTxCall<
      Rv,
      (code: BytesLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'System'
          palletCall: {
            name: 'SetCodeWithoutChecks'
            params: { code: BytesLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::set_storage`].
     *
     * @param {Array<[BytesLike, BytesLike]>} items
     **/
    setStorage: GenericTxCall<
      Rv,
      (items: Array<[BytesLike, BytesLike]>) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'System'
          palletCall: {
            name: 'SetStorage'
            params: { items: Array<[BytesLike, BytesLike]> }
          }
        }
      >
    >

    /**
     * See [`Pallet::kill_storage`].
     *
     * @param {Array<BytesLike>} keys
     **/
    killStorage: GenericTxCall<
      Rv,
      (keys: Array<BytesLike>) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'System'
          palletCall: {
            name: 'KillStorage'
            params: { keys: Array<BytesLike> }
          }
        }
      >
    >

    /**
     * See [`Pallet::kill_prefix`].
     *
     * @param {BytesLike} prefix
     * @param {number} subkeys
     **/
    killPrefix: GenericTxCall<
      Rv,
      (
        prefix: BytesLike,
        subkeys: number
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'System'
          palletCall: {
            name: 'KillPrefix'
            params: { prefix: BytesLike; subkeys: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::remark_with_event`].
     *
     * @param {BytesLike} remark
     **/
    remarkWithEvent: GenericTxCall<
      Rv,
      (remark: BytesLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'System'
          palletCall: {
            name: 'RemarkWithEvent'
            params: { remark: BytesLike }
          }
        }
      >
    >

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>
  }
  /**
   * Pallet `Timestamp`'s transaction calls
   **/
  timestamp: {
    /**
     * See [`Pallet::set`].
     *
     * @param {bigint} now
     **/
    set: GenericTxCall<
      Rv,
      (now: bigint) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Timestamp'
          palletCall: {
            name: 'Set'
            params: { now: bigint }
          }
        }
      >
    >

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>
  }
  /**
   * Pallet `Utility`'s transaction calls
   **/
  utility: {
    /**
     * See [`Pallet::batch`].
     *
     * @param {Array<PhalaParachainRuntimeRuntimeCallLike>} calls
     **/
    batch: GenericTxCall<
      Rv,
      (calls: Array<PhalaParachainRuntimeRuntimeCallLike>) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Utility'
          palletCall: {
            name: 'Batch'
            params: { calls: Array<PhalaParachainRuntimeRuntimeCallLike> }
          }
        }
      >
    >

    /**
     * See [`Pallet::as_derivative`].
     *
     * @param {number} index
     * @param {PhalaParachainRuntimeRuntimeCallLike} call
     **/
    asDerivative: GenericTxCall<
      Rv,
      (
        index: number,
        call: PhalaParachainRuntimeRuntimeCallLike
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Utility'
          palletCall: {
            name: 'AsDerivative'
            params: { index: number; call: PhalaParachainRuntimeRuntimeCallLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::batch_all`].
     *
     * @param {Array<PhalaParachainRuntimeRuntimeCallLike>} calls
     **/
    batchAll: GenericTxCall<
      Rv,
      (calls: Array<PhalaParachainRuntimeRuntimeCallLike>) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Utility'
          palletCall: {
            name: 'BatchAll'
            params: { calls: Array<PhalaParachainRuntimeRuntimeCallLike> }
          }
        }
      >
    >

    /**
     * See [`Pallet::dispatch_as`].
     *
     * @param {PhalaParachainRuntimeOriginCaller} asOrigin
     * @param {PhalaParachainRuntimeRuntimeCallLike} call
     **/
    dispatchAs: GenericTxCall<
      Rv,
      (
        asOrigin: PhalaParachainRuntimeOriginCaller,
        call: PhalaParachainRuntimeRuntimeCallLike
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Utility'
          palletCall: {
            name: 'DispatchAs'
            params: { asOrigin: PhalaParachainRuntimeOriginCaller; call: PhalaParachainRuntimeRuntimeCallLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::force_batch`].
     *
     * @param {Array<PhalaParachainRuntimeRuntimeCallLike>} calls
     **/
    forceBatch: GenericTxCall<
      Rv,
      (calls: Array<PhalaParachainRuntimeRuntimeCallLike>) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Utility'
          palletCall: {
            name: 'ForceBatch'
            params: { calls: Array<PhalaParachainRuntimeRuntimeCallLike> }
          }
        }
      >
    >

    /**
     * See [`Pallet::with_weight`].
     *
     * @param {PhalaParachainRuntimeRuntimeCallLike} call
     * @param {SpWeightsWeightV2Weight} weight
     **/
    withWeight: GenericTxCall<
      Rv,
      (
        call: PhalaParachainRuntimeRuntimeCallLike,
        weight: SpWeightsWeightV2Weight
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Utility'
          palletCall: {
            name: 'WithWeight'
            params: { call: PhalaParachainRuntimeRuntimeCallLike; weight: SpWeightsWeightV2Weight }
          }
        }
      >
    >

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>
  }
  /**
   * Pallet `Multisig`'s transaction calls
   **/
  multisig: {
    /**
     * See [`Pallet::as_multi_threshold_1`].
     *
     * @param {Array<AccountId32Like>} otherSignatories
     * @param {PhalaParachainRuntimeRuntimeCallLike} call
     **/
    asMultiThreshold1: GenericTxCall<
      Rv,
      (
        otherSignatories: Array<AccountId32Like>,
        call: PhalaParachainRuntimeRuntimeCallLike
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Multisig'
          palletCall: {
            name: 'AsMultiThreshold1'
            params: { otherSignatories: Array<AccountId32Like>; call: PhalaParachainRuntimeRuntimeCallLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::as_multi`].
     *
     * @param {number} threshold
     * @param {Array<AccountId32Like>} otherSignatories
     * @param {PalletMultisigTimepoint | undefined} maybeTimepoint
     * @param {PhalaParachainRuntimeRuntimeCallLike} call
     * @param {SpWeightsWeightV2Weight} maxWeight
     **/
    asMulti: GenericTxCall<
      Rv,
      (
        threshold: number,
        otherSignatories: Array<AccountId32Like>,
        maybeTimepoint: PalletMultisigTimepoint | undefined,
        call: PhalaParachainRuntimeRuntimeCallLike,
        maxWeight: SpWeightsWeightV2Weight
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Multisig'
          palletCall: {
            name: 'AsMulti'
            params: {
              threshold: number
              otherSignatories: Array<AccountId32Like>
              maybeTimepoint: PalletMultisigTimepoint | undefined
              call: PhalaParachainRuntimeRuntimeCallLike
              maxWeight: SpWeightsWeightV2Weight
            }
          }
        }
      >
    >

    /**
     * See [`Pallet::approve_as_multi`].
     *
     * @param {number} threshold
     * @param {Array<AccountId32Like>} otherSignatories
     * @param {PalletMultisigTimepoint | undefined} maybeTimepoint
     * @param {FixedBytes<32>} callHash
     * @param {SpWeightsWeightV2Weight} maxWeight
     **/
    approveAsMulti: GenericTxCall<
      Rv,
      (
        threshold: number,
        otherSignatories: Array<AccountId32Like>,
        maybeTimepoint: PalletMultisigTimepoint | undefined,
        callHash: FixedBytes<32>,
        maxWeight: SpWeightsWeightV2Weight
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Multisig'
          palletCall: {
            name: 'ApproveAsMulti'
            params: {
              threshold: number
              otherSignatories: Array<AccountId32Like>
              maybeTimepoint: PalletMultisigTimepoint | undefined
              callHash: FixedBytes<32>
              maxWeight: SpWeightsWeightV2Weight
            }
          }
        }
      >
    >

    /**
     * See [`Pallet::cancel_as_multi`].
     *
     * @param {number} threshold
     * @param {Array<AccountId32Like>} otherSignatories
     * @param {PalletMultisigTimepoint} timepoint
     * @param {FixedBytes<32>} callHash
     **/
    cancelAsMulti: GenericTxCall<
      Rv,
      (
        threshold: number,
        otherSignatories: Array<AccountId32Like>,
        timepoint: PalletMultisigTimepoint,
        callHash: FixedBytes<32>
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Multisig'
          palletCall: {
            name: 'CancelAsMulti'
            params: {
              threshold: number
              otherSignatories: Array<AccountId32Like>
              timepoint: PalletMultisigTimepoint
              callHash: FixedBytes<32>
            }
          }
        }
      >
    >

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>
  }
  /**
   * Pallet `Proxy`'s transaction calls
   **/
  proxy: {
    /**
     * See [`Pallet::proxy`].
     *
     * @param {MultiAddressLike} real
     * @param {PhalaParachainRuntimeProxyType | undefined} forceProxyType
     * @param {PhalaParachainRuntimeRuntimeCallLike} call
     **/
    proxy: GenericTxCall<
      Rv,
      (
        real: MultiAddressLike,
        forceProxyType: PhalaParachainRuntimeProxyType | undefined,
        call: PhalaParachainRuntimeRuntimeCallLike
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Proxy'
          palletCall: {
            name: 'Proxy'
            params: {
              real: MultiAddressLike
              forceProxyType: PhalaParachainRuntimeProxyType | undefined
              call: PhalaParachainRuntimeRuntimeCallLike
            }
          }
        }
      >
    >

    /**
     * See [`Pallet::add_proxy`].
     *
     * @param {MultiAddressLike} delegate
     * @param {PhalaParachainRuntimeProxyType} proxyType
     * @param {number} delay
     **/
    addProxy: GenericTxCall<
      Rv,
      (
        delegate: MultiAddressLike,
        proxyType: PhalaParachainRuntimeProxyType,
        delay: number
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Proxy'
          palletCall: {
            name: 'AddProxy'
            params: { delegate: MultiAddressLike; proxyType: PhalaParachainRuntimeProxyType; delay: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::remove_proxy`].
     *
     * @param {MultiAddressLike} delegate
     * @param {PhalaParachainRuntimeProxyType} proxyType
     * @param {number} delay
     **/
    removeProxy: GenericTxCall<
      Rv,
      (
        delegate: MultiAddressLike,
        proxyType: PhalaParachainRuntimeProxyType,
        delay: number
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Proxy'
          palletCall: {
            name: 'RemoveProxy'
            params: { delegate: MultiAddressLike; proxyType: PhalaParachainRuntimeProxyType; delay: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::remove_proxies`].
     *
     **/
    removeProxies: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Proxy'
          palletCall: {
            name: 'RemoveProxies'
          }
        }
      >
    >

    /**
     * See [`Pallet::create_pure`].
     *
     * @param {PhalaParachainRuntimeProxyType} proxyType
     * @param {number} delay
     * @param {number} index
     **/
    createPure: GenericTxCall<
      Rv,
      (
        proxyType: PhalaParachainRuntimeProxyType,
        delay: number,
        index: number
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Proxy'
          palletCall: {
            name: 'CreatePure'
            params: { proxyType: PhalaParachainRuntimeProxyType; delay: number; index: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::kill_pure`].
     *
     * @param {MultiAddressLike} spawner
     * @param {PhalaParachainRuntimeProxyType} proxyType
     * @param {number} index
     * @param {number} height
     * @param {number} extIndex
     **/
    killPure: GenericTxCall<
      Rv,
      (
        spawner: MultiAddressLike,
        proxyType: PhalaParachainRuntimeProxyType,
        index: number,
        height: number,
        extIndex: number
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Proxy'
          palletCall: {
            name: 'KillPure'
            params: {
              spawner: MultiAddressLike
              proxyType: PhalaParachainRuntimeProxyType
              index: number
              height: number
              extIndex: number
            }
          }
        }
      >
    >

    /**
     * See [`Pallet::announce`].
     *
     * @param {MultiAddressLike} real
     * @param {H256} callHash
     **/
    announce: GenericTxCall<
      Rv,
      (
        real: MultiAddressLike,
        callHash: H256
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Proxy'
          palletCall: {
            name: 'Announce'
            params: { real: MultiAddressLike; callHash: H256 }
          }
        }
      >
    >

    /**
     * See [`Pallet::remove_announcement`].
     *
     * @param {MultiAddressLike} real
     * @param {H256} callHash
     **/
    removeAnnouncement: GenericTxCall<
      Rv,
      (
        real: MultiAddressLike,
        callHash: H256
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Proxy'
          palletCall: {
            name: 'RemoveAnnouncement'
            params: { real: MultiAddressLike; callHash: H256 }
          }
        }
      >
    >

    /**
     * See [`Pallet::reject_announcement`].
     *
     * @param {MultiAddressLike} delegate
     * @param {H256} callHash
     **/
    rejectAnnouncement: GenericTxCall<
      Rv,
      (
        delegate: MultiAddressLike,
        callHash: H256
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Proxy'
          palletCall: {
            name: 'RejectAnnouncement'
            params: { delegate: MultiAddressLike; callHash: H256 }
          }
        }
      >
    >

    /**
     * See [`Pallet::proxy_announced`].
     *
     * @param {MultiAddressLike} delegate
     * @param {MultiAddressLike} real
     * @param {PhalaParachainRuntimeProxyType | undefined} forceProxyType
     * @param {PhalaParachainRuntimeRuntimeCallLike} call
     **/
    proxyAnnounced: GenericTxCall<
      Rv,
      (
        delegate: MultiAddressLike,
        real: MultiAddressLike,
        forceProxyType: PhalaParachainRuntimeProxyType | undefined,
        call: PhalaParachainRuntimeRuntimeCallLike
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Proxy'
          palletCall: {
            name: 'ProxyAnnounced'
            params: {
              delegate: MultiAddressLike
              real: MultiAddressLike
              forceProxyType: PhalaParachainRuntimeProxyType | undefined
              call: PhalaParachainRuntimeRuntimeCallLike
            }
          }
        }
      >
    >

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>
  }
  /**
   * Pallet `Vesting`'s transaction calls
   **/
  vesting: {
    /**
     * See [`Pallet::vest`].
     *
     **/
    vest: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Vesting'
          palletCall: {
            name: 'Vest'
          }
        }
      >
    >

    /**
     * See [`Pallet::vest_other`].
     *
     * @param {MultiAddressLike} target
     **/
    vestOther: GenericTxCall<
      Rv,
      (target: MultiAddressLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Vesting'
          palletCall: {
            name: 'VestOther'
            params: { target: MultiAddressLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::vested_transfer`].
     *
     * @param {MultiAddressLike} target
     * @param {PalletVestingVestingInfo} schedule
     **/
    vestedTransfer: GenericTxCall<
      Rv,
      (
        target: MultiAddressLike,
        schedule: PalletVestingVestingInfo
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Vesting'
          palletCall: {
            name: 'VestedTransfer'
            params: { target: MultiAddressLike; schedule: PalletVestingVestingInfo }
          }
        }
      >
    >

    /**
     * See [`Pallet::force_vested_transfer`].
     *
     * @param {MultiAddressLike} source
     * @param {MultiAddressLike} target
     * @param {PalletVestingVestingInfo} schedule
     **/
    forceVestedTransfer: GenericTxCall<
      Rv,
      (
        source: MultiAddressLike,
        target: MultiAddressLike,
        schedule: PalletVestingVestingInfo
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Vesting'
          palletCall: {
            name: 'ForceVestedTransfer'
            params: { source: MultiAddressLike; target: MultiAddressLike; schedule: PalletVestingVestingInfo }
          }
        }
      >
    >

    /**
     * See [`Pallet::merge_schedules`].
     *
     * @param {number} schedule1Index
     * @param {number} schedule2Index
     **/
    mergeSchedules: GenericTxCall<
      Rv,
      (
        schedule1Index: number,
        schedule2Index: number
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Vesting'
          palletCall: {
            name: 'MergeSchedules'
            params: { schedule1Index: number; schedule2Index: number }
          }
        }
      >
    >

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>
  }
  /**
   * Pallet `Scheduler`'s transaction calls
   **/
  scheduler: {
    /**
     * See [`Pallet::schedule`].
     *
     * @param {number} when
     * @param {[number, number] | undefined} maybePeriodic
     * @param {number} priority
     * @param {PhalaParachainRuntimeRuntimeCallLike} call
     **/
    schedule: GenericTxCall<
      Rv,
      (
        when: number,
        maybePeriodic: [number, number] | undefined,
        priority: number,
        call: PhalaParachainRuntimeRuntimeCallLike
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Scheduler'
          palletCall: {
            name: 'Schedule'
            params: {
              when: number
              maybePeriodic: [number, number] | undefined
              priority: number
              call: PhalaParachainRuntimeRuntimeCallLike
            }
          }
        }
      >
    >

    /**
     * See [`Pallet::cancel`].
     *
     * @param {number} when
     * @param {number} index
     **/
    cancel: GenericTxCall<
      Rv,
      (
        when: number,
        index: number
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Scheduler'
          palletCall: {
            name: 'Cancel'
            params: { when: number; index: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::schedule_named`].
     *
     * @param {FixedBytes<32>} id
     * @param {number} when
     * @param {[number, number] | undefined} maybePeriodic
     * @param {number} priority
     * @param {PhalaParachainRuntimeRuntimeCallLike} call
     **/
    scheduleNamed: GenericTxCall<
      Rv,
      (
        id: FixedBytes<32>,
        when: number,
        maybePeriodic: [number, number] | undefined,
        priority: number,
        call: PhalaParachainRuntimeRuntimeCallLike
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Scheduler'
          palletCall: {
            name: 'ScheduleNamed'
            params: {
              id: FixedBytes<32>
              when: number
              maybePeriodic: [number, number] | undefined
              priority: number
              call: PhalaParachainRuntimeRuntimeCallLike
            }
          }
        }
      >
    >

    /**
     * See [`Pallet::cancel_named`].
     *
     * @param {FixedBytes<32>} id
     **/
    cancelNamed: GenericTxCall<
      Rv,
      (id: FixedBytes<32>) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Scheduler'
          palletCall: {
            name: 'CancelNamed'
            params: { id: FixedBytes<32> }
          }
        }
      >
    >

    /**
     * See [`Pallet::schedule_after`].
     *
     * @param {number} after
     * @param {[number, number] | undefined} maybePeriodic
     * @param {number} priority
     * @param {PhalaParachainRuntimeRuntimeCallLike} call
     **/
    scheduleAfter: GenericTxCall<
      Rv,
      (
        after: number,
        maybePeriodic: [number, number] | undefined,
        priority: number,
        call: PhalaParachainRuntimeRuntimeCallLike
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Scheduler'
          palletCall: {
            name: 'ScheduleAfter'
            params: {
              after: number
              maybePeriodic: [number, number] | undefined
              priority: number
              call: PhalaParachainRuntimeRuntimeCallLike
            }
          }
        }
      >
    >

    /**
     * See [`Pallet::schedule_named_after`].
     *
     * @param {FixedBytes<32>} id
     * @param {number} after
     * @param {[number, number] | undefined} maybePeriodic
     * @param {number} priority
     * @param {PhalaParachainRuntimeRuntimeCallLike} call
     **/
    scheduleNamedAfter: GenericTxCall<
      Rv,
      (
        id: FixedBytes<32>,
        after: number,
        maybePeriodic: [number, number] | undefined,
        priority: number,
        call: PhalaParachainRuntimeRuntimeCallLike
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Scheduler'
          palletCall: {
            name: 'ScheduleNamedAfter'
            params: {
              id: FixedBytes<32>
              after: number
              maybePeriodic: [number, number] | undefined
              priority: number
              call: PhalaParachainRuntimeRuntimeCallLike
            }
          }
        }
      >
    >

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>
  }
  /**
   * Pallet `Preimage`'s transaction calls
   **/
  preimage: {
    /**
     * See [`Pallet::note_preimage`].
     *
     * @param {BytesLike} bytes
     **/
    notePreimage: GenericTxCall<
      Rv,
      (bytes: BytesLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Preimage'
          palletCall: {
            name: 'NotePreimage'
            params: { bytes: BytesLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::unnote_preimage`].
     *
     * @param {H256} hash
     **/
    unnotePreimage: GenericTxCall<
      Rv,
      (hash: H256) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Preimage'
          palletCall: {
            name: 'UnnotePreimage'
            params: { hash: H256 }
          }
        }
      >
    >

    /**
     * See [`Pallet::request_preimage`].
     *
     * @param {H256} hash
     **/
    requestPreimage: GenericTxCall<
      Rv,
      (hash: H256) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Preimage'
          palletCall: {
            name: 'RequestPreimage'
            params: { hash: H256 }
          }
        }
      >
    >

    /**
     * See [`Pallet::unrequest_preimage`].
     *
     * @param {H256} hash
     **/
    unrequestPreimage: GenericTxCall<
      Rv,
      (hash: H256) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Preimage'
          palletCall: {
            name: 'UnrequestPreimage'
            params: { hash: H256 }
          }
        }
      >
    >

    /**
     * See [`Pallet::ensure_updated`].
     *
     * @param {Array<H256>} hashes
     **/
    ensureUpdated: GenericTxCall<
      Rv,
      (hashes: Array<H256>) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Preimage'
          palletCall: {
            name: 'EnsureUpdated'
            params: { hashes: Array<H256> }
          }
        }
      >
    >

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>
  }
  /**
   * Pallet `ParachainSystem`'s transaction calls
   **/
  parachainSystem: {
    /**
     * See [`Pallet::set_validation_data`].
     *
     * @param {CumulusPrimitivesParachainInherentParachainInherentData} data
     **/
    setValidationData: GenericTxCall<
      Rv,
      (data: CumulusPrimitivesParachainInherentParachainInherentData) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ParachainSystem'
          palletCall: {
            name: 'SetValidationData'
            params: { data: CumulusPrimitivesParachainInherentParachainInherentData }
          }
        }
      >
    >

    /**
     * See [`Pallet::sudo_send_upward_message`].
     *
     * @param {BytesLike} message
     **/
    sudoSendUpwardMessage: GenericTxCall<
      Rv,
      (message: BytesLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ParachainSystem'
          palletCall: {
            name: 'SudoSendUpwardMessage'
            params: { message: BytesLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::authorize_upgrade`].
     *
     * @param {H256} codeHash
     * @param {boolean} checkVersion
     **/
    authorizeUpgrade: GenericTxCall<
      Rv,
      (
        codeHash: H256,
        checkVersion: boolean
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ParachainSystem'
          palletCall: {
            name: 'AuthorizeUpgrade'
            params: { codeHash: H256; checkVersion: boolean }
          }
        }
      >
    >

    /**
     * See [`Pallet::enact_authorized_upgrade`].
     *
     * @param {BytesLike} code
     **/
    enactAuthorizedUpgrade: GenericTxCall<
      Rv,
      (code: BytesLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ParachainSystem'
          palletCall: {
            name: 'EnactAuthorizedUpgrade'
            params: { code: BytesLike }
          }
        }
      >
    >

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>
  }
  /**
   * Pallet `XcmpQueue`'s transaction calls
   **/
  xcmpQueue: {
    /**
     * See [`Pallet::service_overweight`].
     *
     * @param {bigint} index
     * @param {SpWeightsWeightV2Weight} weightLimit
     **/
    serviceOverweight: GenericTxCall<
      Rv,
      (
        index: bigint,
        weightLimit: SpWeightsWeightV2Weight
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'XcmpQueue'
          palletCall: {
            name: 'ServiceOverweight'
            params: { index: bigint; weightLimit: SpWeightsWeightV2Weight }
          }
        }
      >
    >

    /**
     * See [`Pallet::suspend_xcm_execution`].
     *
     **/
    suspendXcmExecution: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'XcmpQueue'
          palletCall: {
            name: 'SuspendXcmExecution'
          }
        }
      >
    >

    /**
     * See [`Pallet::resume_xcm_execution`].
     *
     **/
    resumeXcmExecution: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'XcmpQueue'
          palletCall: {
            name: 'ResumeXcmExecution'
          }
        }
      >
    >

    /**
     * See [`Pallet::update_suspend_threshold`].
     *
     * @param {number} new_
     **/
    updateSuspendThreshold: GenericTxCall<
      Rv,
      (new_: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'XcmpQueue'
          palletCall: {
            name: 'UpdateSuspendThreshold'
            params: { new: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::update_drop_threshold`].
     *
     * @param {number} new_
     **/
    updateDropThreshold: GenericTxCall<
      Rv,
      (new_: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'XcmpQueue'
          palletCall: {
            name: 'UpdateDropThreshold'
            params: { new: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::update_resume_threshold`].
     *
     * @param {number} new_
     **/
    updateResumeThreshold: GenericTxCall<
      Rv,
      (new_: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'XcmpQueue'
          palletCall: {
            name: 'UpdateResumeThreshold'
            params: { new: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::update_threshold_weight`].
     *
     * @param {SpWeightsWeightV2Weight} new_
     **/
    updateThresholdWeight: GenericTxCall<
      Rv,
      (new_: SpWeightsWeightV2Weight) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'XcmpQueue'
          palletCall: {
            name: 'UpdateThresholdWeight'
            params: { new: SpWeightsWeightV2Weight }
          }
        }
      >
    >

    /**
     * See [`Pallet::update_weight_restrict_decay`].
     *
     * @param {SpWeightsWeightV2Weight} new_
     **/
    updateWeightRestrictDecay: GenericTxCall<
      Rv,
      (new_: SpWeightsWeightV2Weight) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'XcmpQueue'
          palletCall: {
            name: 'UpdateWeightRestrictDecay'
            params: { new: SpWeightsWeightV2Weight }
          }
        }
      >
    >

    /**
     * See [`Pallet::update_xcmp_max_individual_weight`].
     *
     * @param {SpWeightsWeightV2Weight} new_
     **/
    updateXcmpMaxIndividualWeight: GenericTxCall<
      Rv,
      (new_: SpWeightsWeightV2Weight) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'XcmpQueue'
          palletCall: {
            name: 'UpdateXcmpMaxIndividualWeight'
            params: { new: SpWeightsWeightV2Weight }
          }
        }
      >
    >

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>
  }
  /**
   * Pallet `DmpQueue`'s transaction calls
   **/
  dmpQueue: {
    /**
     * See [`Pallet::service_overweight`].
     *
     * @param {bigint} index
     * @param {SpWeightsWeightV2Weight} weightLimit
     **/
    serviceOverweight: GenericTxCall<
      Rv,
      (
        index: bigint,
        weightLimit: SpWeightsWeightV2Weight
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'DmpQueue'
          palletCall: {
            name: 'ServiceOverweight'
            params: { index: bigint; weightLimit: SpWeightsWeightV2Weight }
          }
        }
      >
    >

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>
  }
  /**
   * Pallet `PolkadotXcm`'s transaction calls
   **/
  polkadotXcm: {
    /**
     * See [`Pallet::send`].
     *
     * @param {StagingXcmVersionedMultiLocation} dest
     * @param {StagingXcmVersionedXcm} message
     **/
    send: GenericTxCall<
      Rv,
      (
        dest: StagingXcmVersionedMultiLocation,
        message: StagingXcmVersionedXcm
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PolkadotXcm'
          palletCall: {
            name: 'Send'
            params: { dest: StagingXcmVersionedMultiLocation; message: StagingXcmVersionedXcm }
          }
        }
      >
    >

    /**
     * See [`Pallet::teleport_assets`].
     *
     * @param {StagingXcmVersionedMultiLocation} dest
     * @param {StagingXcmVersionedMultiLocation} beneficiary
     * @param {StagingXcmVersionedMultiAssets} assets
     * @param {number} feeAssetItem
     **/
    teleportAssets: GenericTxCall<
      Rv,
      (
        dest: StagingXcmVersionedMultiLocation,
        beneficiary: StagingXcmVersionedMultiLocation,
        assets: StagingXcmVersionedMultiAssets,
        feeAssetItem: number
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PolkadotXcm'
          palletCall: {
            name: 'TeleportAssets'
            params: {
              dest: StagingXcmVersionedMultiLocation
              beneficiary: StagingXcmVersionedMultiLocation
              assets: StagingXcmVersionedMultiAssets
              feeAssetItem: number
            }
          }
        }
      >
    >

    /**
     * See [`Pallet::reserve_transfer_assets`].
     *
     * @param {StagingXcmVersionedMultiLocation} dest
     * @param {StagingXcmVersionedMultiLocation} beneficiary
     * @param {StagingXcmVersionedMultiAssets} assets
     * @param {number} feeAssetItem
     **/
    reserveTransferAssets: GenericTxCall<
      Rv,
      (
        dest: StagingXcmVersionedMultiLocation,
        beneficiary: StagingXcmVersionedMultiLocation,
        assets: StagingXcmVersionedMultiAssets,
        feeAssetItem: number
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PolkadotXcm'
          palletCall: {
            name: 'ReserveTransferAssets'
            params: {
              dest: StagingXcmVersionedMultiLocation
              beneficiary: StagingXcmVersionedMultiLocation
              assets: StagingXcmVersionedMultiAssets
              feeAssetItem: number
            }
          }
        }
      >
    >

    /**
     * See [`Pallet::execute`].
     *
     * @param {StagingXcmVersionedXcm} message
     * @param {SpWeightsWeightV2Weight} maxWeight
     **/
    execute: GenericTxCall<
      Rv,
      (
        message: StagingXcmVersionedXcm,
        maxWeight: SpWeightsWeightV2Weight
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PolkadotXcm'
          palletCall: {
            name: 'Execute'
            params: { message: StagingXcmVersionedXcm; maxWeight: SpWeightsWeightV2Weight }
          }
        }
      >
    >

    /**
     * See [`Pallet::force_xcm_version`].
     *
     * @param {StagingXcmV3MultilocationMultiLocation} location
     * @param {number} version
     **/
    forceXcmVersion: GenericTxCall<
      Rv,
      (
        location: StagingXcmV3MultilocationMultiLocation,
        version: number
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PolkadotXcm'
          palletCall: {
            name: 'ForceXcmVersion'
            params: { location: StagingXcmV3MultilocationMultiLocation; version: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::force_default_xcm_version`].
     *
     * @param {number | undefined} maybeXcmVersion
     **/
    forceDefaultXcmVersion: GenericTxCall<
      Rv,
      (maybeXcmVersion: number | undefined) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PolkadotXcm'
          palletCall: {
            name: 'ForceDefaultXcmVersion'
            params: { maybeXcmVersion: number | undefined }
          }
        }
      >
    >

    /**
     * See [`Pallet::force_subscribe_version_notify`].
     *
     * @param {StagingXcmVersionedMultiLocation} location
     **/
    forceSubscribeVersionNotify: GenericTxCall<
      Rv,
      (location: StagingXcmVersionedMultiLocation) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PolkadotXcm'
          palletCall: {
            name: 'ForceSubscribeVersionNotify'
            params: { location: StagingXcmVersionedMultiLocation }
          }
        }
      >
    >

    /**
     * See [`Pallet::force_unsubscribe_version_notify`].
     *
     * @param {StagingXcmVersionedMultiLocation} location
     **/
    forceUnsubscribeVersionNotify: GenericTxCall<
      Rv,
      (location: StagingXcmVersionedMultiLocation) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PolkadotXcm'
          palletCall: {
            name: 'ForceUnsubscribeVersionNotify'
            params: { location: StagingXcmVersionedMultiLocation }
          }
        }
      >
    >

    /**
     * See [`Pallet::limited_reserve_transfer_assets`].
     *
     * @param {StagingXcmVersionedMultiLocation} dest
     * @param {StagingXcmVersionedMultiLocation} beneficiary
     * @param {StagingXcmVersionedMultiAssets} assets
     * @param {number} feeAssetItem
     * @param {StagingXcmV3WeightLimit} weightLimit
     **/
    limitedReserveTransferAssets: GenericTxCall<
      Rv,
      (
        dest: StagingXcmVersionedMultiLocation,
        beneficiary: StagingXcmVersionedMultiLocation,
        assets: StagingXcmVersionedMultiAssets,
        feeAssetItem: number,
        weightLimit: StagingXcmV3WeightLimit
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PolkadotXcm'
          palletCall: {
            name: 'LimitedReserveTransferAssets'
            params: {
              dest: StagingXcmVersionedMultiLocation
              beneficiary: StagingXcmVersionedMultiLocation
              assets: StagingXcmVersionedMultiAssets
              feeAssetItem: number
              weightLimit: StagingXcmV3WeightLimit
            }
          }
        }
      >
    >

    /**
     * See [`Pallet::limited_teleport_assets`].
     *
     * @param {StagingXcmVersionedMultiLocation} dest
     * @param {StagingXcmVersionedMultiLocation} beneficiary
     * @param {StagingXcmVersionedMultiAssets} assets
     * @param {number} feeAssetItem
     * @param {StagingXcmV3WeightLimit} weightLimit
     **/
    limitedTeleportAssets: GenericTxCall<
      Rv,
      (
        dest: StagingXcmVersionedMultiLocation,
        beneficiary: StagingXcmVersionedMultiLocation,
        assets: StagingXcmVersionedMultiAssets,
        feeAssetItem: number,
        weightLimit: StagingXcmV3WeightLimit
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PolkadotXcm'
          palletCall: {
            name: 'LimitedTeleportAssets'
            params: {
              dest: StagingXcmVersionedMultiLocation
              beneficiary: StagingXcmVersionedMultiLocation
              assets: StagingXcmVersionedMultiAssets
              feeAssetItem: number
              weightLimit: StagingXcmV3WeightLimit
            }
          }
        }
      >
    >

    /**
     * See [`Pallet::force_suspension`].
     *
     * @param {boolean} suspended
     **/
    forceSuspension: GenericTxCall<
      Rv,
      (suspended: boolean) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PolkadotXcm'
          palletCall: {
            name: 'ForceSuspension'
            params: { suspended: boolean }
          }
        }
      >
    >

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>
  }
  /**
   * Pallet `Balances`'s transaction calls
   **/
  balances: {
    /**
     * See [`Pallet::transfer_allow_death`].
     *
     * @param {MultiAddressLike} dest
     * @param {bigint} value
     **/
    transferAllowDeath: GenericTxCall<
      Rv,
      (
        dest: MultiAddressLike,
        value: bigint
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Balances'
          palletCall: {
            name: 'TransferAllowDeath'
            params: { dest: MultiAddressLike; value: bigint }
          }
        }
      >
    >

    /**
     * See [`Pallet::force_transfer`].
     *
     * @param {MultiAddressLike} source
     * @param {MultiAddressLike} dest
     * @param {bigint} value
     **/
    forceTransfer: GenericTxCall<
      Rv,
      (
        source: MultiAddressLike,
        dest: MultiAddressLike,
        value: bigint
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Balances'
          palletCall: {
            name: 'ForceTransfer'
            params: { source: MultiAddressLike; dest: MultiAddressLike; value: bigint }
          }
        }
      >
    >

    /**
     * See [`Pallet::transfer_keep_alive`].
     *
     * @param {MultiAddressLike} dest
     * @param {bigint} value
     **/
    transferKeepAlive: GenericTxCall<
      Rv,
      (
        dest: MultiAddressLike,
        value: bigint
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Balances'
          palletCall: {
            name: 'TransferKeepAlive'
            params: { dest: MultiAddressLike; value: bigint }
          }
        }
      >
    >

    /**
     * See [`Pallet::transfer_all`].
     *
     * @param {MultiAddressLike} dest
     * @param {boolean} keepAlive
     **/
    transferAll: GenericTxCall<
      Rv,
      (
        dest: MultiAddressLike,
        keepAlive: boolean
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Balances'
          palletCall: {
            name: 'TransferAll'
            params: { dest: MultiAddressLike; keepAlive: boolean }
          }
        }
      >
    >

    /**
     * See [`Pallet::force_unreserve`].
     *
     * @param {MultiAddressLike} who
     * @param {bigint} amount
     **/
    forceUnreserve: GenericTxCall<
      Rv,
      (
        who: MultiAddressLike,
        amount: bigint
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Balances'
          palletCall: {
            name: 'ForceUnreserve'
            params: { who: MultiAddressLike; amount: bigint }
          }
        }
      >
    >

    /**
     * See [`Pallet::upgrade_accounts`].
     *
     * @param {Array<AccountId32Like>} who
     **/
    upgradeAccounts: GenericTxCall<
      Rv,
      (who: Array<AccountId32Like>) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Balances'
          palletCall: {
            name: 'UpgradeAccounts'
            params: { who: Array<AccountId32Like> }
          }
        }
      >
    >

    /**
     * See [`Pallet::force_set_balance`].
     *
     * @param {MultiAddressLike} who
     * @param {bigint} newFree
     **/
    forceSetBalance: GenericTxCall<
      Rv,
      (
        who: MultiAddressLike,
        newFree: bigint
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Balances'
          palletCall: {
            name: 'ForceSetBalance'
            params: { who: MultiAddressLike; newFree: bigint }
          }
        }
      >
    >

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>
  }
  /**
   * Pallet `Assets`'s transaction calls
   **/
  assets: {
    /**
     * See [`Pallet::create`].
     *
     * @param {number} id
     * @param {MultiAddressLike} admin
     * @param {bigint} minBalance
     **/
    create: GenericTxCall<
      Rv,
      (
        id: number,
        admin: MultiAddressLike,
        minBalance: bigint
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets'
          palletCall: {
            name: 'Create'
            params: { id: number; admin: MultiAddressLike; minBalance: bigint }
          }
        }
      >
    >

    /**
     * See [`Pallet::force_create`].
     *
     * @param {number} id
     * @param {MultiAddressLike} owner
     * @param {boolean} isSufficient
     * @param {bigint} minBalance
     **/
    forceCreate: GenericTxCall<
      Rv,
      (
        id: number,
        owner: MultiAddressLike,
        isSufficient: boolean,
        minBalance: bigint
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets'
          palletCall: {
            name: 'ForceCreate'
            params: { id: number; owner: MultiAddressLike; isSufficient: boolean; minBalance: bigint }
          }
        }
      >
    >

    /**
     * See [`Pallet::start_destroy`].
     *
     * @param {number} id
     **/
    startDestroy: GenericTxCall<
      Rv,
      (id: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets'
          palletCall: {
            name: 'StartDestroy'
            params: { id: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::destroy_accounts`].
     *
     * @param {number} id
     **/
    destroyAccounts: GenericTxCall<
      Rv,
      (id: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets'
          palletCall: {
            name: 'DestroyAccounts'
            params: { id: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::destroy_approvals`].
     *
     * @param {number} id
     **/
    destroyApprovals: GenericTxCall<
      Rv,
      (id: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets'
          palletCall: {
            name: 'DestroyApprovals'
            params: { id: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::finish_destroy`].
     *
     * @param {number} id
     **/
    finishDestroy: GenericTxCall<
      Rv,
      (id: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets'
          palletCall: {
            name: 'FinishDestroy'
            params: { id: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::mint`].
     *
     * @param {number} id
     * @param {MultiAddressLike} beneficiary
     * @param {bigint} amount
     **/
    mint: GenericTxCall<
      Rv,
      (
        id: number,
        beneficiary: MultiAddressLike,
        amount: bigint
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets'
          palletCall: {
            name: 'Mint'
            params: { id: number; beneficiary: MultiAddressLike; amount: bigint }
          }
        }
      >
    >

    /**
     * See [`Pallet::burn`].
     *
     * @param {number} id
     * @param {MultiAddressLike} who
     * @param {bigint} amount
     **/
    burn: GenericTxCall<
      Rv,
      (
        id: number,
        who: MultiAddressLike,
        amount: bigint
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets'
          palletCall: {
            name: 'Burn'
            params: { id: number; who: MultiAddressLike; amount: bigint }
          }
        }
      >
    >

    /**
     * See [`Pallet::transfer`].
     *
     * @param {number} id
     * @param {MultiAddressLike} target
     * @param {bigint} amount
     **/
    transfer: GenericTxCall<
      Rv,
      (
        id: number,
        target: MultiAddressLike,
        amount: bigint
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets'
          palletCall: {
            name: 'Transfer'
            params: { id: number; target: MultiAddressLike; amount: bigint }
          }
        }
      >
    >

    /**
     * See [`Pallet::transfer_keep_alive`].
     *
     * @param {number} id
     * @param {MultiAddressLike} target
     * @param {bigint} amount
     **/
    transferKeepAlive: GenericTxCall<
      Rv,
      (
        id: number,
        target: MultiAddressLike,
        amount: bigint
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets'
          palletCall: {
            name: 'TransferKeepAlive'
            params: { id: number; target: MultiAddressLike; amount: bigint }
          }
        }
      >
    >

    /**
     * See [`Pallet::force_transfer`].
     *
     * @param {number} id
     * @param {MultiAddressLike} source
     * @param {MultiAddressLike} dest
     * @param {bigint} amount
     **/
    forceTransfer: GenericTxCall<
      Rv,
      (
        id: number,
        source: MultiAddressLike,
        dest: MultiAddressLike,
        amount: bigint
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets'
          palletCall: {
            name: 'ForceTransfer'
            params: { id: number; source: MultiAddressLike; dest: MultiAddressLike; amount: bigint }
          }
        }
      >
    >

    /**
     * See [`Pallet::freeze`].
     *
     * @param {number} id
     * @param {MultiAddressLike} who
     **/
    freeze: GenericTxCall<
      Rv,
      (
        id: number,
        who: MultiAddressLike
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets'
          palletCall: {
            name: 'Freeze'
            params: { id: number; who: MultiAddressLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::thaw`].
     *
     * @param {number} id
     * @param {MultiAddressLike} who
     **/
    thaw: GenericTxCall<
      Rv,
      (
        id: number,
        who: MultiAddressLike
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets'
          palletCall: {
            name: 'Thaw'
            params: { id: number; who: MultiAddressLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::freeze_asset`].
     *
     * @param {number} id
     **/
    freezeAsset: GenericTxCall<
      Rv,
      (id: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets'
          palletCall: {
            name: 'FreezeAsset'
            params: { id: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::thaw_asset`].
     *
     * @param {number} id
     **/
    thawAsset: GenericTxCall<
      Rv,
      (id: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets'
          palletCall: {
            name: 'ThawAsset'
            params: { id: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::transfer_ownership`].
     *
     * @param {number} id
     * @param {MultiAddressLike} owner
     **/
    transferOwnership: GenericTxCall<
      Rv,
      (
        id: number,
        owner: MultiAddressLike
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets'
          palletCall: {
            name: 'TransferOwnership'
            params: { id: number; owner: MultiAddressLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::set_team`].
     *
     * @param {number} id
     * @param {MultiAddressLike} issuer
     * @param {MultiAddressLike} admin
     * @param {MultiAddressLike} freezer
     **/
    setTeam: GenericTxCall<
      Rv,
      (
        id: number,
        issuer: MultiAddressLike,
        admin: MultiAddressLike,
        freezer: MultiAddressLike
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets'
          palletCall: {
            name: 'SetTeam'
            params: { id: number; issuer: MultiAddressLike; admin: MultiAddressLike; freezer: MultiAddressLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::set_metadata`].
     *
     * @param {number} id
     * @param {BytesLike} name
     * @param {BytesLike} symbol
     * @param {number} decimals
     **/
    setMetadata: GenericTxCall<
      Rv,
      (
        id: number,
        name: BytesLike,
        symbol: BytesLike,
        decimals: number
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets'
          palletCall: {
            name: 'SetMetadata'
            params: { id: number; name: BytesLike; symbol: BytesLike; decimals: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::clear_metadata`].
     *
     * @param {number} id
     **/
    clearMetadata: GenericTxCall<
      Rv,
      (id: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets'
          palletCall: {
            name: 'ClearMetadata'
            params: { id: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::force_set_metadata`].
     *
     * @param {number} id
     * @param {BytesLike} name
     * @param {BytesLike} symbol
     * @param {number} decimals
     * @param {boolean} isFrozen
     **/
    forceSetMetadata: GenericTxCall<
      Rv,
      (
        id: number,
        name: BytesLike,
        symbol: BytesLike,
        decimals: number,
        isFrozen: boolean
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets'
          palletCall: {
            name: 'ForceSetMetadata'
            params: { id: number; name: BytesLike; symbol: BytesLike; decimals: number; isFrozen: boolean }
          }
        }
      >
    >

    /**
     * See [`Pallet::force_clear_metadata`].
     *
     * @param {number} id
     **/
    forceClearMetadata: GenericTxCall<
      Rv,
      (id: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets'
          palletCall: {
            name: 'ForceClearMetadata'
            params: { id: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::force_asset_status`].
     *
     * @param {number} id
     * @param {MultiAddressLike} owner
     * @param {MultiAddressLike} issuer
     * @param {MultiAddressLike} admin
     * @param {MultiAddressLike} freezer
     * @param {bigint} minBalance
     * @param {boolean} isSufficient
     * @param {boolean} isFrozen
     **/
    forceAssetStatus: GenericTxCall<
      Rv,
      (
        id: number,
        owner: MultiAddressLike,
        issuer: MultiAddressLike,
        admin: MultiAddressLike,
        freezer: MultiAddressLike,
        minBalance: bigint,
        isSufficient: boolean,
        isFrozen: boolean
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets'
          palletCall: {
            name: 'ForceAssetStatus'
            params: {
              id: number
              owner: MultiAddressLike
              issuer: MultiAddressLike
              admin: MultiAddressLike
              freezer: MultiAddressLike
              minBalance: bigint
              isSufficient: boolean
              isFrozen: boolean
            }
          }
        }
      >
    >

    /**
     * See [`Pallet::approve_transfer`].
     *
     * @param {number} id
     * @param {MultiAddressLike} delegate
     * @param {bigint} amount
     **/
    approveTransfer: GenericTxCall<
      Rv,
      (
        id: number,
        delegate: MultiAddressLike,
        amount: bigint
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets'
          palletCall: {
            name: 'ApproveTransfer'
            params: { id: number; delegate: MultiAddressLike; amount: bigint }
          }
        }
      >
    >

    /**
     * See [`Pallet::cancel_approval`].
     *
     * @param {number} id
     * @param {MultiAddressLike} delegate
     **/
    cancelApproval: GenericTxCall<
      Rv,
      (
        id: number,
        delegate: MultiAddressLike
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets'
          palletCall: {
            name: 'CancelApproval'
            params: { id: number; delegate: MultiAddressLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::force_cancel_approval`].
     *
     * @param {number} id
     * @param {MultiAddressLike} owner
     * @param {MultiAddressLike} delegate
     **/
    forceCancelApproval: GenericTxCall<
      Rv,
      (
        id: number,
        owner: MultiAddressLike,
        delegate: MultiAddressLike
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets'
          palletCall: {
            name: 'ForceCancelApproval'
            params: { id: number; owner: MultiAddressLike; delegate: MultiAddressLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::transfer_approved`].
     *
     * @param {number} id
     * @param {MultiAddressLike} owner
     * @param {MultiAddressLike} destination
     * @param {bigint} amount
     **/
    transferApproved: GenericTxCall<
      Rv,
      (
        id: number,
        owner: MultiAddressLike,
        destination: MultiAddressLike,
        amount: bigint
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets'
          palletCall: {
            name: 'TransferApproved'
            params: { id: number; owner: MultiAddressLike; destination: MultiAddressLike; amount: bigint }
          }
        }
      >
    >

    /**
     * See [`Pallet::touch`].
     *
     * @param {number} id
     **/
    touch: GenericTxCall<
      Rv,
      (id: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets'
          palletCall: {
            name: 'Touch'
            params: { id: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::refund`].
     *
     * @param {number} id
     * @param {boolean} allowBurn
     **/
    refund: GenericTxCall<
      Rv,
      (
        id: number,
        allowBurn: boolean
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets'
          palletCall: {
            name: 'Refund'
            params: { id: number; allowBurn: boolean }
          }
        }
      >
    >

    /**
     * See [`Pallet::set_min_balance`].
     *
     * @param {number} id
     * @param {bigint} minBalance
     **/
    setMinBalance: GenericTxCall<
      Rv,
      (
        id: number,
        minBalance: bigint
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets'
          palletCall: {
            name: 'SetMinBalance'
            params: { id: number; minBalance: bigint }
          }
        }
      >
    >

    /**
     * See [`Pallet::touch_other`].
     *
     * @param {number} id
     * @param {MultiAddressLike} who
     **/
    touchOther: GenericTxCall<
      Rv,
      (
        id: number,
        who: MultiAddressLike
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets'
          palletCall: {
            name: 'TouchOther'
            params: { id: number; who: MultiAddressLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::refund_other`].
     *
     * @param {number} id
     * @param {MultiAddressLike} who
     **/
    refundOther: GenericTxCall<
      Rv,
      (
        id: number,
        who: MultiAddressLike
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets'
          palletCall: {
            name: 'RefundOther'
            params: { id: number; who: MultiAddressLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::block`].
     *
     * @param {number} id
     * @param {MultiAddressLike} who
     **/
    block: GenericTxCall<
      Rv,
      (
        id: number,
        who: MultiAddressLike
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Assets'
          palletCall: {
            name: 'Block'
            params: { id: number; who: MultiAddressLike }
          }
        }
      >
    >

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>
  }
  /**
   * Pallet `CollatorSelection`'s transaction calls
   **/
  collatorSelection: {
    /**
     * See [`Pallet::set_invulnerables`].
     *
     * @param {Array<AccountId32Like>} new_
     **/
    setInvulnerables: GenericTxCall<
      Rv,
      (new_: Array<AccountId32Like>) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'CollatorSelection'
          palletCall: {
            name: 'SetInvulnerables'
            params: { new: Array<AccountId32Like> }
          }
        }
      >
    >

    /**
     * See [`Pallet::set_desired_candidates`].
     *
     * @param {number} max
     **/
    setDesiredCandidates: GenericTxCall<
      Rv,
      (max: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'CollatorSelection'
          palletCall: {
            name: 'SetDesiredCandidates'
            params: { max: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::set_candidacy_bond`].
     *
     * @param {bigint} bond
     **/
    setCandidacyBond: GenericTxCall<
      Rv,
      (bond: bigint) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'CollatorSelection'
          palletCall: {
            name: 'SetCandidacyBond'
            params: { bond: bigint }
          }
        }
      >
    >

    /**
     * See [`Pallet::register_as_candidate`].
     *
     **/
    registerAsCandidate: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'CollatorSelection'
          palletCall: {
            name: 'RegisterAsCandidate'
          }
        }
      >
    >

    /**
     * See [`Pallet::leave_intent`].
     *
     **/
    leaveIntent: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'CollatorSelection'
          palletCall: {
            name: 'LeaveIntent'
          }
        }
      >
    >

    /**
     * See [`Pallet::add_invulnerable`].
     *
     * @param {AccountId32Like} who
     **/
    addInvulnerable: GenericTxCall<
      Rv,
      (who: AccountId32Like) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'CollatorSelection'
          palletCall: {
            name: 'AddInvulnerable'
            params: { who: AccountId32Like }
          }
        }
      >
    >

    /**
     * See [`Pallet::remove_invulnerable`].
     *
     * @param {AccountId32Like} who
     **/
    removeInvulnerable: GenericTxCall<
      Rv,
      (who: AccountId32Like) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'CollatorSelection'
          palletCall: {
            name: 'RemoveInvulnerable'
            params: { who: AccountId32Like }
          }
        }
      >
    >

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>
  }
  /**
   * Pallet `Session`'s transaction calls
   **/
  session: {
    /**
     * See [`Pallet::set_keys`].
     *
     * @param {PhalaParachainRuntimeOpaqueSessionKeys} keys
     * @param {BytesLike} proof
     **/
    setKeys: GenericTxCall<
      Rv,
      (
        keys: PhalaParachainRuntimeOpaqueSessionKeys,
        proof: BytesLike
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Session'
          palletCall: {
            name: 'SetKeys'
            params: { keys: PhalaParachainRuntimeOpaqueSessionKeys; proof: BytesLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::purge_keys`].
     *
     **/
    purgeKeys: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Session'
          palletCall: {
            name: 'PurgeKeys'
          }
        }
      >
    >

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>
  }
  /**
   * Pallet `Identity`'s transaction calls
   **/
  identity: {
    /**
     * See [`Pallet::add_registrar`].
     *
     * @param {MultiAddressLike} account
     **/
    addRegistrar: GenericTxCall<
      Rv,
      (account: MultiAddressLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Identity'
          palletCall: {
            name: 'AddRegistrar'
            params: { account: MultiAddressLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::set_identity`].
     *
     * @param {PalletIdentityIdentityInfo} info
     **/
    setIdentity: GenericTxCall<
      Rv,
      (info: PalletIdentityIdentityInfo) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Identity'
          palletCall: {
            name: 'SetIdentity'
            params: { info: PalletIdentityIdentityInfo }
          }
        }
      >
    >

    /**
     * See [`Pallet::set_subs`].
     *
     * @param {Array<[AccountId32Like, Data]>} subs
     **/
    setSubs: GenericTxCall<
      Rv,
      (subs: Array<[AccountId32Like, Data]>) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Identity'
          palletCall: {
            name: 'SetSubs'
            params: { subs: Array<[AccountId32Like, Data]> }
          }
        }
      >
    >

    /**
     * See [`Pallet::clear_identity`].
     *
     **/
    clearIdentity: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Identity'
          palletCall: {
            name: 'ClearIdentity'
          }
        }
      >
    >

    /**
     * See [`Pallet::request_judgement`].
     *
     * @param {number} regIndex
     * @param {bigint} maxFee
     **/
    requestJudgement: GenericTxCall<
      Rv,
      (
        regIndex: number,
        maxFee: bigint
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Identity'
          palletCall: {
            name: 'RequestJudgement'
            params: { regIndex: number; maxFee: bigint }
          }
        }
      >
    >

    /**
     * See [`Pallet::cancel_request`].
     *
     * @param {number} regIndex
     **/
    cancelRequest: GenericTxCall<
      Rv,
      (regIndex: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Identity'
          palletCall: {
            name: 'CancelRequest'
            params: { regIndex: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::set_fee`].
     *
     * @param {number} index
     * @param {bigint} fee
     **/
    setFee: GenericTxCall<
      Rv,
      (
        index: number,
        fee: bigint
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Identity'
          palletCall: {
            name: 'SetFee'
            params: { index: number; fee: bigint }
          }
        }
      >
    >

    /**
     * See [`Pallet::set_account_id`].
     *
     * @param {number} index
     * @param {MultiAddressLike} new_
     **/
    setAccountId: GenericTxCall<
      Rv,
      (
        index: number,
        new_: MultiAddressLike
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Identity'
          palletCall: {
            name: 'SetAccountId'
            params: { index: number; new: MultiAddressLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::set_fields`].
     *
     * @param {number} index
     * @param {PalletIdentityBitFlags} fields
     **/
    setFields: GenericTxCall<
      Rv,
      (
        index: number,
        fields: PalletIdentityBitFlags
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Identity'
          palletCall: {
            name: 'SetFields'
            params: { index: number; fields: PalletIdentityBitFlags }
          }
        }
      >
    >

    /**
     * See [`Pallet::provide_judgement`].
     *
     * @param {number} regIndex
     * @param {MultiAddressLike} target
     * @param {PalletIdentityJudgement} judgement
     * @param {H256} identity
     **/
    provideJudgement: GenericTxCall<
      Rv,
      (
        regIndex: number,
        target: MultiAddressLike,
        judgement: PalletIdentityJudgement,
        identity: H256
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Identity'
          palletCall: {
            name: 'ProvideJudgement'
            params: { regIndex: number; target: MultiAddressLike; judgement: PalletIdentityJudgement; identity: H256 }
          }
        }
      >
    >

    /**
     * See [`Pallet::kill_identity`].
     *
     * @param {MultiAddressLike} target
     **/
    killIdentity: GenericTxCall<
      Rv,
      (target: MultiAddressLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Identity'
          palletCall: {
            name: 'KillIdentity'
            params: { target: MultiAddressLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::add_sub`].
     *
     * @param {MultiAddressLike} sub
     * @param {Data} data
     **/
    addSub: GenericTxCall<
      Rv,
      (
        sub: MultiAddressLike,
        data: Data
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Identity'
          palletCall: {
            name: 'AddSub'
            params: { sub: MultiAddressLike; data: Data }
          }
        }
      >
    >

    /**
     * See [`Pallet::rename_sub`].
     *
     * @param {MultiAddressLike} sub
     * @param {Data} data
     **/
    renameSub: GenericTxCall<
      Rv,
      (
        sub: MultiAddressLike,
        data: Data
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Identity'
          palletCall: {
            name: 'RenameSub'
            params: { sub: MultiAddressLike; data: Data }
          }
        }
      >
    >

    /**
     * See [`Pallet::remove_sub`].
     *
     * @param {MultiAddressLike} sub
     **/
    removeSub: GenericTxCall<
      Rv,
      (sub: MultiAddressLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Identity'
          palletCall: {
            name: 'RemoveSub'
            params: { sub: MultiAddressLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::quit_sub`].
     *
     **/
    quitSub: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Identity'
          palletCall: {
            name: 'QuitSub'
          }
        }
      >
    >

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>
  }
  /**
   * Pallet `Democracy`'s transaction calls
   **/
  democracy: {
    /**
     * See [`Pallet::propose`].
     *
     * @param {FrameSupportPreimagesBounded} proposal
     * @param {bigint} value
     **/
    propose: GenericTxCall<
      Rv,
      (
        proposal: FrameSupportPreimagesBounded,
        value: bigint
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Democracy'
          palletCall: {
            name: 'Propose'
            params: { proposal: FrameSupportPreimagesBounded; value: bigint }
          }
        }
      >
    >

    /**
     * See [`Pallet::second`].
     *
     * @param {number} proposal
     **/
    second: GenericTxCall<
      Rv,
      (proposal: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Democracy'
          palletCall: {
            name: 'Second'
            params: { proposal: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::vote`].
     *
     * @param {number} refIndex
     * @param {PalletDemocracyVoteAccountVote} vote
     **/
    vote: GenericTxCall<
      Rv,
      (
        refIndex: number,
        vote: PalletDemocracyVoteAccountVote
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Democracy'
          palletCall: {
            name: 'Vote'
            params: { refIndex: number; vote: PalletDemocracyVoteAccountVote }
          }
        }
      >
    >

    /**
     * See [`Pallet::emergency_cancel`].
     *
     * @param {number} refIndex
     **/
    emergencyCancel: GenericTxCall<
      Rv,
      (refIndex: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Democracy'
          palletCall: {
            name: 'EmergencyCancel'
            params: { refIndex: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::external_propose`].
     *
     * @param {FrameSupportPreimagesBounded} proposal
     **/
    externalPropose: GenericTxCall<
      Rv,
      (proposal: FrameSupportPreimagesBounded) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Democracy'
          palletCall: {
            name: 'ExternalPropose'
            params: { proposal: FrameSupportPreimagesBounded }
          }
        }
      >
    >

    /**
     * See [`Pallet::external_propose_majority`].
     *
     * @param {FrameSupportPreimagesBounded} proposal
     **/
    externalProposeMajority: GenericTxCall<
      Rv,
      (proposal: FrameSupportPreimagesBounded) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Democracy'
          palletCall: {
            name: 'ExternalProposeMajority'
            params: { proposal: FrameSupportPreimagesBounded }
          }
        }
      >
    >

    /**
     * See [`Pallet::external_propose_default`].
     *
     * @param {FrameSupportPreimagesBounded} proposal
     **/
    externalProposeDefault: GenericTxCall<
      Rv,
      (proposal: FrameSupportPreimagesBounded) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Democracy'
          palletCall: {
            name: 'ExternalProposeDefault'
            params: { proposal: FrameSupportPreimagesBounded }
          }
        }
      >
    >

    /**
     * See [`Pallet::fast_track`].
     *
     * @param {H256} proposalHash
     * @param {number} votingPeriod
     * @param {number} delay
     **/
    fastTrack: GenericTxCall<
      Rv,
      (
        proposalHash: H256,
        votingPeriod: number,
        delay: number
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Democracy'
          palletCall: {
            name: 'FastTrack'
            params: { proposalHash: H256; votingPeriod: number; delay: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::veto_external`].
     *
     * @param {H256} proposalHash
     **/
    vetoExternal: GenericTxCall<
      Rv,
      (proposalHash: H256) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Democracy'
          palletCall: {
            name: 'VetoExternal'
            params: { proposalHash: H256 }
          }
        }
      >
    >

    /**
     * See [`Pallet::cancel_referendum`].
     *
     * @param {number} refIndex
     **/
    cancelReferendum: GenericTxCall<
      Rv,
      (refIndex: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Democracy'
          palletCall: {
            name: 'CancelReferendum'
            params: { refIndex: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::delegate`].
     *
     * @param {MultiAddressLike} to
     * @param {PalletDemocracyConviction} conviction
     * @param {bigint} balance
     **/
    delegate: GenericTxCall<
      Rv,
      (
        to: MultiAddressLike,
        conviction: PalletDemocracyConviction,
        balance: bigint
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Democracy'
          palletCall: {
            name: 'Delegate'
            params: { to: MultiAddressLike; conviction: PalletDemocracyConviction; balance: bigint }
          }
        }
      >
    >

    /**
     * See [`Pallet::undelegate`].
     *
     **/
    undelegate: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Democracy'
          palletCall: {
            name: 'Undelegate'
          }
        }
      >
    >

    /**
     * See [`Pallet::clear_public_proposals`].
     *
     **/
    clearPublicProposals: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Democracy'
          palletCall: {
            name: 'ClearPublicProposals'
          }
        }
      >
    >

    /**
     * See [`Pallet::unlock`].
     *
     * @param {MultiAddressLike} target
     **/
    unlock: GenericTxCall<
      Rv,
      (target: MultiAddressLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Democracy'
          palletCall: {
            name: 'Unlock'
            params: { target: MultiAddressLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::remove_vote`].
     *
     * @param {number} index
     **/
    removeVote: GenericTxCall<
      Rv,
      (index: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Democracy'
          palletCall: {
            name: 'RemoveVote'
            params: { index: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::remove_other_vote`].
     *
     * @param {MultiAddressLike} target
     * @param {number} index
     **/
    removeOtherVote: GenericTxCall<
      Rv,
      (
        target: MultiAddressLike,
        index: number
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Democracy'
          palletCall: {
            name: 'RemoveOtherVote'
            params: { target: MultiAddressLike; index: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::blacklist`].
     *
     * @param {H256} proposalHash
     * @param {number | undefined} maybeRefIndex
     **/
    blacklist: GenericTxCall<
      Rv,
      (
        proposalHash: H256,
        maybeRefIndex: number | undefined
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Democracy'
          palletCall: {
            name: 'Blacklist'
            params: { proposalHash: H256; maybeRefIndex: number | undefined }
          }
        }
      >
    >

    /**
     * See [`Pallet::cancel_proposal`].
     *
     * @param {number} propIndex
     **/
    cancelProposal: GenericTxCall<
      Rv,
      (propIndex: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Democracy'
          palletCall: {
            name: 'CancelProposal'
            params: { propIndex: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::set_metadata`].
     *
     * @param {PalletDemocracyMetadataOwner} owner
     * @param {H256 | undefined} maybeHash
     **/
    setMetadata: GenericTxCall<
      Rv,
      (
        owner: PalletDemocracyMetadataOwner,
        maybeHash: H256 | undefined
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Democracy'
          palletCall: {
            name: 'SetMetadata'
            params: { owner: PalletDemocracyMetadataOwner; maybeHash: H256 | undefined }
          }
        }
      >
    >

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>
  }
  /**
   * Pallet `Council`'s transaction calls
   **/
  council: {
    /**
     * See [`Pallet::set_members`].
     *
     * @param {Array<AccountId32Like>} newMembers
     * @param {AccountId32Like | undefined} prime
     * @param {number} oldCount
     **/
    setMembers: GenericTxCall<
      Rv,
      (
        newMembers: Array<AccountId32Like>,
        prime: AccountId32Like | undefined,
        oldCount: number
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Council'
          palletCall: {
            name: 'SetMembers'
            params: { newMembers: Array<AccountId32Like>; prime: AccountId32Like | undefined; oldCount: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::execute`].
     *
     * @param {PhalaParachainRuntimeRuntimeCallLike} proposal
     * @param {number} lengthBound
     **/
    execute: GenericTxCall<
      Rv,
      (
        proposal: PhalaParachainRuntimeRuntimeCallLike,
        lengthBound: number
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Council'
          palletCall: {
            name: 'Execute'
            params: { proposal: PhalaParachainRuntimeRuntimeCallLike; lengthBound: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::propose`].
     *
     * @param {number} threshold
     * @param {PhalaParachainRuntimeRuntimeCallLike} proposal
     * @param {number} lengthBound
     **/
    propose: GenericTxCall<
      Rv,
      (
        threshold: number,
        proposal: PhalaParachainRuntimeRuntimeCallLike,
        lengthBound: number
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Council'
          palletCall: {
            name: 'Propose'
            params: { threshold: number; proposal: PhalaParachainRuntimeRuntimeCallLike; lengthBound: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::vote`].
     *
     * @param {H256} proposal
     * @param {number} index
     * @param {boolean} approve
     **/
    vote: GenericTxCall<
      Rv,
      (
        proposal: H256,
        index: number,
        approve: boolean
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Council'
          palletCall: {
            name: 'Vote'
            params: { proposal: H256; index: number; approve: boolean }
          }
        }
      >
    >

    /**
     * See [`Pallet::disapprove_proposal`].
     *
     * @param {H256} proposalHash
     **/
    disapproveProposal: GenericTxCall<
      Rv,
      (proposalHash: H256) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Council'
          palletCall: {
            name: 'DisapproveProposal'
            params: { proposalHash: H256 }
          }
        }
      >
    >

    /**
     * See [`Pallet::close`].
     *
     * @param {H256} proposalHash
     * @param {number} index
     * @param {SpWeightsWeightV2Weight} proposalWeightBound
     * @param {number} lengthBound
     **/
    close: GenericTxCall<
      Rv,
      (
        proposalHash: H256,
        index: number,
        proposalWeightBound: SpWeightsWeightV2Weight,
        lengthBound: number
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Council'
          palletCall: {
            name: 'Close'
            params: {
              proposalHash: H256
              index: number
              proposalWeightBound: SpWeightsWeightV2Weight
              lengthBound: number
            }
          }
        }
      >
    >

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>
  }
  /**
   * Pallet `Treasury`'s transaction calls
   **/
  treasury: {
    /**
     * See [`Pallet::propose_spend`].
     *
     * @param {bigint} value
     * @param {MultiAddressLike} beneficiary
     **/
    proposeSpend: GenericTxCall<
      Rv,
      (
        value: bigint,
        beneficiary: MultiAddressLike
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Treasury'
          palletCall: {
            name: 'ProposeSpend'
            params: { value: bigint; beneficiary: MultiAddressLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::reject_proposal`].
     *
     * @param {number} proposalId
     **/
    rejectProposal: GenericTxCall<
      Rv,
      (proposalId: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Treasury'
          palletCall: {
            name: 'RejectProposal'
            params: { proposalId: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::approve_proposal`].
     *
     * @param {number} proposalId
     **/
    approveProposal: GenericTxCall<
      Rv,
      (proposalId: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Treasury'
          palletCall: {
            name: 'ApproveProposal'
            params: { proposalId: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::spend`].
     *
     * @param {bigint} amount
     * @param {MultiAddressLike} beneficiary
     **/
    spend: GenericTxCall<
      Rv,
      (
        amount: bigint,
        beneficiary: MultiAddressLike
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Treasury'
          palletCall: {
            name: 'Spend'
            params: { amount: bigint; beneficiary: MultiAddressLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::remove_approval`].
     *
     * @param {number} proposalId
     **/
    removeApproval: GenericTxCall<
      Rv,
      (proposalId: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Treasury'
          palletCall: {
            name: 'RemoveApproval'
            params: { proposalId: number }
          }
        }
      >
    >

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>
  }
  /**
   * Pallet `Bounties`'s transaction calls
   **/
  bounties: {
    /**
     * See [`Pallet::propose_bounty`].
     *
     * @param {bigint} value
     * @param {BytesLike} description
     **/
    proposeBounty: GenericTxCall<
      Rv,
      (
        value: bigint,
        description: BytesLike
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Bounties'
          palletCall: {
            name: 'ProposeBounty'
            params: { value: bigint; description: BytesLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::approve_bounty`].
     *
     * @param {number} bountyId
     **/
    approveBounty: GenericTxCall<
      Rv,
      (bountyId: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Bounties'
          palletCall: {
            name: 'ApproveBounty'
            params: { bountyId: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::propose_curator`].
     *
     * @param {number} bountyId
     * @param {MultiAddressLike} curator
     * @param {bigint} fee
     **/
    proposeCurator: GenericTxCall<
      Rv,
      (
        bountyId: number,
        curator: MultiAddressLike,
        fee: bigint
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Bounties'
          palletCall: {
            name: 'ProposeCurator'
            params: { bountyId: number; curator: MultiAddressLike; fee: bigint }
          }
        }
      >
    >

    /**
     * See [`Pallet::unassign_curator`].
     *
     * @param {number} bountyId
     **/
    unassignCurator: GenericTxCall<
      Rv,
      (bountyId: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Bounties'
          palletCall: {
            name: 'UnassignCurator'
            params: { bountyId: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::accept_curator`].
     *
     * @param {number} bountyId
     **/
    acceptCurator: GenericTxCall<
      Rv,
      (bountyId: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Bounties'
          palletCall: {
            name: 'AcceptCurator'
            params: { bountyId: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::award_bounty`].
     *
     * @param {number} bountyId
     * @param {MultiAddressLike} beneficiary
     **/
    awardBounty: GenericTxCall<
      Rv,
      (
        bountyId: number,
        beneficiary: MultiAddressLike
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Bounties'
          palletCall: {
            name: 'AwardBounty'
            params: { bountyId: number; beneficiary: MultiAddressLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::claim_bounty`].
     *
     * @param {number} bountyId
     **/
    claimBounty: GenericTxCall<
      Rv,
      (bountyId: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Bounties'
          palletCall: {
            name: 'ClaimBounty'
            params: { bountyId: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::close_bounty`].
     *
     * @param {number} bountyId
     **/
    closeBounty: GenericTxCall<
      Rv,
      (bountyId: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Bounties'
          palletCall: {
            name: 'CloseBounty'
            params: { bountyId: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::extend_bounty_expiry`].
     *
     * @param {number} bountyId
     * @param {BytesLike} remark
     **/
    extendBountyExpiry: GenericTxCall<
      Rv,
      (
        bountyId: number,
        remark: BytesLike
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Bounties'
          palletCall: {
            name: 'ExtendBountyExpiry'
            params: { bountyId: number; remark: BytesLike }
          }
        }
      >
    >

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>
  }
  /**
   * Pallet `Lottery`'s transaction calls
   **/
  lottery: {
    /**
     * See [`Pallet::buy_ticket`].
     *
     * @param {PhalaParachainRuntimeRuntimeCallLike} call
     **/
    buyTicket: GenericTxCall<
      Rv,
      (call: PhalaParachainRuntimeRuntimeCallLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Lottery'
          palletCall: {
            name: 'BuyTicket'
            params: { call: PhalaParachainRuntimeRuntimeCallLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::set_calls`].
     *
     * @param {Array<PhalaParachainRuntimeRuntimeCallLike>} calls
     **/
    setCalls: GenericTxCall<
      Rv,
      (calls: Array<PhalaParachainRuntimeRuntimeCallLike>) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Lottery'
          palletCall: {
            name: 'SetCalls'
            params: { calls: Array<PhalaParachainRuntimeRuntimeCallLike> }
          }
        }
      >
    >

    /**
     * See [`Pallet::start_lottery`].
     *
     * @param {bigint} price
     * @param {number} length
     * @param {number} delay
     * @param {boolean} repeat
     **/
    startLottery: GenericTxCall<
      Rv,
      (
        price: bigint,
        length: number,
        delay: number,
        repeat: boolean
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Lottery'
          palletCall: {
            name: 'StartLottery'
            params: { price: bigint; length: number; delay: number; repeat: boolean }
          }
        }
      >
    >

    /**
     * See [`Pallet::stop_repeat`].
     *
     **/
    stopRepeat: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Lottery'
          palletCall: {
            name: 'StopRepeat'
          }
        }
      >
    >

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>
  }
  /**
   * Pallet `TechnicalCommittee`'s transaction calls
   **/
  technicalCommittee: {
    /**
     * See [`Pallet::set_members`].
     *
     * @param {Array<AccountId32Like>} newMembers
     * @param {AccountId32Like | undefined} prime
     * @param {number} oldCount
     **/
    setMembers: GenericTxCall<
      Rv,
      (
        newMembers: Array<AccountId32Like>,
        prime: AccountId32Like | undefined,
        oldCount: number
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'TechnicalCommittee'
          palletCall: {
            name: 'SetMembers'
            params: { newMembers: Array<AccountId32Like>; prime: AccountId32Like | undefined; oldCount: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::execute`].
     *
     * @param {PhalaParachainRuntimeRuntimeCallLike} proposal
     * @param {number} lengthBound
     **/
    execute: GenericTxCall<
      Rv,
      (
        proposal: PhalaParachainRuntimeRuntimeCallLike,
        lengthBound: number
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'TechnicalCommittee'
          palletCall: {
            name: 'Execute'
            params: { proposal: PhalaParachainRuntimeRuntimeCallLike; lengthBound: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::propose`].
     *
     * @param {number} threshold
     * @param {PhalaParachainRuntimeRuntimeCallLike} proposal
     * @param {number} lengthBound
     **/
    propose: GenericTxCall<
      Rv,
      (
        threshold: number,
        proposal: PhalaParachainRuntimeRuntimeCallLike,
        lengthBound: number
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'TechnicalCommittee'
          palletCall: {
            name: 'Propose'
            params: { threshold: number; proposal: PhalaParachainRuntimeRuntimeCallLike; lengthBound: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::vote`].
     *
     * @param {H256} proposal
     * @param {number} index
     * @param {boolean} approve
     **/
    vote: GenericTxCall<
      Rv,
      (
        proposal: H256,
        index: number,
        approve: boolean
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'TechnicalCommittee'
          palletCall: {
            name: 'Vote'
            params: { proposal: H256; index: number; approve: boolean }
          }
        }
      >
    >

    /**
     * See [`Pallet::disapprove_proposal`].
     *
     * @param {H256} proposalHash
     **/
    disapproveProposal: GenericTxCall<
      Rv,
      (proposalHash: H256) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'TechnicalCommittee'
          palletCall: {
            name: 'DisapproveProposal'
            params: { proposalHash: H256 }
          }
        }
      >
    >

    /**
     * See [`Pallet::close`].
     *
     * @param {H256} proposalHash
     * @param {number} index
     * @param {SpWeightsWeightV2Weight} proposalWeightBound
     * @param {number} lengthBound
     **/
    close: GenericTxCall<
      Rv,
      (
        proposalHash: H256,
        index: number,
        proposalWeightBound: SpWeightsWeightV2Weight,
        lengthBound: number
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'TechnicalCommittee'
          palletCall: {
            name: 'Close'
            params: {
              proposalHash: H256
              index: number
              proposalWeightBound: SpWeightsWeightV2Weight
              lengthBound: number
            }
          }
        }
      >
    >

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>
  }
  /**
   * Pallet `TechnicalMembership`'s transaction calls
   **/
  technicalMembership: {
    /**
     * See [`Pallet::add_member`].
     *
     * @param {MultiAddressLike} who
     **/
    addMember: GenericTxCall<
      Rv,
      (who: MultiAddressLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'TechnicalMembership'
          palletCall: {
            name: 'AddMember'
            params: { who: MultiAddressLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::remove_member`].
     *
     * @param {MultiAddressLike} who
     **/
    removeMember: GenericTxCall<
      Rv,
      (who: MultiAddressLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'TechnicalMembership'
          palletCall: {
            name: 'RemoveMember'
            params: { who: MultiAddressLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::swap_member`].
     *
     * @param {MultiAddressLike} remove
     * @param {MultiAddressLike} add
     **/
    swapMember: GenericTxCall<
      Rv,
      (
        remove: MultiAddressLike,
        add: MultiAddressLike
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'TechnicalMembership'
          palletCall: {
            name: 'SwapMember'
            params: { remove: MultiAddressLike; add: MultiAddressLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::reset_members`].
     *
     * @param {Array<AccountId32Like>} members
     **/
    resetMembers: GenericTxCall<
      Rv,
      (members: Array<AccountId32Like>) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'TechnicalMembership'
          palletCall: {
            name: 'ResetMembers'
            params: { members: Array<AccountId32Like> }
          }
        }
      >
    >

    /**
     * See [`Pallet::change_key`].
     *
     * @param {MultiAddressLike} new_
     **/
    changeKey: GenericTxCall<
      Rv,
      (new_: MultiAddressLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'TechnicalMembership'
          palletCall: {
            name: 'ChangeKey'
            params: { new: MultiAddressLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::set_prime`].
     *
     * @param {MultiAddressLike} who
     **/
    setPrime: GenericTxCall<
      Rv,
      (who: MultiAddressLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'TechnicalMembership'
          palletCall: {
            name: 'SetPrime'
            params: { who: MultiAddressLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::clear_prime`].
     *
     **/
    clearPrime: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'TechnicalMembership'
          palletCall: {
            name: 'ClearPrime'
          }
        }
      >
    >

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>
  }
  /**
   * Pallet `PhragmenElection`'s transaction calls
   **/
  phragmenElection: {
    /**
     * See [`Pallet::vote`].
     *
     * @param {Array<AccountId32Like>} votes
     * @param {bigint} value
     **/
    vote: GenericTxCall<
      Rv,
      (
        votes: Array<AccountId32Like>,
        value: bigint
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhragmenElection'
          palletCall: {
            name: 'Vote'
            params: { votes: Array<AccountId32Like>; value: bigint }
          }
        }
      >
    >

    /**
     * See [`Pallet::remove_voter`].
     *
     **/
    removeVoter: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhragmenElection'
          palletCall: {
            name: 'RemoveVoter'
          }
        }
      >
    >

    /**
     * See [`Pallet::submit_candidacy`].
     *
     * @param {number} candidateCount
     **/
    submitCandidacy: GenericTxCall<
      Rv,
      (candidateCount: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhragmenElection'
          palletCall: {
            name: 'SubmitCandidacy'
            params: { candidateCount: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::renounce_candidacy`].
     *
     * @param {PalletElectionsPhragmenRenouncing} renouncing
     **/
    renounceCandidacy: GenericTxCall<
      Rv,
      (renouncing: PalletElectionsPhragmenRenouncing) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhragmenElection'
          palletCall: {
            name: 'RenounceCandidacy'
            params: { renouncing: PalletElectionsPhragmenRenouncing }
          }
        }
      >
    >

    /**
     * See [`Pallet::remove_member`].
     *
     * @param {MultiAddressLike} who
     * @param {boolean} slashBond
     * @param {boolean} rerunElection
     **/
    removeMember: GenericTxCall<
      Rv,
      (
        who: MultiAddressLike,
        slashBond: boolean,
        rerunElection: boolean
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhragmenElection'
          palletCall: {
            name: 'RemoveMember'
            params: { who: MultiAddressLike; slashBond: boolean; rerunElection: boolean }
          }
        }
      >
    >

    /**
     * See [`Pallet::clean_defunct_voters`].
     *
     * @param {number} numVoters
     * @param {number} numDefunct
     **/
    cleanDefunctVoters: GenericTxCall<
      Rv,
      (
        numVoters: number,
        numDefunct: number
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhragmenElection'
          palletCall: {
            name: 'CleanDefunctVoters'
            params: { numVoters: number; numDefunct: number }
          }
        }
      >
    >

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>
  }
  /**
   * Pallet `Tips`'s transaction calls
   **/
  tips: {
    /**
     * See [`Pallet::report_awesome`].
     *
     * @param {BytesLike} reason
     * @param {MultiAddressLike} who
     **/
    reportAwesome: GenericTxCall<
      Rv,
      (
        reason: BytesLike,
        who: MultiAddressLike
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Tips'
          palletCall: {
            name: 'ReportAwesome'
            params: { reason: BytesLike; who: MultiAddressLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::retract_tip`].
     *
     * @param {H256} hash
     **/
    retractTip: GenericTxCall<
      Rv,
      (hash: H256) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Tips'
          palletCall: {
            name: 'RetractTip'
            params: { hash: H256 }
          }
        }
      >
    >

    /**
     * See [`Pallet::tip_new`].
     *
     * @param {BytesLike} reason
     * @param {MultiAddressLike} who
     * @param {bigint} tipValue
     **/
    tipNew: GenericTxCall<
      Rv,
      (
        reason: BytesLike,
        who: MultiAddressLike,
        tipValue: bigint
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Tips'
          palletCall: {
            name: 'TipNew'
            params: { reason: BytesLike; who: MultiAddressLike; tipValue: bigint }
          }
        }
      >
    >

    /**
     * See [`Pallet::tip`].
     *
     * @param {H256} hash
     * @param {bigint} tipValue
     **/
    tip: GenericTxCall<
      Rv,
      (
        hash: H256,
        tipValue: bigint
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Tips'
          palletCall: {
            name: 'Tip'
            params: { hash: H256; tipValue: bigint }
          }
        }
      >
    >

    /**
     * See [`Pallet::close_tip`].
     *
     * @param {H256} hash
     **/
    closeTip: GenericTxCall<
      Rv,
      (hash: H256) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Tips'
          palletCall: {
            name: 'CloseTip'
            params: { hash: H256 }
          }
        }
      >
    >

    /**
     * See [`Pallet::slash_tip`].
     *
     * @param {H256} hash
     **/
    slashTip: GenericTxCall<
      Rv,
      (hash: H256) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Tips'
          palletCall: {
            name: 'SlashTip'
            params: { hash: H256 }
          }
        }
      >
    >

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>
  }
  /**
   * Pallet `ChildBounties`'s transaction calls
   **/
  childBounties: {
    /**
     * See [`Pallet::add_child_bounty`].
     *
     * @param {number} parentBountyId
     * @param {bigint} value
     * @param {BytesLike} description
     **/
    addChildBounty: GenericTxCall<
      Rv,
      (
        parentBountyId: number,
        value: bigint,
        description: BytesLike
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ChildBounties'
          palletCall: {
            name: 'AddChildBounty'
            params: { parentBountyId: number; value: bigint; description: BytesLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::propose_curator`].
     *
     * @param {number} parentBountyId
     * @param {number} childBountyId
     * @param {MultiAddressLike} curator
     * @param {bigint} fee
     **/
    proposeCurator: GenericTxCall<
      Rv,
      (
        parentBountyId: number,
        childBountyId: number,
        curator: MultiAddressLike,
        fee: bigint
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ChildBounties'
          palletCall: {
            name: 'ProposeCurator'
            params: { parentBountyId: number; childBountyId: number; curator: MultiAddressLike; fee: bigint }
          }
        }
      >
    >

    /**
     * See [`Pallet::accept_curator`].
     *
     * @param {number} parentBountyId
     * @param {number} childBountyId
     **/
    acceptCurator: GenericTxCall<
      Rv,
      (
        parentBountyId: number,
        childBountyId: number
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ChildBounties'
          palletCall: {
            name: 'AcceptCurator'
            params: { parentBountyId: number; childBountyId: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::unassign_curator`].
     *
     * @param {number} parentBountyId
     * @param {number} childBountyId
     **/
    unassignCurator: GenericTxCall<
      Rv,
      (
        parentBountyId: number,
        childBountyId: number
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ChildBounties'
          palletCall: {
            name: 'UnassignCurator'
            params: { parentBountyId: number; childBountyId: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::award_child_bounty`].
     *
     * @param {number} parentBountyId
     * @param {number} childBountyId
     * @param {MultiAddressLike} beneficiary
     **/
    awardChildBounty: GenericTxCall<
      Rv,
      (
        parentBountyId: number,
        childBountyId: number,
        beneficiary: MultiAddressLike
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ChildBounties'
          palletCall: {
            name: 'AwardChildBounty'
            params: { parentBountyId: number; childBountyId: number; beneficiary: MultiAddressLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::claim_child_bounty`].
     *
     * @param {number} parentBountyId
     * @param {number} childBountyId
     **/
    claimChildBounty: GenericTxCall<
      Rv,
      (
        parentBountyId: number,
        childBountyId: number
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ChildBounties'
          palletCall: {
            name: 'ClaimChildBounty'
            params: { parentBountyId: number; childBountyId: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::close_child_bounty`].
     *
     * @param {number} parentBountyId
     * @param {number} childBountyId
     **/
    closeChildBounty: GenericTxCall<
      Rv,
      (
        parentBountyId: number,
        childBountyId: number
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ChildBounties'
          palletCall: {
            name: 'CloseChildBounty'
            params: { parentBountyId: number; childBountyId: number }
          }
        }
      >
    >

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>
  }
  /**
   * Pallet `ChainBridge`'s transaction calls
   **/
  chainBridge: {
    /**
     * See [`Pallet::set_threshold`].
     *
     * @param {number} threshold
     **/
    setThreshold: GenericTxCall<
      Rv,
      (threshold: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ChainBridge'
          palletCall: {
            name: 'SetThreshold'
            params: { threshold: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::whitelist_chain`].
     *
     * @param {number} id
     **/
    whitelistChain: GenericTxCall<
      Rv,
      (id: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ChainBridge'
          palletCall: {
            name: 'WhitelistChain'
            params: { id: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::add_relayer`].
     *
     * @param {AccountId32Like} v
     **/
    addRelayer: GenericTxCall<
      Rv,
      (v: AccountId32Like) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ChainBridge'
          palletCall: {
            name: 'AddRelayer'
            params: { v: AccountId32Like }
          }
        }
      >
    >

    /**
     * See [`Pallet::remove_relayer`].
     *
     * @param {AccountId32Like} v
     **/
    removeRelayer: GenericTxCall<
      Rv,
      (v: AccountId32Like) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ChainBridge'
          palletCall: {
            name: 'RemoveRelayer'
            params: { v: AccountId32Like }
          }
        }
      >
    >

    /**
     * See [`Pallet::update_fee`].
     *
     * @param {bigint} fee
     * @param {number} destId
     **/
    updateFee: GenericTxCall<
      Rv,
      (
        fee: bigint,
        destId: number
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ChainBridge'
          palletCall: {
            name: 'UpdateFee'
            params: { fee: bigint; destId: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::acknowledge_proposal`].
     *
     * @param {bigint} nonce
     * @param {number} srcId
     * @param {FixedBytes<32>} rId
     * @param {PhalaParachainRuntimeRuntimeCallLike} call
     **/
    acknowledgeProposal: GenericTxCall<
      Rv,
      (
        nonce: bigint,
        srcId: number,
        rId: FixedBytes<32>,
        call: PhalaParachainRuntimeRuntimeCallLike
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ChainBridge'
          palletCall: {
            name: 'AcknowledgeProposal'
            params: { nonce: bigint; srcId: number; rId: FixedBytes<32>; call: PhalaParachainRuntimeRuntimeCallLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::reject_proposal`].
     *
     * @param {bigint} nonce
     * @param {number} srcId
     * @param {FixedBytes<32>} rId
     * @param {PhalaParachainRuntimeRuntimeCallLike} call
     **/
    rejectProposal: GenericTxCall<
      Rv,
      (
        nonce: bigint,
        srcId: number,
        rId: FixedBytes<32>,
        call: PhalaParachainRuntimeRuntimeCallLike
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ChainBridge'
          palletCall: {
            name: 'RejectProposal'
            params: { nonce: bigint; srcId: number; rId: FixedBytes<32>; call: PhalaParachainRuntimeRuntimeCallLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::eval_vote_state`].
     *
     * @param {bigint} nonce
     * @param {number} srcId
     * @param {PhalaParachainRuntimeRuntimeCallLike} prop
     **/
    evalVoteState: GenericTxCall<
      Rv,
      (
        nonce: bigint,
        srcId: number,
        prop: PhalaParachainRuntimeRuntimeCallLike
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ChainBridge'
          palletCall: {
            name: 'EvalVoteState'
            params: { nonce: bigint; srcId: number; prop: PhalaParachainRuntimeRuntimeCallLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::handle_fungible_transfer`].
     *
     * @param {BytesLike} dest
     * @param {bigint} amount
     * @param {FixedBytes<32>} rid
     **/
    handleFungibleTransfer: GenericTxCall<
      Rv,
      (
        dest: BytesLike,
        amount: bigint,
        rid: FixedBytes<32>
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'ChainBridge'
          palletCall: {
            name: 'HandleFungibleTransfer'
            params: { dest: BytesLike; amount: bigint; rid: FixedBytes<32> }
          }
        }
      >
    >

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>
  }
  /**
   * Pallet `XTransfer`'s transaction calls
   **/
  xTransfer: {
    /**
     * See [`Pallet::transfer`].
     *
     * @param {StagingXcmV3MultiassetMultiAsset} asset
     * @param {StagingXcmV3MultilocationMultiLocation} dest
     * @param {SpWeightsWeightV2Weight | undefined} destWeight
     **/
    transfer: GenericTxCall<
      Rv,
      (
        asset: StagingXcmV3MultiassetMultiAsset,
        dest: StagingXcmV3MultilocationMultiLocation,
        destWeight: SpWeightsWeightV2Weight | undefined
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'XTransfer'
          palletCall: {
            name: 'Transfer'
            params: {
              asset: StagingXcmV3MultiassetMultiAsset
              dest: StagingXcmV3MultilocationMultiLocation
              destWeight: SpWeightsWeightV2Weight | undefined
            }
          }
        }
      >
    >

    /**
     * See [`Pallet::transfer_generic`].
     *
     * @param {BytesLike} data
     * @param {StagingXcmV3MultilocationMultiLocation} dest
     * @param {SpWeightsWeightV2Weight | undefined} destWeight
     **/
    transferGeneric: GenericTxCall<
      Rv,
      (
        data: BytesLike,
        dest: StagingXcmV3MultilocationMultiLocation,
        destWeight: SpWeightsWeightV2Weight | undefined
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'XTransfer'
          palletCall: {
            name: 'TransferGeneric'
            params: {
              data: BytesLike
              dest: StagingXcmV3MultilocationMultiLocation
              destWeight: SpWeightsWeightV2Weight | undefined
            }
          }
        }
      >
    >

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>
  }
  /**
   * Pallet `AssetsRegistry`'s transaction calls
   **/
  assetsRegistry: {
    /**
     * See [`Pallet::force_withdraw_fund`].
     *
     * @param {number | undefined} assetId
     * @param {AccountId32Like} recipient
     * @param {bigint} amount
     **/
    forceWithdrawFund: GenericTxCall<
      Rv,
      (
        assetId: number | undefined,
        recipient: AccountId32Like,
        amount: bigint
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'AssetsRegistry'
          palletCall: {
            name: 'ForceWithdrawFund'
            params: { assetId: number | undefined; recipient: AccountId32Like; amount: bigint }
          }
        }
      >
    >

    /**
     * See [`Pallet::force_register_asset`].
     *
     * @param {StagingXcmV3MultilocationMultiLocation} location
     * @param {number} assetId
     * @param {AssetsRegistryAssetProperties} properties
     **/
    forceRegisterAsset: GenericTxCall<
      Rv,
      (
        location: StagingXcmV3MultilocationMultiLocation,
        assetId: number,
        properties: AssetsRegistryAssetProperties
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'AssetsRegistry'
          palletCall: {
            name: 'ForceRegisterAsset'
            params: {
              location: StagingXcmV3MultilocationMultiLocation
              assetId: number
              properties: AssetsRegistryAssetProperties
            }
          }
        }
      >
    >

    /**
     * See [`Pallet::force_unregister_asset`].
     *
     * @param {number} assetId
     **/
    forceUnregisterAsset: GenericTxCall<
      Rv,
      (assetId: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'AssetsRegistry'
          palletCall: {
            name: 'ForceUnregisterAsset'
            params: { assetId: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::force_set_metadata`].
     *
     * @param {number} assetId
     * @param {AssetsRegistryAssetProperties} properties
     **/
    forceSetMetadata: GenericTxCall<
      Rv,
      (
        assetId: number,
        properties: AssetsRegistryAssetProperties
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'AssetsRegistry'
          palletCall: {
            name: 'ForceSetMetadata'
            params: { assetId: number; properties: AssetsRegistryAssetProperties }
          }
        }
      >
    >

    /**
     * See [`Pallet::force_mint`].
     *
     * @param {number} assetId
     * @param {AccountId32Like} beneficiary
     * @param {bigint} amount
     **/
    forceMint: GenericTxCall<
      Rv,
      (
        assetId: number,
        beneficiary: AccountId32Like,
        amount: bigint
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'AssetsRegistry'
          palletCall: {
            name: 'ForceMint'
            params: { assetId: number; beneficiary: AccountId32Like; amount: bigint }
          }
        }
      >
    >

    /**
     * See [`Pallet::force_burn`].
     *
     * @param {number} assetId
     * @param {AccountId32Like} who
     * @param {bigint} amount
     **/
    forceBurn: GenericTxCall<
      Rv,
      (
        assetId: number,
        who: AccountId32Like,
        amount: bigint
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'AssetsRegistry'
          palletCall: {
            name: 'ForceBurn'
            params: { assetId: number; who: AccountId32Like; amount: bigint }
          }
        }
      >
    >

    /**
     * See [`Pallet::force_set_price`].
     *
     * @param {number} assetId
     * @param {bigint} executionPrice
     **/
    forceSetPrice: GenericTxCall<
      Rv,
      (
        assetId: number,
        executionPrice: bigint
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'AssetsRegistry'
          palletCall: {
            name: 'ForceSetPrice'
            params: { assetId: number; executionPrice: bigint }
          }
        }
      >
    >

    /**
     * See [`Pallet::force_set_location`].
     *
     * @param {number} assetId
     * @param {StagingXcmV3MultilocationMultiLocation} location
     **/
    forceSetLocation: GenericTxCall<
      Rv,
      (
        assetId: number,
        location: StagingXcmV3MultilocationMultiLocation
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'AssetsRegistry'
          palletCall: {
            name: 'ForceSetLocation'
            params: { assetId: number; location: StagingXcmV3MultilocationMultiLocation }
          }
        }
      >
    >

    /**
     * See [`Pallet::force_enable_chainbridge`].
     *
     * @param {number} assetId
     * @param {number} chainId
     * @param {boolean} isMintable
     * @param {BytesLike} metadata
     **/
    forceEnableChainbridge: GenericTxCall<
      Rv,
      (
        assetId: number,
        chainId: number,
        isMintable: boolean,
        metadata: BytesLike
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'AssetsRegistry'
          palletCall: {
            name: 'ForceEnableChainbridge'
            params: { assetId: number; chainId: number; isMintable: boolean; metadata: BytesLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::force_disable_chainbridge`].
     *
     * @param {number} assetId
     * @param {number} chainId
     **/
    forceDisableChainbridge: GenericTxCall<
      Rv,
      (
        assetId: number,
        chainId: number
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'AssetsRegistry'
          palletCall: {
            name: 'ForceDisableChainbridge'
            params: { assetId: number; chainId: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::force_enable_sygmabridge`].
     *
     * @param {number} assetId
     * @param {FixedBytes<32>} resourceId
     * @param {number} domainId
     * @param {boolean} isMintable
     * @param {BytesLike} metadata
     **/
    forceEnableSygmabridge: GenericTxCall<
      Rv,
      (
        assetId: number,
        resourceId: FixedBytes<32>,
        domainId: number,
        isMintable: boolean,
        metadata: BytesLike
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'AssetsRegistry'
          palletCall: {
            name: 'ForceEnableSygmabridge'
            params: {
              assetId: number
              resourceId: FixedBytes<32>
              domainId: number
              isMintable: boolean
              metadata: BytesLike
            }
          }
        }
      >
    >

    /**
     * See [`Pallet::force_disable_sygmabridge`].
     *
     * @param {number} assetId
     * @param {FixedBytes<32>} resourceId
     * @param {number} domainId
     **/
    forceDisableSygmabridge: GenericTxCall<
      Rv,
      (
        assetId: number,
        resourceId: FixedBytes<32>,
        domainId: number
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'AssetsRegistry'
          palletCall: {
            name: 'ForceDisableSygmabridge'
            params: { assetId: number; resourceId: FixedBytes<32>; domainId: number }
          }
        }
      >
    >

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>
  }
  /**
   * Pallet `PhalaMq`'s transaction calls
   **/
  phalaMq: {
    /**
     * See [`Pallet::sync_offchain_message`].
     *
     * @param {PhalaMqSignedMessage} signedMessage
     **/
    syncOffchainMessage: GenericTxCall<
      Rv,
      (signedMessage: PhalaMqSignedMessage) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaMq'
          palletCall: {
            name: 'SyncOffchainMessage'
            params: { signedMessage: PhalaMqSignedMessage }
          }
        }
      >
    >

    /**
     * See [`Pallet::push_message`].
     *
     * @param {BytesLike} destination
     * @param {BytesLike} payload
     **/
    pushMessage: GenericTxCall<
      Rv,
      (
        destination: BytesLike,
        payload: BytesLike
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaMq'
          palletCall: {
            name: 'PushMessage'
            params: { destination: BytesLike; payload: BytesLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::force_push_pallet_message`].
     *
     * @param {BytesLike} destination
     * @param {BytesLike} payload
     **/
    forcePushPalletMessage: GenericTxCall<
      Rv,
      (
        destination: BytesLike,
        payload: BytesLike
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaMq'
          palletCall: {
            name: 'ForcePushPalletMessage'
            params: { destination: BytesLike; payload: BytesLike }
          }
        }
      >
    >

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>
  }
  /**
   * Pallet `PhalaRegistry`'s transaction calls
   **/
  phalaRegistry: {
    /**
     * See [`Pallet::force_set_benchmark_duration`].
     *
     * @param {number} value
     **/
    forceSetBenchmarkDuration: GenericTxCall<
      Rv,
      (value: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaRegistry'
          palletCall: {
            name: 'ForceSetBenchmarkDuration'
            params: { value: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::force_register_worker`].
     *
     * @param {SpCoreSr25519Public} pubkey
     * @param {SpCoreSr25519Public} ecdhPubkey
     * @param {AccountId32Like | undefined} operator
     **/
    forceRegisterWorker: GenericTxCall<
      Rv,
      (
        pubkey: SpCoreSr25519Public,
        ecdhPubkey: SpCoreSr25519Public,
        operator: AccountId32Like | undefined
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaRegistry'
          palletCall: {
            name: 'ForceRegisterWorker'
            params: {
              pubkey: SpCoreSr25519Public
              ecdhPubkey: SpCoreSr25519Public
              operator: AccountId32Like | undefined
            }
          }
        }
      >
    >

    /**
     * See [`Pallet::force_register_topic_pubkey`].
     *
     * @param {BytesLike} topic
     * @param {BytesLike} pubkey
     **/
    forceRegisterTopicPubkey: GenericTxCall<
      Rv,
      (
        topic: BytesLike,
        pubkey: BytesLike
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaRegistry'
          palletCall: {
            name: 'ForceRegisterTopicPubkey'
            params: { topic: BytesLike; pubkey: BytesLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::register_gatekeeper`].
     *
     * @param {SpCoreSr25519Public} gatekeeper
     **/
    registerGatekeeper: GenericTxCall<
      Rv,
      (gatekeeper: SpCoreSr25519Public) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaRegistry'
          palletCall: {
            name: 'RegisterGatekeeper'
            params: { gatekeeper: SpCoreSr25519Public }
          }
        }
      >
    >

    /**
     * See [`Pallet::unregister_gatekeeper`].
     *
     * @param {SpCoreSr25519Public} gatekeeper
     **/
    unregisterGatekeeper: GenericTxCall<
      Rv,
      (gatekeeper: SpCoreSr25519Public) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaRegistry'
          palletCall: {
            name: 'UnregisterGatekeeper'
            params: { gatekeeper: SpCoreSr25519Public }
          }
        }
      >
    >

    /**
     * See [`Pallet::rotate_master_key`].
     *
     **/
    rotateMasterKey: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaRegistry'
          palletCall: {
            name: 'RotateMasterKey'
          }
        }
      >
    >

    /**
     * See [`Pallet::register_worker`].
     *
     * @param {PhalaTypesWorkerRegistrationInfo} pruntimeInfo
     * @param {PhalaPalletsUtilsAttestationLegacyAttestation} attestation
     **/
    registerWorker: GenericTxCall<
      Rv,
      (
        pruntimeInfo: PhalaTypesWorkerRegistrationInfo,
        attestation: PhalaPalletsUtilsAttestationLegacyAttestation
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaRegistry'
          palletCall: {
            name: 'RegisterWorker'
            params: {
              pruntimeInfo: PhalaTypesWorkerRegistrationInfo
              attestation: PhalaPalletsUtilsAttestationLegacyAttestation
            }
          }
        }
      >
    >

    /**
     * See [`Pallet::register_worker_v2`].
     *
     * @param {PhalaTypesWorkerRegistrationInfoV2} pruntimeInfo
     * @param {PhalaTypesAttestationReport | undefined} attestation
     **/
    registerWorkerV2: GenericTxCall<
      Rv,
      (
        pruntimeInfo: PhalaTypesWorkerRegistrationInfoV2,
        attestation: PhalaTypesAttestationReport | undefined
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaRegistry'
          palletCall: {
            name: 'RegisterWorkerV2'
            params: {
              pruntimeInfo: PhalaTypesWorkerRegistrationInfoV2
              attestation: PhalaTypesAttestationReport | undefined
            }
          }
        }
      >
    >

    /**
     * See [`Pallet::update_worker_endpoint`].
     *
     * @param {PhalaTypesWorkerEndpointPayload} endpointPayload
     * @param {BytesLike} signature
     **/
    updateWorkerEndpoint: GenericTxCall<
      Rv,
      (
        endpointPayload: PhalaTypesWorkerEndpointPayload,
        signature: BytesLike
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaRegistry'
          palletCall: {
            name: 'UpdateWorkerEndpoint'
            params: { endpointPayload: PhalaTypesWorkerEndpointPayload; signature: BytesLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::add_pruntime`].
     *
     * @param {BytesLike} pruntimeHash
     **/
    addPruntime: GenericTxCall<
      Rv,
      (pruntimeHash: BytesLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaRegistry'
          palletCall: {
            name: 'AddPruntime'
            params: { pruntimeHash: BytesLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::remove_pruntime`].
     *
     * @param {BytesLike} pruntimeHash
     **/
    removePruntime: GenericTxCall<
      Rv,
      (pruntimeHash: BytesLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaRegistry'
          palletCall: {
            name: 'RemovePruntime'
            params: { pruntimeHash: BytesLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::add_relaychain_genesis_block_hash`].
     *
     * @param {H256} genesisBlockHash
     **/
    addRelaychainGenesisBlockHash: GenericTxCall<
      Rv,
      (genesisBlockHash: H256) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaRegistry'
          palletCall: {
            name: 'AddRelaychainGenesisBlockHash'
            params: { genesisBlockHash: H256 }
          }
        }
      >
    >

    /**
     * See [`Pallet::remove_relaychain_genesis_block_hash`].
     *
     * @param {H256} genesisBlockHash
     **/
    removeRelaychainGenesisBlockHash: GenericTxCall<
      Rv,
      (genesisBlockHash: H256) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaRegistry'
          palletCall: {
            name: 'RemoveRelaychainGenesisBlockHash'
            params: { genesisBlockHash: H256 }
          }
        }
      >
    >

    /**
     * See [`Pallet::set_minimum_pruntime_version`].
     *
     * @param {number} major
     * @param {number} minor
     * @param {number} patch
     **/
    setMinimumPruntimeVersion: GenericTxCall<
      Rv,
      (
        major: number,
        minor: number,
        patch: number
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaRegistry'
          palletCall: {
            name: 'SetMinimumPruntimeVersion'
            params: { major: number; minor: number; patch: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::set_pruntime_consensus_version`].
     *
     * @param {number} version
     **/
    setPruntimeConsensusVersion: GenericTxCall<
      Rv,
      (version: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaRegistry'
          palletCall: {
            name: 'SetPruntimeConsensusVersion'
            params: { version: number }
          }
        }
      >
    >

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>
  }
  /**
   * Pallet `PhalaComputation`'s transaction calls
   **/
  phalaComputation: {
    /**
     * See [`Pallet::set_cool_down_expiration`].
     *
     * @param {bigint} period
     **/
    setCoolDownExpiration: GenericTxCall<
      Rv,
      (period: bigint) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaComputation'
          palletCall: {
            name: 'SetCoolDownExpiration'
            params: { period: bigint }
          }
        }
      >
    >

    /**
     * See [`Pallet::unbind`].
     *
     * @param {AccountId32Like} session
     **/
    unbind: GenericTxCall<
      Rv,
      (session: AccountId32Like) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaComputation'
          palletCall: {
            name: 'Unbind'
            params: { session: AccountId32Like }
          }
        }
      >
    >

    /**
     * See [`Pallet::force_heartbeat`].
     *
     **/
    forceHeartbeat: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaComputation'
          palletCall: {
            name: 'ForceHeartbeat'
          }
        }
      >
    >

    /**
     * See [`Pallet::force_start_computing`].
     *
     * @param {AccountId32Like} session
     * @param {bigint} stake
     **/
    forceStartComputing: GenericTxCall<
      Rv,
      (
        session: AccountId32Like,
        stake: bigint
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaComputation'
          palletCall: {
            name: 'ForceStartComputing'
            params: { session: AccountId32Like; stake: bigint }
          }
        }
      >
    >

    /**
     * See [`Pallet::force_stop_computing`].
     *
     * @param {AccountId32Like} session
     **/
    forceStopComputing: GenericTxCall<
      Rv,
      (session: AccountId32Like) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaComputation'
          palletCall: {
            name: 'ForceStopComputing'
            params: { session: AccountId32Like }
          }
        }
      >
    >

    /**
     * See [`Pallet::update_tokenomic`].
     *
     * @param {PhalaTypesMessagingTokenomicParameters} newParams
     **/
    updateTokenomic: GenericTxCall<
      Rv,
      (newParams: PhalaTypesMessagingTokenomicParameters) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaComputation'
          palletCall: {
            name: 'UpdateTokenomic'
            params: { newParams: PhalaTypesMessagingTokenomicParameters }
          }
        }
      >
    >

    /**
     * See [`Pallet::set_heartbeat_paused`].
     *
     * @param {boolean} paused
     **/
    setHeartbeatPaused: GenericTxCall<
      Rv,
      (paused: boolean) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaComputation'
          palletCall: {
            name: 'SetHeartbeatPaused'
            params: { paused: boolean }
          }
        }
      >
    >

    /**
     * See [`Pallet::set_budget_per_block`].
     *
     * @param {bigint} nonce
     * @param {number} blockNumber
     * @param {bigint} budget
     **/
    setBudgetPerBlock: GenericTxCall<
      Rv,
      (
        nonce: bigint,
        blockNumber: number,
        budget: bigint
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaComputation'
          palletCall: {
            name: 'SetBudgetPerBlock'
            params: { nonce: bigint; blockNumber: number; budget: bigint }
          }
        }
      >
    >

    /**
     * See [`Pallet::update_contract_root`].
     *
     * @param {AccountId32Like} accountId
     **/
    updateContractRoot: GenericTxCall<
      Rv,
      (accountId: AccountId32Like) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaComputation'
          palletCall: {
            name: 'UpdateContractRoot'
            params: { accountId: AccountId32Like }
          }
        }
      >
    >

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>
  }
  /**
   * Pallet `PhalaStakePoolv2`'s transaction calls
   **/
  phalaStakePoolv2: {
    /**
     * See [`Pallet::create`].
     *
     **/
    create: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaStakePoolv2'
          palletCall: {
            name: 'Create'
          }
        }
      >
    >

    /**
     * See [`Pallet::add_worker`].
     *
     * @param {bigint} pid
     * @param {SpCoreSr25519Public} pubkey
     **/
    addWorker: GenericTxCall<
      Rv,
      (
        pid: bigint,
        pubkey: SpCoreSr25519Public
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaStakePoolv2'
          palletCall: {
            name: 'AddWorker'
            params: { pid: bigint; pubkey: SpCoreSr25519Public }
          }
        }
      >
    >

    /**
     * See [`Pallet::remove_worker`].
     *
     * @param {bigint} pid
     * @param {SpCoreSr25519Public} worker
     **/
    removeWorker: GenericTxCall<
      Rv,
      (
        pid: bigint,
        worker: SpCoreSr25519Public
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaStakePoolv2'
          palletCall: {
            name: 'RemoveWorker'
            params: { pid: bigint; worker: SpCoreSr25519Public }
          }
        }
      >
    >

    /**
     * See [`Pallet::set_cap`].
     *
     * @param {bigint} pid
     * @param {bigint} cap
     **/
    setCap: GenericTxCall<
      Rv,
      (
        pid: bigint,
        cap: bigint
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaStakePoolv2'
          palletCall: {
            name: 'SetCap'
            params: { pid: bigint; cap: bigint }
          }
        }
      >
    >

    /**
     * See [`Pallet::set_payout_pref`].
     *
     * @param {bigint} pid
     * @param {Permill | undefined} payoutCommission
     **/
    setPayoutPref: GenericTxCall<
      Rv,
      (
        pid: bigint,
        payoutCommission: Permill | undefined
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaStakePoolv2'
          palletCall: {
            name: 'SetPayoutPref'
            params: { pid: bigint; payoutCommission: Permill | undefined }
          }
        }
      >
    >

    /**
     * See [`Pallet::claim_legacy_rewards`].
     *
     * @param {bigint} pid
     * @param {AccountId32Like} target
     **/
    claimLegacyRewards: GenericTxCall<
      Rv,
      (
        pid: bigint,
        target: AccountId32Like
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaStakePoolv2'
          palletCall: {
            name: 'ClaimLegacyRewards'
            params: { pid: bigint; target: AccountId32Like }
          }
        }
      >
    >

    /**
     * See [`Pallet::claim_owner_rewards`].
     *
     * @param {bigint} pid
     * @param {AccountId32Like} target
     **/
    claimOwnerRewards: GenericTxCall<
      Rv,
      (
        pid: bigint,
        target: AccountId32Like
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaStakePoolv2'
          palletCall: {
            name: 'ClaimOwnerRewards'
            params: { pid: bigint; target: AccountId32Like }
          }
        }
      >
    >

    /**
     * See [`Pallet::check_and_maybe_force_withdraw`].
     *
     * @param {bigint} pid
     **/
    checkAndMaybeForceWithdraw: GenericTxCall<
      Rv,
      (pid: bigint) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaStakePoolv2'
          palletCall: {
            name: 'CheckAndMaybeForceWithdraw'
            params: { pid: bigint }
          }
        }
      >
    >

    /**
     * See [`Pallet::contribute`].
     *
     * @param {bigint} pid
     * @param {bigint} amount
     * @param {bigint | undefined} asVault
     **/
    contribute: GenericTxCall<
      Rv,
      (
        pid: bigint,
        amount: bigint,
        asVault: bigint | undefined
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaStakePoolv2'
          palletCall: {
            name: 'Contribute'
            params: { pid: bigint; amount: bigint; asVault: bigint | undefined }
          }
        }
      >
    >

    /**
     * See [`Pallet::withdraw`].
     *
     * @param {bigint} pid
     * @param {bigint} shares
     * @param {bigint | undefined} asVault
     **/
    withdraw: GenericTxCall<
      Rv,
      (
        pid: bigint,
        shares: bigint,
        asVault: bigint | undefined
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaStakePoolv2'
          palletCall: {
            name: 'Withdraw'
            params: { pid: bigint; shares: bigint; asVault: bigint | undefined }
          }
        }
      >
    >

    /**
     * See [`Pallet::start_computing`].
     *
     * @param {bigint} pid
     * @param {SpCoreSr25519Public} worker
     * @param {bigint} stake
     **/
    startComputing: GenericTxCall<
      Rv,
      (
        pid: bigint,
        worker: SpCoreSr25519Public,
        stake: bigint
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaStakePoolv2'
          palletCall: {
            name: 'StartComputing'
            params: { pid: bigint; worker: SpCoreSr25519Public; stake: bigint }
          }
        }
      >
    >

    /**
     * See [`Pallet::stop_computing`].
     *
     * @param {bigint} pid
     * @param {SpCoreSr25519Public} worker
     **/
    stopComputing: GenericTxCall<
      Rv,
      (
        pid: bigint,
        worker: SpCoreSr25519Public
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaStakePoolv2'
          palletCall: {
            name: 'StopComputing'
            params: { pid: bigint; worker: SpCoreSr25519Public }
          }
        }
      >
    >

    /**
     * See [`Pallet::reclaim_pool_worker`].
     *
     * @param {bigint} pid
     * @param {SpCoreSr25519Public} worker
     **/
    reclaimPoolWorker: GenericTxCall<
      Rv,
      (
        pid: bigint,
        worker: SpCoreSr25519Public
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaStakePoolv2'
          palletCall: {
            name: 'ReclaimPoolWorker'
            params: { pid: bigint; worker: SpCoreSr25519Public }
          }
        }
      >
    >

    /**
     * See [`Pallet::restart_computing`].
     *
     * @param {bigint} pid
     * @param {SpCoreSr25519Public} worker
     * @param {bigint} stake
     **/
    restartComputing: GenericTxCall<
      Rv,
      (
        pid: bigint,
        worker: SpCoreSr25519Public,
        stake: bigint
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaStakePoolv2'
          palletCall: {
            name: 'RestartComputing'
            params: { pid: bigint; worker: SpCoreSr25519Public; stake: bigint }
          }
        }
      >
    >

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>
  }
  /**
   * Pallet `PhalaVault`'s transaction calls
   **/
  phalaVault: {
    /**
     * See [`Pallet::create`].
     *
     **/
    create: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaVault'
          palletCall: {
            name: 'Create'
          }
        }
      >
    >

    /**
     * See [`Pallet::set_payout_pref`].
     *
     * @param {bigint} pid
     * @param {Permill | undefined} payoutCommission
     **/
    setPayoutPref: GenericTxCall<
      Rv,
      (
        pid: bigint,
        payoutCommission: Permill | undefined
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaVault'
          palletCall: {
            name: 'SetPayoutPref'
            params: { pid: bigint; payoutCommission: Permill | undefined }
          }
        }
      >
    >

    /**
     * See [`Pallet::claim_owner_shares`].
     *
     * @param {bigint} vaultPid
     * @param {AccountId32Like} target
     * @param {bigint} shares
     **/
    claimOwnerShares: GenericTxCall<
      Rv,
      (
        vaultPid: bigint,
        target: AccountId32Like,
        shares: bigint
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaVault'
          palletCall: {
            name: 'ClaimOwnerShares'
            params: { vaultPid: bigint; target: AccountId32Like; shares: bigint }
          }
        }
      >
    >

    /**
     * See [`Pallet::maybe_gain_owner_shares`].
     *
     * @param {bigint} vaultPid
     **/
    maybeGainOwnerShares: GenericTxCall<
      Rv,
      (vaultPid: bigint) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaVault'
          palletCall: {
            name: 'MaybeGainOwnerShares'
            params: { vaultPid: bigint }
          }
        }
      >
    >

    /**
     * See [`Pallet::check_and_maybe_force_withdraw`].
     *
     * @param {bigint} vaultPid
     **/
    checkAndMaybeForceWithdraw: GenericTxCall<
      Rv,
      (vaultPid: bigint) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaVault'
          palletCall: {
            name: 'CheckAndMaybeForceWithdraw'
            params: { vaultPid: bigint }
          }
        }
      >
    >

    /**
     * See [`Pallet::contribute`].
     *
     * @param {bigint} pid
     * @param {bigint} amount
     **/
    contribute: GenericTxCall<
      Rv,
      (
        pid: bigint,
        amount: bigint
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaVault'
          palletCall: {
            name: 'Contribute'
            params: { pid: bigint; amount: bigint }
          }
        }
      >
    >

    /**
     * See [`Pallet::withdraw`].
     *
     * @param {bigint} pid
     * @param {bigint} shares
     **/
    withdraw: GenericTxCall<
      Rv,
      (
        pid: bigint,
        shares: bigint
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaVault'
          palletCall: {
            name: 'Withdraw'
            params: { pid: bigint; shares: bigint }
          }
        }
      >
    >

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>
  }
  /**
   * Pallet `PhalaWrappedBalances`'s transaction calls
   **/
  phalaWrappedBalances: {
    /**
     * See [`Pallet::wrap`].
     *
     * @param {bigint} amount
     **/
    wrap: GenericTxCall<
      Rv,
      (amount: bigint) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaWrappedBalances'
          palletCall: {
            name: 'Wrap'
            params: { amount: bigint }
          }
        }
      >
    >

    /**
     * See [`Pallet::unwrap_all`].
     *
     **/
    unwrapAll: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaWrappedBalances'
          palletCall: {
            name: 'UnwrapAll'
          }
        }
      >
    >

    /**
     * See [`Pallet::unwrap`].
     *
     * @param {bigint} amount
     **/
    unwrap: GenericTxCall<
      Rv,
      (amount: bigint) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaWrappedBalances'
          palletCall: {
            name: 'Unwrap'
            params: { amount: bigint }
          }
        }
      >
    >

    /**
     * See [`Pallet::vote`].
     *
     * @param {bigint} ayeAmount
     * @param {bigint} nayAmount
     * @param {number} voteId
     **/
    vote: GenericTxCall<
      Rv,
      (
        ayeAmount: bigint,
        nayAmount: bigint,
        voteId: number
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaWrappedBalances'
          palletCall: {
            name: 'Vote'
            params: { ayeAmount: bigint; nayAmount: bigint; voteId: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::unlock`].
     *
     * @param {number} voteId
     * @param {number} maxIterations
     **/
    unlock: GenericTxCall<
      Rv,
      (
        voteId: number,
        maxIterations: number
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaWrappedBalances'
          palletCall: {
            name: 'Unlock'
            params: { voteId: number; maxIterations: number }
          }
        }
      >
    >

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>
  }
  /**
   * Pallet `PhalaBasePool`'s transaction calls
   **/
  phalaBasePool: {
    /**
     * See [`Pallet::add_staker_to_whitelist`].
     *
     * @param {bigint} pid
     * @param {AccountId32Like} staker
     **/
    addStakerToWhitelist: GenericTxCall<
      Rv,
      (
        pid: bigint,
        staker: AccountId32Like
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaBasePool'
          palletCall: {
            name: 'AddStakerToWhitelist'
            params: { pid: bigint; staker: AccountId32Like }
          }
        }
      >
    >

    /**
     * See [`Pallet::set_pool_description`].
     *
     * @param {bigint} pid
     * @param {BytesLike} description
     **/
    setPoolDescription: GenericTxCall<
      Rv,
      (
        pid: bigint,
        description: BytesLike
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaBasePool'
          palletCall: {
            name: 'SetPoolDescription'
            params: { pid: bigint; description: BytesLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::remove_staker_from_whitelist`].
     *
     * @param {bigint} pid
     * @param {AccountId32Like} staker
     **/
    removeStakerFromWhitelist: GenericTxCall<
      Rv,
      (
        pid: bigint,
        staker: AccountId32Like
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaBasePool'
          palletCall: {
            name: 'RemoveStakerFromWhitelist'
            params: { pid: bigint; staker: AccountId32Like }
          }
        }
      >
    >

    /**
     * See [`Pallet::claim_reimbursement`].
     *
     * @param {bigint} pid
     * @param {AccountId32Like} target
     **/
    claimReimbursement: GenericTxCall<
      Rv,
      (
        pid: bigint,
        target: AccountId32Like
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaBasePool'
          palletCall: {
            name: 'ClaimReimbursement'
            params: { pid: bigint; target: AccountId32Like }
          }
        }
      >
    >

    /**
     * See [`Pallet::set_reimbursements`].
     *
     * @param {Array<[AccountId32Like, bigint, bigint]>} input
     * @param {boolean} add
     **/
    setReimbursements: GenericTxCall<
      Rv,
      (
        input: Array<[AccountId32Like, bigint, bigint]>,
        add: boolean
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaBasePool'
          palletCall: {
            name: 'SetReimbursements'
            params: { input: Array<[AccountId32Like, bigint, bigint]>; add: boolean }
          }
        }
      >
    >

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>
  }
  /**
   * Pallet `PhalaPhatContracts`'s transaction calls
   **/
  phalaPhatContracts: {
    /**
     * See [`Pallet::add_cluster`].
     *
     * @param {AccountId32Like} owner
     * @param {PhalaTypesContractClusterPermission} permission
     * @param {Array<SpCoreSr25519Public>} deployWorkers
     * @param {bigint} deposit
     * @param {bigint} gasPrice
     * @param {bigint} depositPerItem
     * @param {bigint} depositPerByte
     * @param {AccountId32Like} treasuryAccount
     **/
    addCluster: GenericTxCall<
      Rv,
      (
        owner: AccountId32Like,
        permission: PhalaTypesContractClusterPermission,
        deployWorkers: Array<SpCoreSr25519Public>,
        deposit: bigint,
        gasPrice: bigint,
        depositPerItem: bigint,
        depositPerByte: bigint,
        treasuryAccount: AccountId32Like
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaPhatContracts'
          palletCall: {
            name: 'AddCluster'
            params: {
              owner: AccountId32Like
              permission: PhalaTypesContractClusterPermission
              deployWorkers: Array<SpCoreSr25519Public>
              deposit: bigint
              gasPrice: bigint
              depositPerItem: bigint
              depositPerByte: bigint
              treasuryAccount: AccountId32Like
            }
          }
        }
      >
    >

    /**
     * See [`Pallet::cluster_upload_resource`].
     *
     * @param {H256} clusterId
     * @param {PhalaTypesContractMessagingResourceType} resourceType
     * @param {BytesLike} resourceData
     **/
    clusterUploadResource: GenericTxCall<
      Rv,
      (
        clusterId: H256,
        resourceType: PhalaTypesContractMessagingResourceType,
        resourceData: BytesLike
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaPhatContracts'
          palletCall: {
            name: 'ClusterUploadResource'
            params: { clusterId: H256; resourceType: PhalaTypesContractMessagingResourceType; resourceData: BytesLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::transfer_to_cluster`].
     *
     * @param {bigint} amount
     * @param {H256} clusterId
     * @param {AccountId32Like} destAccount
     **/
    transferToCluster: GenericTxCall<
      Rv,
      (
        amount: bigint,
        clusterId: H256,
        destAccount: AccountId32Like
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaPhatContracts'
          palletCall: {
            name: 'TransferToCluster'
            params: { amount: bigint; clusterId: H256; destAccount: AccountId32Like }
          }
        }
      >
    >

    /**
     * See [`Pallet::push_contract_message`].
     *
     * @param {H256} contractId
     * @param {BytesLike} payload
     * @param {bigint} deposit
     **/
    pushContractMessage: GenericTxCall<
      Rv,
      (
        contractId: H256,
        payload: BytesLike,
        deposit: bigint
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaPhatContracts'
          palletCall: {
            name: 'PushContractMessage'
            params: { contractId: H256; payload: BytesLike; deposit: bigint }
          }
        }
      >
    >

    /**
     * See [`Pallet::instantiate_contract`].
     *
     * @param {PhalaTypesContractCodeIndex} codeIndex
     * @param {BytesLike} data
     * @param {BytesLike} salt
     * @param {H256} clusterId
     * @param {bigint} transfer
     * @param {bigint} gasLimit
     * @param {bigint | undefined} storageDepositLimit
     * @param {bigint} deposit
     **/
    instantiateContract: GenericTxCall<
      Rv,
      (
        codeIndex: PhalaTypesContractCodeIndex,
        data: BytesLike,
        salt: BytesLike,
        clusterId: H256,
        transfer: bigint,
        gasLimit: bigint,
        storageDepositLimit: bigint | undefined,
        deposit: bigint
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaPhatContracts'
          palletCall: {
            name: 'InstantiateContract'
            params: {
              codeIndex: PhalaTypesContractCodeIndex
              data: BytesLike
              salt: BytesLike
              clusterId: H256
              transfer: bigint
              gasLimit: bigint
              storageDepositLimit: bigint | undefined
              deposit: bigint
            }
          }
        }
      >
    >

    /**
     * See [`Pallet::cluster_destroy`].
     *
     * @param {H256} cluster
     **/
    clusterDestroy: GenericTxCall<
      Rv,
      (cluster: H256) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaPhatContracts'
          palletCall: {
            name: 'ClusterDestroy'
            params: { cluster: H256 }
          }
        }
      >
    >

    /**
     * See [`Pallet::set_pink_system_code`].
     *
     * @param {BytesLike} code
     **/
    setPinkSystemCode: GenericTxCall<
      Rv,
      (code: BytesLike) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaPhatContracts'
          palletCall: {
            name: 'SetPinkSystemCode'
            params: { code: BytesLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::set_pink_runtime_version`].
     *
     * @param {[number, number]} version
     **/
    setPinkRuntimeVersion: GenericTxCall<
      Rv,
      (version: [number, number]) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaPhatContracts'
          palletCall: {
            name: 'SetPinkRuntimeVersion'
            params: { version: [number, number] }
          }
        }
      >
    >

    /**
     * See [`Pallet::add_worker_to_cluster`].
     *
     * @param {SpCoreSr25519Public} workerPubkey
     * @param {H256} clusterId
     **/
    addWorkerToCluster: GenericTxCall<
      Rv,
      (
        workerPubkey: SpCoreSr25519Public,
        clusterId: H256
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaPhatContracts'
          palletCall: {
            name: 'AddWorkerToCluster'
            params: { workerPubkey: SpCoreSr25519Public; clusterId: H256 }
          }
        }
      >
    >

    /**
     * See [`Pallet::remove_worker_from_cluster`].
     *
     * @param {SpCoreSr25519Public} workerPubkey
     * @param {H256} clusterId
     **/
    removeWorkerFromCluster: GenericTxCall<
      Rv,
      (
        workerPubkey: SpCoreSr25519Public,
        clusterId: H256
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaPhatContracts'
          palletCall: {
            name: 'RemoveWorkerFromCluster'
            params: { workerPubkey: SpCoreSr25519Public; clusterId: H256 }
          }
        }
      >
    >

    /**
     * See [`Pallet::cleanup_removed_workers`].
     *
     * @param {H256} clusterId
     **/
    cleanupRemovedWorkers: GenericTxCall<
      Rv,
      (clusterId: H256) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaPhatContracts'
          palletCall: {
            name: 'CleanupRemovedWorkers'
            params: { clusterId: H256 }
          }
        }
      >
    >

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>
  }
  /**
   * Pallet `PhalaPhatTokenomic`'s transaction calls
   **/
  phalaPhatTokenomic: {
    /**
     * See [`Pallet::adjust_stake`].
     *
     * @param {H256} contract
     * @param {bigint} amount
     **/
    adjustStake: GenericTxCall<
      Rv,
      (
        contract: H256,
        amount: bigint
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PhalaPhatTokenomic'
          palletCall: {
            name: 'AdjustStake'
            params: { contract: H256; amount: bigint }
          }
        }
      >
    >

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>
  }
  /**
   * Pallet `Uniques`'s transaction calls
   **/
  uniques: {
    /**
     * See [`Pallet::create`].
     *
     * @param {number} collection
     * @param {MultiAddressLike} admin
     **/
    create: GenericTxCall<
      Rv,
      (
        collection: number,
        admin: MultiAddressLike
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Uniques'
          palletCall: {
            name: 'Create'
            params: { collection: number; admin: MultiAddressLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::force_create`].
     *
     * @param {number} collection
     * @param {MultiAddressLike} owner
     * @param {boolean} freeHolding
     **/
    forceCreate: GenericTxCall<
      Rv,
      (
        collection: number,
        owner: MultiAddressLike,
        freeHolding: boolean
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Uniques'
          palletCall: {
            name: 'ForceCreate'
            params: { collection: number; owner: MultiAddressLike; freeHolding: boolean }
          }
        }
      >
    >

    /**
     * See [`Pallet::destroy`].
     *
     * @param {number} collection
     * @param {PalletUniquesDestroyWitness} witness
     **/
    destroy: GenericTxCall<
      Rv,
      (
        collection: number,
        witness: PalletUniquesDestroyWitness
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Uniques'
          palletCall: {
            name: 'Destroy'
            params: { collection: number; witness: PalletUniquesDestroyWitness }
          }
        }
      >
    >

    /**
     * See [`Pallet::mint`].
     *
     * @param {number} collection
     * @param {number} item
     * @param {MultiAddressLike} owner
     **/
    mint: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
        owner: MultiAddressLike
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Uniques'
          palletCall: {
            name: 'Mint'
            params: { collection: number; item: number; owner: MultiAddressLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::burn`].
     *
     * @param {number} collection
     * @param {number} item
     * @param {MultiAddressLike | undefined} checkOwner
     **/
    burn: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
        checkOwner: MultiAddressLike | undefined
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Uniques'
          palletCall: {
            name: 'Burn'
            params: { collection: number; item: number; checkOwner: MultiAddressLike | undefined }
          }
        }
      >
    >

    /**
     * See [`Pallet::transfer`].
     *
     * @param {number} collection
     * @param {number} item
     * @param {MultiAddressLike} dest
     **/
    transfer: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
        dest: MultiAddressLike
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Uniques'
          palletCall: {
            name: 'Transfer'
            params: { collection: number; item: number; dest: MultiAddressLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::redeposit`].
     *
     * @param {number} collection
     * @param {Array<number>} items
     **/
    redeposit: GenericTxCall<
      Rv,
      (
        collection: number,
        items: Array<number>
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Uniques'
          palletCall: {
            name: 'Redeposit'
            params: { collection: number; items: Array<number> }
          }
        }
      >
    >

    /**
     * See [`Pallet::freeze`].
     *
     * @param {number} collection
     * @param {number} item
     **/
    freeze: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Uniques'
          palletCall: {
            name: 'Freeze'
            params: { collection: number; item: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::thaw`].
     *
     * @param {number} collection
     * @param {number} item
     **/
    thaw: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Uniques'
          palletCall: {
            name: 'Thaw'
            params: { collection: number; item: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::freeze_collection`].
     *
     * @param {number} collection
     **/
    freezeCollection: GenericTxCall<
      Rv,
      (collection: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Uniques'
          palletCall: {
            name: 'FreezeCollection'
            params: { collection: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::thaw_collection`].
     *
     * @param {number} collection
     **/
    thawCollection: GenericTxCall<
      Rv,
      (collection: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Uniques'
          palletCall: {
            name: 'ThawCollection'
            params: { collection: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::transfer_ownership`].
     *
     * @param {number} collection
     * @param {MultiAddressLike} owner
     **/
    transferOwnership: GenericTxCall<
      Rv,
      (
        collection: number,
        owner: MultiAddressLike
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Uniques'
          palletCall: {
            name: 'TransferOwnership'
            params: { collection: number; owner: MultiAddressLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::set_team`].
     *
     * @param {number} collection
     * @param {MultiAddressLike} issuer
     * @param {MultiAddressLike} admin
     * @param {MultiAddressLike} freezer
     **/
    setTeam: GenericTxCall<
      Rv,
      (
        collection: number,
        issuer: MultiAddressLike,
        admin: MultiAddressLike,
        freezer: MultiAddressLike
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Uniques'
          palletCall: {
            name: 'SetTeam'
            params: { collection: number; issuer: MultiAddressLike; admin: MultiAddressLike; freezer: MultiAddressLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::approve_transfer`].
     *
     * @param {number} collection
     * @param {number} item
     * @param {MultiAddressLike} delegate
     **/
    approveTransfer: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
        delegate: MultiAddressLike
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Uniques'
          palletCall: {
            name: 'ApproveTransfer'
            params: { collection: number; item: number; delegate: MultiAddressLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::cancel_approval`].
     *
     * @param {number} collection
     * @param {number} item
     * @param {MultiAddressLike | undefined} maybeCheckDelegate
     **/
    cancelApproval: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
        maybeCheckDelegate: MultiAddressLike | undefined
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Uniques'
          palletCall: {
            name: 'CancelApproval'
            params: { collection: number; item: number; maybeCheckDelegate: MultiAddressLike | undefined }
          }
        }
      >
    >

    /**
     * See [`Pallet::force_item_status`].
     *
     * @param {number} collection
     * @param {MultiAddressLike} owner
     * @param {MultiAddressLike} issuer
     * @param {MultiAddressLike} admin
     * @param {MultiAddressLike} freezer
     * @param {boolean} freeHolding
     * @param {boolean} isFrozen
     **/
    forceItemStatus: GenericTxCall<
      Rv,
      (
        collection: number,
        owner: MultiAddressLike,
        issuer: MultiAddressLike,
        admin: MultiAddressLike,
        freezer: MultiAddressLike,
        freeHolding: boolean,
        isFrozen: boolean
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Uniques'
          palletCall: {
            name: 'ForceItemStatus'
            params: {
              collection: number
              owner: MultiAddressLike
              issuer: MultiAddressLike
              admin: MultiAddressLike
              freezer: MultiAddressLike
              freeHolding: boolean
              isFrozen: boolean
            }
          }
        }
      >
    >

    /**
     * See [`Pallet::set_attribute`].
     *
     * @param {number} collection
     * @param {number | undefined} maybeItem
     * @param {BytesLike} key
     * @param {BytesLike} value
     **/
    setAttribute: GenericTxCall<
      Rv,
      (
        collection: number,
        maybeItem: number | undefined,
        key: BytesLike,
        value: BytesLike
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Uniques'
          palletCall: {
            name: 'SetAttribute'
            params: { collection: number; maybeItem: number | undefined; key: BytesLike; value: BytesLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::clear_attribute`].
     *
     * @param {number} collection
     * @param {number | undefined} maybeItem
     * @param {BytesLike} key
     **/
    clearAttribute: GenericTxCall<
      Rv,
      (
        collection: number,
        maybeItem: number | undefined,
        key: BytesLike
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Uniques'
          palletCall: {
            name: 'ClearAttribute'
            params: { collection: number; maybeItem: number | undefined; key: BytesLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::set_metadata`].
     *
     * @param {number} collection
     * @param {number} item
     * @param {BytesLike} data
     * @param {boolean} isFrozen
     **/
    setMetadata: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
        data: BytesLike,
        isFrozen: boolean
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Uniques'
          palletCall: {
            name: 'SetMetadata'
            params: { collection: number; item: number; data: BytesLike; isFrozen: boolean }
          }
        }
      >
    >

    /**
     * See [`Pallet::clear_metadata`].
     *
     * @param {number} collection
     * @param {number} item
     **/
    clearMetadata: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Uniques'
          palletCall: {
            name: 'ClearMetadata'
            params: { collection: number; item: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::set_collection_metadata`].
     *
     * @param {number} collection
     * @param {BytesLike} data
     * @param {boolean} isFrozen
     **/
    setCollectionMetadata: GenericTxCall<
      Rv,
      (
        collection: number,
        data: BytesLike,
        isFrozen: boolean
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Uniques'
          palletCall: {
            name: 'SetCollectionMetadata'
            params: { collection: number; data: BytesLike; isFrozen: boolean }
          }
        }
      >
    >

    /**
     * See [`Pallet::clear_collection_metadata`].
     *
     * @param {number} collection
     **/
    clearCollectionMetadata: GenericTxCall<
      Rv,
      (collection: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Uniques'
          palletCall: {
            name: 'ClearCollectionMetadata'
            params: { collection: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::set_accept_ownership`].
     *
     * @param {number | undefined} maybeCollection
     **/
    setAcceptOwnership: GenericTxCall<
      Rv,
      (maybeCollection: number | undefined) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Uniques'
          palletCall: {
            name: 'SetAcceptOwnership'
            params: { maybeCollection: number | undefined }
          }
        }
      >
    >

    /**
     * See [`Pallet::set_collection_max_supply`].
     *
     * @param {number} collection
     * @param {number} maxSupply
     **/
    setCollectionMaxSupply: GenericTxCall<
      Rv,
      (
        collection: number,
        maxSupply: number
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Uniques'
          palletCall: {
            name: 'SetCollectionMaxSupply'
            params: { collection: number; maxSupply: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::set_price`].
     *
     * @param {number} collection
     * @param {number} item
     * @param {bigint | undefined} price
     * @param {MultiAddressLike | undefined} whitelistedBuyer
     **/
    setPrice: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
        price: bigint | undefined,
        whitelistedBuyer: MultiAddressLike | undefined
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Uniques'
          palletCall: {
            name: 'SetPrice'
            params: {
              collection: number
              item: number
              price: bigint | undefined
              whitelistedBuyer: MultiAddressLike | undefined
            }
          }
        }
      >
    >

    /**
     * See [`Pallet::buy_item`].
     *
     * @param {number} collection
     * @param {number} item
     * @param {bigint} bidPrice
     **/
    buyItem: GenericTxCall<
      Rv,
      (
        collection: number,
        item: number,
        bidPrice: bigint
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'Uniques'
          palletCall: {
            name: 'BuyItem'
            params: { collection: number; item: number; bidPrice: bigint }
          }
        }
      >
    >

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>
  }
  /**
   * Pallet `RmrkCore`'s transaction calls
   **/
  rmrkCore: {
    /**
     * See [`Pallet::mint_nft`].
     *
     * @param {AccountId32Like | undefined} owner
     * @param {number} nftId
     * @param {number} collectionId
     * @param {AccountId32Like | undefined} royaltyRecipient
     * @param {Permill | undefined} royalty
     * @param {BytesLike} metadata
     * @param {boolean} transferable
     * @param {Array<RmrkTraitsResourceResourceInfoMin> | undefined} resources
     **/
    mintNft: GenericTxCall<
      Rv,
      (
        owner: AccountId32Like | undefined,
        nftId: number,
        collectionId: number,
        royaltyRecipient: AccountId32Like | undefined,
        royalty: Permill | undefined,
        metadata: BytesLike,
        transferable: boolean,
        resources: Array<RmrkTraitsResourceResourceInfoMin> | undefined
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'RmrkCore'
          palletCall: {
            name: 'MintNft'
            params: {
              owner: AccountId32Like | undefined
              nftId: number
              collectionId: number
              royaltyRecipient: AccountId32Like | undefined
              royalty: Permill | undefined
              metadata: BytesLike
              transferable: boolean
              resources: Array<RmrkTraitsResourceResourceInfoMin> | undefined
            }
          }
        }
      >
    >

    /**
     * See [`Pallet::mint_nft_directly_to_nft`].
     *
     * @param {[number, number]} owner
     * @param {number} nftId
     * @param {number} collectionId
     * @param {AccountId32Like | undefined} royaltyRecipient
     * @param {Permill | undefined} royalty
     * @param {BytesLike} metadata
     * @param {boolean} transferable
     * @param {Array<RmrkTraitsResourceResourceInfoMin> | undefined} resources
     **/
    mintNftDirectlyToNft: GenericTxCall<
      Rv,
      (
        owner: [number, number],
        nftId: number,
        collectionId: number,
        royaltyRecipient: AccountId32Like | undefined,
        royalty: Permill | undefined,
        metadata: BytesLike,
        transferable: boolean,
        resources: Array<RmrkTraitsResourceResourceInfoMin> | undefined
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'RmrkCore'
          palletCall: {
            name: 'MintNftDirectlyToNft'
            params: {
              owner: [number, number]
              nftId: number
              collectionId: number
              royaltyRecipient: AccountId32Like | undefined
              royalty: Permill | undefined
              metadata: BytesLike
              transferable: boolean
              resources: Array<RmrkTraitsResourceResourceInfoMin> | undefined
            }
          }
        }
      >
    >

    /**
     * See [`Pallet::create_collection`].
     *
     * @param {number} collectionId
     * @param {BytesLike} metadata
     * @param {number | undefined} max
     * @param {BytesLike} symbol
     **/
    createCollection: GenericTxCall<
      Rv,
      (
        collectionId: number,
        metadata: BytesLike,
        max: number | undefined,
        symbol: BytesLike
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'RmrkCore'
          palletCall: {
            name: 'CreateCollection'
            params: { collectionId: number; metadata: BytesLike; max: number | undefined; symbol: BytesLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::burn_nft`].
     *
     * @param {number} collectionId
     * @param {number} nftId
     **/
    burnNft: GenericTxCall<
      Rv,
      (
        collectionId: number,
        nftId: number
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'RmrkCore'
          palletCall: {
            name: 'BurnNft'
            params: { collectionId: number; nftId: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::destroy_collection`].
     *
     * @param {number} collectionId
     **/
    destroyCollection: GenericTxCall<
      Rv,
      (collectionId: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'RmrkCore'
          palletCall: {
            name: 'DestroyCollection'
            params: { collectionId: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::send`].
     *
     * @param {number} collectionId
     * @param {number} nftId
     * @param {RmrkTraitsNftAccountIdOrCollectionNftTuple} newOwner
     **/
    send: GenericTxCall<
      Rv,
      (
        collectionId: number,
        nftId: number,
        newOwner: RmrkTraitsNftAccountIdOrCollectionNftTuple
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'RmrkCore'
          palletCall: {
            name: 'Send'
            params: { collectionId: number; nftId: number; newOwner: RmrkTraitsNftAccountIdOrCollectionNftTuple }
          }
        }
      >
    >

    /**
     * See [`Pallet::accept_nft`].
     *
     * @param {number} collectionId
     * @param {number} nftId
     * @param {RmrkTraitsNftAccountIdOrCollectionNftTuple} newOwner
     **/
    acceptNft: GenericTxCall<
      Rv,
      (
        collectionId: number,
        nftId: number,
        newOwner: RmrkTraitsNftAccountIdOrCollectionNftTuple
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'RmrkCore'
          palletCall: {
            name: 'AcceptNft'
            params: { collectionId: number; nftId: number; newOwner: RmrkTraitsNftAccountIdOrCollectionNftTuple }
          }
        }
      >
    >

    /**
     * See [`Pallet::reject_nft`].
     *
     * @param {number} collectionId
     * @param {number} nftId
     **/
    rejectNft: GenericTxCall<
      Rv,
      (
        collectionId: number,
        nftId: number
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'RmrkCore'
          palletCall: {
            name: 'RejectNft'
            params: { collectionId: number; nftId: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::change_collection_issuer`].
     *
     * @param {number} collectionId
     * @param {MultiAddressLike} newIssuer
     **/
    changeCollectionIssuer: GenericTxCall<
      Rv,
      (
        collectionId: number,
        newIssuer: MultiAddressLike
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'RmrkCore'
          palletCall: {
            name: 'ChangeCollectionIssuer'
            params: { collectionId: number; newIssuer: MultiAddressLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::set_property`].
     *
     * @param {number} collectionId
     * @param {number | undefined} maybeNftId
     * @param {BytesLike} key
     * @param {BytesLike} value
     **/
    setProperty: GenericTxCall<
      Rv,
      (
        collectionId: number,
        maybeNftId: number | undefined,
        key: BytesLike,
        value: BytesLike
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'RmrkCore'
          palletCall: {
            name: 'SetProperty'
            params: { collectionId: number; maybeNftId: number | undefined; key: BytesLike; value: BytesLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::lock_collection`].
     *
     * @param {number} collectionId
     **/
    lockCollection: GenericTxCall<
      Rv,
      (collectionId: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'RmrkCore'
          palletCall: {
            name: 'LockCollection'
            params: { collectionId: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::add_basic_resource`].
     *
     * @param {number} collectionId
     * @param {number} nftId
     * @param {RmrkTraitsResourceBasicResource} resource
     * @param {number} resourceId
     **/
    addBasicResource: GenericTxCall<
      Rv,
      (
        collectionId: number,
        nftId: number,
        resource: RmrkTraitsResourceBasicResource,
        resourceId: number
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'RmrkCore'
          palletCall: {
            name: 'AddBasicResource'
            params: {
              collectionId: number
              nftId: number
              resource: RmrkTraitsResourceBasicResource
              resourceId: number
            }
          }
        }
      >
    >

    /**
     * See [`Pallet::add_composable_resource`].
     *
     * @param {number} collectionId
     * @param {number} nftId
     * @param {RmrkTraitsResourceComposableResource} resource
     * @param {number} resourceId
     **/
    addComposableResource: GenericTxCall<
      Rv,
      (
        collectionId: number,
        nftId: number,
        resource: RmrkTraitsResourceComposableResource,
        resourceId: number
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'RmrkCore'
          palletCall: {
            name: 'AddComposableResource'
            params: {
              collectionId: number
              nftId: number
              resource: RmrkTraitsResourceComposableResource
              resourceId: number
            }
          }
        }
      >
    >

    /**
     * See [`Pallet::add_slot_resource`].
     *
     * @param {number} collectionId
     * @param {number} nftId
     * @param {RmrkTraitsResourceSlotResource} resource
     * @param {number} resourceId
     **/
    addSlotResource: GenericTxCall<
      Rv,
      (
        collectionId: number,
        nftId: number,
        resource: RmrkTraitsResourceSlotResource,
        resourceId: number
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'RmrkCore'
          palletCall: {
            name: 'AddSlotResource'
            params: {
              collectionId: number
              nftId: number
              resource: RmrkTraitsResourceSlotResource
              resourceId: number
            }
          }
        }
      >
    >

    /**
     * See [`Pallet::replace_resource`].
     *
     * @param {number} collectionId
     * @param {number} nftId
     * @param {RmrkTraitsResourceResourceTypes} resource
     * @param {number} resourceId
     **/
    replaceResource: GenericTxCall<
      Rv,
      (
        collectionId: number,
        nftId: number,
        resource: RmrkTraitsResourceResourceTypes,
        resourceId: number
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'RmrkCore'
          palletCall: {
            name: 'ReplaceResource'
            params: {
              collectionId: number
              nftId: number
              resource: RmrkTraitsResourceResourceTypes
              resourceId: number
            }
          }
        }
      >
    >

    /**
     * See [`Pallet::accept_resource`].
     *
     * @param {number} collectionId
     * @param {number} nftId
     * @param {number} resourceId
     **/
    acceptResource: GenericTxCall<
      Rv,
      (
        collectionId: number,
        nftId: number,
        resourceId: number
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'RmrkCore'
          palletCall: {
            name: 'AcceptResource'
            params: { collectionId: number; nftId: number; resourceId: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::remove_resource`].
     *
     * @param {number} collectionId
     * @param {number} nftId
     * @param {number} resourceId
     **/
    removeResource: GenericTxCall<
      Rv,
      (
        collectionId: number,
        nftId: number,
        resourceId: number
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'RmrkCore'
          palletCall: {
            name: 'RemoveResource'
            params: { collectionId: number; nftId: number; resourceId: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::accept_resource_removal`].
     *
     * @param {number} collectionId
     * @param {number} nftId
     * @param {number} resourceId
     **/
    acceptResourceRemoval: GenericTxCall<
      Rv,
      (
        collectionId: number,
        nftId: number,
        resourceId: number
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'RmrkCore'
          palletCall: {
            name: 'AcceptResourceRemoval'
            params: { collectionId: number; nftId: number; resourceId: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::set_priority`].
     *
     * @param {number} collectionId
     * @param {number} nftId
     * @param {Array<number>} priorities
     **/
    setPriority: GenericTxCall<
      Rv,
      (
        collectionId: number,
        nftId: number,
        priorities: Array<number>
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'RmrkCore'
          palletCall: {
            name: 'SetPriority'
            params: { collectionId: number; nftId: number; priorities: Array<number> }
          }
        }
      >
    >

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>
  }
  /**
   * Pallet `RmrkEquip`'s transaction calls
   **/
  rmrkEquip: {
    /**
     * See [`Pallet::change_base_issuer`].
     *
     * @param {number} baseId
     * @param {MultiAddressLike} newIssuer
     **/
    changeBaseIssuer: GenericTxCall<
      Rv,
      (
        baseId: number,
        newIssuer: MultiAddressLike
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'RmrkEquip'
          palletCall: {
            name: 'ChangeBaseIssuer'
            params: { baseId: number; newIssuer: MultiAddressLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::equip`].
     *
     * @param {[number, number]} item
     * @param {[number, number]} equipper
     * @param {number} resourceId
     * @param {number} base
     * @param {number} slot
     **/
    equip: GenericTxCall<
      Rv,
      (
        item: [number, number],
        equipper: [number, number],
        resourceId: number,
        base: number,
        slot: number
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'RmrkEquip'
          palletCall: {
            name: 'Equip'
            params: {
              item: [number, number]
              equipper: [number, number]
              resourceId: number
              base: number
              slot: number
            }
          }
        }
      >
    >

    /**
     * See [`Pallet::unequip`].
     *
     * @param {[number, number]} item
     * @param {[number, number]} unequipper
     * @param {number} base
     * @param {number} slot
     **/
    unequip: GenericTxCall<
      Rv,
      (
        item: [number, number],
        unequipper: [number, number],
        base: number,
        slot: number
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'RmrkEquip'
          palletCall: {
            name: 'Unequip'
            params: { item: [number, number]; unequipper: [number, number]; base: number; slot: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::equippable`].
     *
     * @param {number} baseId
     * @param {number} slotId
     * @param {RmrkTraitsPartEquippableList} equippables
     **/
    equippable: GenericTxCall<
      Rv,
      (
        baseId: number,
        slotId: number,
        equippables: RmrkTraitsPartEquippableList
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'RmrkEquip'
          palletCall: {
            name: 'Equippable'
            params: { baseId: number; slotId: number; equippables: RmrkTraitsPartEquippableList }
          }
        }
      >
    >

    /**
     * See [`Pallet::equippable_add`].
     *
     * @param {number} baseId
     * @param {number} slotId
     * @param {number} equippable
     **/
    equippableAdd: GenericTxCall<
      Rv,
      (
        baseId: number,
        slotId: number,
        equippable: number
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'RmrkEquip'
          palletCall: {
            name: 'EquippableAdd'
            params: { baseId: number; slotId: number; equippable: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::equippable_remove`].
     *
     * @param {number} baseId
     * @param {number} slotId
     * @param {number} equippable
     **/
    equippableRemove: GenericTxCall<
      Rv,
      (
        baseId: number,
        slotId: number,
        equippable: number
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'RmrkEquip'
          palletCall: {
            name: 'EquippableRemove'
            params: { baseId: number; slotId: number; equippable: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::theme_add`].
     *
     * @param {number} baseId
     * @param {RmrkTraitsTheme} theme
     **/
    themeAdd: GenericTxCall<
      Rv,
      (
        baseId: number,
        theme: RmrkTraitsTheme
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'RmrkEquip'
          palletCall: {
            name: 'ThemeAdd'
            params: { baseId: number; theme: RmrkTraitsTheme }
          }
        }
      >
    >

    /**
     * See [`Pallet::create_base`].
     *
     * @param {BytesLike} baseType
     * @param {BytesLike} symbol
     * @param {Array<RmrkTraitsPartPartType>} parts
     **/
    createBase: GenericTxCall<
      Rv,
      (
        baseType: BytesLike,
        symbol: BytesLike,
        parts: Array<RmrkTraitsPartPartType>
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'RmrkEquip'
          palletCall: {
            name: 'CreateBase'
            params: { baseType: BytesLike; symbol: BytesLike; parts: Array<RmrkTraitsPartPartType> }
          }
        }
      >
    >

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>
  }
  /**
   * Pallet `RmrkMarket`'s transaction calls
   **/
  rmrkMarket: {
    /**
     * See [`Pallet::buy`].
     *
     * @param {number} collectionId
     * @param {number} nftId
     * @param {bigint | undefined} amount
     **/
    buy: GenericTxCall<
      Rv,
      (
        collectionId: number,
        nftId: number,
        amount: bigint | undefined
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'RmrkMarket'
          palletCall: {
            name: 'Buy'
            params: { collectionId: number; nftId: number; amount: bigint | undefined }
          }
        }
      >
    >

    /**
     * See [`Pallet::list`].
     *
     * @param {number} collectionId
     * @param {number} nftId
     * @param {bigint} amount
     * @param {number | undefined} expires
     **/
    list: GenericTxCall<
      Rv,
      (
        collectionId: number,
        nftId: number,
        amount: bigint,
        expires: number | undefined
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'RmrkMarket'
          palletCall: {
            name: 'List'
            params: { collectionId: number; nftId: number; amount: bigint; expires: number | undefined }
          }
        }
      >
    >

    /**
     * See [`Pallet::unlist`].
     *
     * @param {number} collectionId
     * @param {number} nftId
     **/
    unlist: GenericTxCall<
      Rv,
      (
        collectionId: number,
        nftId: number
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'RmrkMarket'
          palletCall: {
            name: 'Unlist'
            params: { collectionId: number; nftId: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::make_offer`].
     *
     * @param {number} collectionId
     * @param {number} nftId
     * @param {bigint} amount
     * @param {number | undefined} expires
     **/
    makeOffer: GenericTxCall<
      Rv,
      (
        collectionId: number,
        nftId: number,
        amount: bigint,
        expires: number | undefined
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'RmrkMarket'
          palletCall: {
            name: 'MakeOffer'
            params: { collectionId: number; nftId: number; amount: bigint; expires: number | undefined }
          }
        }
      >
    >

    /**
     * See [`Pallet::withdraw_offer`].
     *
     * @param {number} collectionId
     * @param {number} nftId
     **/
    withdrawOffer: GenericTxCall<
      Rv,
      (
        collectionId: number,
        nftId: number
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'RmrkMarket'
          palletCall: {
            name: 'WithdrawOffer'
            params: { collectionId: number; nftId: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::accept_offer`].
     *
     * @param {number} collectionId
     * @param {number} nftId
     * @param {AccountId32Like} offerer
     **/
    acceptOffer: GenericTxCall<
      Rv,
      (
        collectionId: number,
        nftId: number,
        offerer: AccountId32Like
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'RmrkMarket'
          palletCall: {
            name: 'AcceptOffer'
            params: { collectionId: number; nftId: number; offerer: AccountId32Like }
          }
        }
      >
    >

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>
  }
  /**
   * Pallet `SygmaAccessSegregator`'s transaction calls
   **/
  sygmaAccessSegregator: {
    /**
     * See [`Pallet::grant_access`].
     *
     * @param {number} palletIndex
     * @param {BytesLike} extrinsicName
     * @param {AccountId32Like} who
     **/
    grantAccess: GenericTxCall<
      Rv,
      (
        palletIndex: number,
        extrinsicName: BytesLike,
        who: AccountId32Like
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'SygmaAccessSegregator'
          palletCall: {
            name: 'GrantAccess'
            params: { palletIndex: number; extrinsicName: BytesLike; who: AccountId32Like }
          }
        }
      >
    >

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>
  }
  /**
   * Pallet `SygmaBasicFeeHandler`'s transaction calls
   **/
  sygmaBasicFeeHandler: {
    /**
     * See [`Pallet::set_fee`].
     *
     * @param {number} domain
     * @param {StagingXcmV3MultiassetAssetId} asset
     * @param {bigint} amount
     **/
    setFee: GenericTxCall<
      Rv,
      (
        domain: number,
        asset: StagingXcmV3MultiassetAssetId,
        amount: bigint
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'SygmaBasicFeeHandler'
          palletCall: {
            name: 'SetFee'
            params: { domain: number; asset: StagingXcmV3MultiassetAssetId; amount: bigint }
          }
        }
      >
    >

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>
  }
  /**
   * Pallet `SygmaBridge`'s transaction calls
   **/
  sygmaBridge: {
    /**
     * See [`Pallet::pause_bridge`].
     *
     * @param {number} destDomainId
     **/
    pauseBridge: GenericTxCall<
      Rv,
      (destDomainId: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'SygmaBridge'
          palletCall: {
            name: 'PauseBridge'
            params: { destDomainId: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::unpause_bridge`].
     *
     * @param {number} destDomainId
     **/
    unpauseBridge: GenericTxCall<
      Rv,
      (destDomainId: number) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'SygmaBridge'
          palletCall: {
            name: 'UnpauseBridge'
            params: { destDomainId: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::set_mpc_address`].
     *
     * @param {SygmaTraitsMpcAddress} addr
     **/
    setMpcAddress: GenericTxCall<
      Rv,
      (addr: SygmaTraitsMpcAddress) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'SygmaBridge'
          palletCall: {
            name: 'SetMpcAddress'
            params: { addr: SygmaTraitsMpcAddress }
          }
        }
      >
    >

    /**
     * See [`Pallet::register_domain`].
     *
     * @param {number} destDomainId
     * @param {U256} destChainId
     **/
    registerDomain: GenericTxCall<
      Rv,
      (
        destDomainId: number,
        destChainId: U256
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'SygmaBridge'
          palletCall: {
            name: 'RegisterDomain'
            params: { destDomainId: number; destChainId: U256 }
          }
        }
      >
    >

    /**
     * See [`Pallet::unregister_domain`].
     *
     * @param {number} destDomainId
     * @param {U256} destChainId
     **/
    unregisterDomain: GenericTxCall<
      Rv,
      (
        destDomainId: number,
        destChainId: U256
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'SygmaBridge'
          palletCall: {
            name: 'UnregisterDomain'
            params: { destDomainId: number; destChainId: U256 }
          }
        }
      >
    >

    /**
     * See [`Pallet::deposit`].
     *
     * @param {StagingXcmV3MultiassetMultiAsset} asset
     * @param {StagingXcmV3MultilocationMultiLocation} dest
     **/
    deposit: GenericTxCall<
      Rv,
      (
        asset: StagingXcmV3MultiassetMultiAsset,
        dest: StagingXcmV3MultilocationMultiLocation
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'SygmaBridge'
          palletCall: {
            name: 'Deposit'
            params: { asset: StagingXcmV3MultiassetMultiAsset; dest: StagingXcmV3MultilocationMultiLocation }
          }
        }
      >
    >

    /**
     * See [`Pallet::retry`].
     *
     * @param {bigint} depositOnBlockHeight
     * @param {number} destDomainId
     **/
    retry: GenericTxCall<
      Rv,
      (
        depositOnBlockHeight: bigint,
        destDomainId: number
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'SygmaBridge'
          palletCall: {
            name: 'Retry'
            params: { depositOnBlockHeight: bigint; destDomainId: number }
          }
        }
      >
    >

    /**
     * See [`Pallet::execute_proposal`].
     *
     * @param {Array<SygmaBridgeProposal>} proposals
     * @param {BytesLike} signature
     **/
    executeProposal: GenericTxCall<
      Rv,
      (
        proposals: Array<SygmaBridgeProposal>,
        signature: BytesLike
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'SygmaBridge'
          palletCall: {
            name: 'ExecuteProposal'
            params: { proposals: Array<SygmaBridgeProposal>; signature: BytesLike }
          }
        }
      >
    >

    /**
     * See [`Pallet::pause_all_bridges`].
     *
     **/
    pauseAllBridges: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'SygmaBridge'
          palletCall: {
            name: 'PauseAllBridges'
          }
        }
      >
    >

    /**
     * See [`Pallet::unpause_all_bridges`].
     *
     **/
    unpauseAllBridges: GenericTxCall<
      Rv,
      () => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'SygmaBridge'
          palletCall: {
            name: 'UnpauseAllBridges'
          }
        }
      >
    >

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>
  }
  /**
   * Pallet `SygmaFeeHandlerRouter`'s transaction calls
   **/
  sygmaFeeHandlerRouter: {
    /**
     * See [`Pallet::set_fee_handler`].
     *
     * @param {number} domain
     * @param {StagingXcmV3MultiassetAssetId} asset
     * @param {SygmaFeeHandlerRouterFeeHandlerType} handlerType
     **/
    setFeeHandler: GenericTxCall<
      Rv,
      (
        domain: number,
        asset: StagingXcmV3MultiassetAssetId,
        handlerType: SygmaFeeHandlerRouterFeeHandlerType
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'SygmaFeeHandlerRouter'
          palletCall: {
            name: 'SetFeeHandler'
            params: {
              domain: number
              asset: StagingXcmV3MultiassetAssetId
              handlerType: SygmaFeeHandlerRouterFeeHandlerType
            }
          }
        }
      >
    >

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>
  }
  /**
   * Pallet `SygmaPercentageFeeHandler`'s transaction calls
   **/
  sygmaPercentageFeeHandler: {
    /**
     * See [`Pallet::set_fee_rate`].
     *
     * @param {number} domain
     * @param {StagingXcmV3MultiassetAssetId} asset
     * @param {number} feeRateBasisPoint
     * @param {bigint} feeLowerBound
     * @param {bigint} feeUpperBound
     **/
    setFeeRate: GenericTxCall<
      Rv,
      (
        domain: number,
        asset: StagingXcmV3MultiassetAssetId,
        feeRateBasisPoint: number,
        feeLowerBound: bigint,
        feeUpperBound: bigint
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'SygmaPercentageFeeHandler'
          palletCall: {
            name: 'SetFeeRate'
            params: {
              domain: number
              asset: StagingXcmV3MultiassetAssetId
              feeRateBasisPoint: number
              feeLowerBound: bigint
              feeUpperBound: bigint
            }
          }
        }
      >
    >

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>
  }
  /**
   * Pallet `PalletIndex`'s transaction calls
   **/
  palletIndex: {
    /**
     * See [`Pallet::force_add_worker`].
     *
     * @param {AccountId32Like} worker
     **/
    forceAddWorker: GenericTxCall<
      Rv,
      (worker: AccountId32Like) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PalletIndex'
          palletCall: {
            name: 'ForceAddWorker'
            params: { worker: AccountId32Like }
          }
        }
      >
    >

    /**
     * See [`Pallet::force_remove_worker`].
     *
     * @param {AccountId32Like} worker
     **/
    forceRemoveWorker: GenericTxCall<
      Rv,
      (worker: AccountId32Like) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PalletIndex'
          palletCall: {
            name: 'ForceRemoveWorker'
            params: { worker: AccountId32Like }
          }
        }
      >
    >

    /**
     * See [`Pallet::deposit_task`].
     *
     * @param {StagingXcmV3MultiassetAssetId} asset
     * @param {bigint} amount
     * @param {BytesLike} recipient
     * @param {AccountId32Like} worker
     * @param {FixedBytes<32>} taskId
     * @param {BytesLike} task
     **/
    depositTask: GenericTxCall<
      Rv,
      (
        asset: StagingXcmV3MultiassetAssetId,
        amount: bigint,
        recipient: BytesLike,
        worker: AccountId32Like,
        taskId: FixedBytes<32>,
        task: BytesLike
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PalletIndex'
          palletCall: {
            name: 'DepositTask'
            params: {
              asset: StagingXcmV3MultiassetAssetId
              amount: bigint
              recipient: BytesLike
              worker: AccountId32Like
              taskId: FixedBytes<32>
              task: BytesLike
            }
          }
        }
      >
    >

    /**
     * See [`Pallet::claim_task`].
     *
     * @param {FixedBytes<32>} taskId
     * @param {bigint} fee
     **/
    claimTask: GenericTxCall<
      Rv,
      (
        taskId: FixedBytes<32>,
        fee: bigint
      ) => ChainSubmittableExtrinsic<
        Rv,
        {
          pallet: 'PalletIndex'
          palletCall: {
            name: 'ClaimTask'
            params: { taskId: FixedBytes<32>; fee: bigint }
          }
        }
      >
    >

    /**
     * Generic pallet tx call
     **/
    [callName: string]: GenericTxCall<Rv, TxCall<Rv>>
  }
}
