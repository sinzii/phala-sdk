// Generated by dedot cli

import type { GenericChainErrors, GenericPalletError, RpcVersion } from 'dedot/types'

export interface ChainErrors<Rv extends RpcVersion> extends GenericChainErrors<Rv> {
  /**
   * Pallet `System`'s errors
   **/
  system: {
    /**
     * The name of specification does not match between the current runtime
     * and the new runtime.
     **/
    InvalidSpecName: GenericPalletError<Rv>

    /**
     * The specification version is not allowed to decrease between the current runtime
     * and the new runtime.
     **/
    SpecVersionNeedsToIncrease: GenericPalletError<Rv>

    /**
     * Failed to extract the runtime version from the new runtime.
     *
     * Either calling `Core_version` or decoding `RuntimeVersion` failed.
     **/
    FailedToExtractRuntimeVersion: GenericPalletError<Rv>

    /**
     * Suicide called when the account has non-default composite data.
     **/
    NonDefaultComposite: GenericPalletError<Rv>

    /**
     * There is a non-zero reference count preventing the account from being purged.
     **/
    NonZeroRefCount: GenericPalletError<Rv>

    /**
     * The origin filter prevent the call to be dispatched.
     **/
    CallFiltered: GenericPalletError<Rv>

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>
  }
  /**
   * Pallet `Utility`'s errors
   **/
  utility: {
    /**
     * Too many calls batched.
     **/
    TooManyCalls: GenericPalletError<Rv>

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>
  }
  /**
   * Pallet `Multisig`'s errors
   **/
  multisig: {
    /**
     * Threshold must be 2 or greater.
     **/
    MinimumThreshold: GenericPalletError<Rv>

    /**
     * Call is already approved by this signatory.
     **/
    AlreadyApproved: GenericPalletError<Rv>

    /**
     * Call doesn't need any (more) approvals.
     **/
    NoApprovalsNeeded: GenericPalletError<Rv>

    /**
     * There are too few signatories in the list.
     **/
    TooFewSignatories: GenericPalletError<Rv>

    /**
     * There are too many signatories in the list.
     **/
    TooManySignatories: GenericPalletError<Rv>

    /**
     * The signatories were provided out of order; they should be ordered.
     **/
    SignatoriesOutOfOrder: GenericPalletError<Rv>

    /**
     * The sender was contained in the other signatories; it shouldn't be.
     **/
    SenderInSignatories: GenericPalletError<Rv>

    /**
     * Multisig operation not found when attempting to cancel.
     **/
    NotFound: GenericPalletError<Rv>

    /**
     * Only the account that originally created the multisig is able to cancel it.
     **/
    NotOwner: GenericPalletError<Rv>

    /**
     * No timepoint was given, yet the multisig operation is already underway.
     **/
    NoTimepoint: GenericPalletError<Rv>

    /**
     * A different timepoint was given to the multisig operation that is underway.
     **/
    WrongTimepoint: GenericPalletError<Rv>

    /**
     * A timepoint was given, yet no multisig operation is underway.
     **/
    UnexpectedTimepoint: GenericPalletError<Rv>

    /**
     * The maximum weight information provided was too low.
     **/
    MaxWeightTooLow: GenericPalletError<Rv>

    /**
     * The data to be stored is already stored.
     **/
    AlreadyStored: GenericPalletError<Rv>

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>
  }
  /**
   * Pallet `Proxy`'s errors
   **/
  proxy: {
    /**
     * There are too many proxies registered or too many announcements pending.
     **/
    TooMany: GenericPalletError<Rv>

    /**
     * Proxy registration not found.
     **/
    NotFound: GenericPalletError<Rv>

    /**
     * Sender is not a proxy of the account to be proxied.
     **/
    NotProxy: GenericPalletError<Rv>

    /**
     * A call which is incompatible with the proxy type's filter was attempted.
     **/
    Unproxyable: GenericPalletError<Rv>

    /**
     * Account is already a proxy.
     **/
    Duplicate: GenericPalletError<Rv>

    /**
     * Call may not be made by proxy because it may escalate its privileges.
     **/
    NoPermission: GenericPalletError<Rv>

    /**
     * Announcement, if made at all, was made too recently.
     **/
    Unannounced: GenericPalletError<Rv>

    /**
     * Cannot add self as proxy.
     **/
    NoSelfProxy: GenericPalletError<Rv>

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>
  }
  /**
   * Pallet `Vesting`'s errors
   **/
  vesting: {
    /**
     * The account given is not vesting.
     **/
    NotVesting: GenericPalletError<Rv>

    /**
     * The account already has `MaxVestingSchedules` count of schedules and thus
     * cannot add another one. Consider merging existing schedules in order to add another.
     **/
    AtMaxVestingSchedules: GenericPalletError<Rv>

    /**
     * Amount being transferred is too low to create a vesting schedule.
     **/
    AmountLow: GenericPalletError<Rv>

    /**
     * An index was out of bounds of the vesting schedules.
     **/
    ScheduleIndexOutOfBounds: GenericPalletError<Rv>

    /**
     * Failed to create a new schedule because some parameter was invalid.
     **/
    InvalidScheduleParams: GenericPalletError<Rv>

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>
  }
  /**
   * Pallet `Scheduler`'s errors
   **/
  scheduler: {
    /**
     * Failed to schedule a call
     **/
    FailedToSchedule: GenericPalletError<Rv>

    /**
     * Cannot find the scheduled call.
     **/
    NotFound: GenericPalletError<Rv>

    /**
     * Given target block number is in the past.
     **/
    TargetBlockNumberInPast: GenericPalletError<Rv>

    /**
     * Reschedule failed because it does not change scheduled time.
     **/
    RescheduleNoChange: GenericPalletError<Rv>

    /**
     * Attempt to use a non-named function on a named task.
     **/
    Named: GenericPalletError<Rv>

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>
  }
  /**
   * Pallet `Preimage`'s errors
   **/
  preimage: {
    /**
     * Preimage is too large to store on-chain.
     **/
    TooBig: GenericPalletError<Rv>

    /**
     * Preimage has already been noted on-chain.
     **/
    AlreadyNoted: GenericPalletError<Rv>

    /**
     * The user is not authorized to perform this action.
     **/
    NotAuthorized: GenericPalletError<Rv>

    /**
     * The preimage cannot be removed since it has not yet been noted.
     **/
    NotNoted: GenericPalletError<Rv>

    /**
     * A preimage may not be removed when there are outstanding requests.
     **/
    Requested: GenericPalletError<Rv>

    /**
     * The preimage request cannot be removed since no outstanding requests exist.
     **/
    NotRequested: GenericPalletError<Rv>

    /**
     * More than `MAX_HASH_UPGRADE_BULK_COUNT` hashes were requested to be upgraded at once.
     **/
    TooMany: GenericPalletError<Rv>

    /**
     * Too few hashes were requested to be upgraded (i.e. zero).
     **/
    TooFew: GenericPalletError<Rv>

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>
  }
  /**
   * Pallet `ParachainSystem`'s errors
   **/
  parachainSystem: {
    /**
     * Attempt to upgrade validation function while existing upgrade pending.
     **/
    OverlappingUpgrades: GenericPalletError<Rv>

    /**
     * Polkadot currently prohibits this parachain from upgrading its validation function.
     **/
    ProhibitedByPolkadot: GenericPalletError<Rv>

    /**
     * The supplied validation function has compiled into a blob larger than Polkadot is
     * willing to run.
     **/
    TooBig: GenericPalletError<Rv>

    /**
     * The inherent which supplies the validation data did not run this block.
     **/
    ValidationDataNotAvailable: GenericPalletError<Rv>

    /**
     * The inherent which supplies the host configuration did not run this block.
     **/
    HostConfigurationNotAvailable: GenericPalletError<Rv>

    /**
     * No validation function upgrade is currently scheduled.
     **/
    NotScheduled: GenericPalletError<Rv>

    /**
     * No code upgrade has been authorized.
     **/
    NothingAuthorized: GenericPalletError<Rv>

    /**
     * The given code upgrade has not been authorized.
     **/
    Unauthorized: GenericPalletError<Rv>

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>
  }
  /**
   * Pallet `XcmpQueue`'s errors
   **/
  xcmpQueue: {
    /**
     * Failed to send XCM message.
     **/
    FailedToSend: GenericPalletError<Rv>

    /**
     * Bad XCM origin.
     **/
    BadXcmOrigin: GenericPalletError<Rv>

    /**
     * Bad XCM data.
     **/
    BadXcm: GenericPalletError<Rv>

    /**
     * Bad overweight index.
     **/
    BadOverweightIndex: GenericPalletError<Rv>

    /**
     * Provided weight is possibly not enough to execute the message.
     **/
    WeightOverLimit: GenericPalletError<Rv>

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>
  }
  /**
   * Pallet `CumulusXcm`'s errors
   **/
  cumulusXcm: {
    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>
  }
  /**
   * Pallet `DmpQueue`'s errors
   **/
  dmpQueue: {
    /**
     * The message index given is unknown.
     **/
    Unknown: GenericPalletError<Rv>

    /**
     * The amount of weight given is possibly not enough for executing the message.
     **/
    OverLimit: GenericPalletError<Rv>

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>
  }
  /**
   * Pallet `PolkadotXcm`'s errors
   **/
  polkadotXcm: {
    /**
     * The desired destination was unreachable, generally because there is a no way of routing
     * to it.
     **/
    Unreachable: GenericPalletError<Rv>

    /**
     * There was some other issue (i.e. not to do with routing) in sending the message.
     * Perhaps a lack of space for buffering the message.
     **/
    SendFailure: GenericPalletError<Rv>

    /**
     * The message execution fails the filter.
     **/
    Filtered: GenericPalletError<Rv>

    /**
     * The message's weight could not be determined.
     **/
    UnweighableMessage: GenericPalletError<Rv>

    /**
     * The destination `MultiLocation` provided cannot be inverted.
     **/
    DestinationNotInvertible: GenericPalletError<Rv>

    /**
     * The assets to be sent are empty.
     **/
    Empty: GenericPalletError<Rv>

    /**
     * Could not re-anchor the assets to declare the fees for the destination chain.
     **/
    CannotReanchor: GenericPalletError<Rv>

    /**
     * Too many assets have been attempted for transfer.
     **/
    TooManyAssets: GenericPalletError<Rv>

    /**
     * Origin is invalid for sending.
     **/
    InvalidOrigin: GenericPalletError<Rv>

    /**
     * The version of the `Versioned` value used is not able to be interpreted.
     **/
    BadVersion: GenericPalletError<Rv>

    /**
     * The given location could not be used (e.g. because it cannot be expressed in the
     * desired version of XCM).
     **/
    BadLocation: GenericPalletError<Rv>

    /**
     * The referenced subscription could not be found.
     **/
    NoSubscription: GenericPalletError<Rv>

    /**
     * The location is invalid since it already has a subscription from us.
     **/
    AlreadySubscribed: GenericPalletError<Rv>

    /**
     * Invalid asset for the operation.
     **/
    InvalidAsset: GenericPalletError<Rv>

    /**
     * The owner does not own (all) of the asset that they wish to do the operation on.
     **/
    LowBalance: GenericPalletError<Rv>

    /**
     * The asset owner has too many locks on the asset.
     **/
    TooManyLocks: GenericPalletError<Rv>

    /**
     * The given account is not an identifiable sovereign account for any location.
     **/
    AccountNotSovereign: GenericPalletError<Rv>

    /**
     * The operation required fees to be paid which the initiator could not meet.
     **/
    FeesNotMet: GenericPalletError<Rv>

    /**
     * A remote lock with the corresponding data could not be found.
     **/
    LockNotFound: GenericPalletError<Rv>

    /**
     * The unlock operation cannot succeed because there are still consumers of the lock.
     **/
    InUse: GenericPalletError<Rv>

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>
  }
  /**
   * Pallet `Balances`'s errors
   **/
  balances: {
    /**
     * Vesting balance too high to send value.
     **/
    VestingBalance: GenericPalletError<Rv>

    /**
     * Account liquidity restrictions prevent withdrawal.
     **/
    LiquidityRestrictions: GenericPalletError<Rv>

    /**
     * Balance too low to send value.
     **/
    InsufficientBalance: GenericPalletError<Rv>

    /**
     * Value too low to create account due to existential deposit.
     **/
    ExistentialDeposit: GenericPalletError<Rv>

    /**
     * Transfer/payment would kill account.
     **/
    Expendability: GenericPalletError<Rv>

    /**
     * A vesting schedule already exists for this account.
     **/
    ExistingVestingSchedule: GenericPalletError<Rv>

    /**
     * Beneficiary account must pre-exist.
     **/
    DeadAccount: GenericPalletError<Rv>

    /**
     * Number of named reserves exceed `MaxReserves`.
     **/
    TooManyReserves: GenericPalletError<Rv>

    /**
     * Number of holds exceed `MaxHolds`.
     **/
    TooManyHolds: GenericPalletError<Rv>

    /**
     * Number of freezes exceed `MaxFreezes`.
     **/
    TooManyFreezes: GenericPalletError<Rv>

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>
  }
  /**
   * Pallet `Assets`'s errors
   **/
  assets: {
    /**
     * Account balance must be greater than or equal to the transfer amount.
     **/
    BalanceLow: GenericPalletError<Rv>

    /**
     * The account to alter does not exist.
     **/
    NoAccount: GenericPalletError<Rv>

    /**
     * The signing account has no permission to do the operation.
     **/
    NoPermission: GenericPalletError<Rv>

    /**
     * The given asset ID is unknown.
     **/
    Unknown: GenericPalletError<Rv>

    /**
     * The origin account is frozen.
     **/
    Frozen: GenericPalletError<Rv>

    /**
     * The asset ID is already taken.
     **/
    InUse: GenericPalletError<Rv>

    /**
     * Invalid witness data given.
     **/
    BadWitness: GenericPalletError<Rv>

    /**
     * Minimum balance should be non-zero.
     **/
    MinBalanceZero: GenericPalletError<Rv>

    /**
     * Unable to increment the consumer reference counters on the account. Either no provider
     * reference exists to allow a non-zero balance of a non-self-sufficient asset, or one
     * fewer then the maximum number of consumers has been reached.
     **/
    UnavailableConsumer: GenericPalletError<Rv>

    /**
     * Invalid metadata given.
     **/
    BadMetadata: GenericPalletError<Rv>

    /**
     * No approval exists that would allow the transfer.
     **/
    Unapproved: GenericPalletError<Rv>

    /**
     * The source account would not survive the transfer and it needs to stay alive.
     **/
    WouldDie: GenericPalletError<Rv>

    /**
     * The asset-account already exists.
     **/
    AlreadyExists: GenericPalletError<Rv>

    /**
     * The asset-account doesn't have an associated deposit.
     **/
    NoDeposit: GenericPalletError<Rv>

    /**
     * The operation would result in funds being burned.
     **/
    WouldBurn: GenericPalletError<Rv>

    /**
     * The asset is a live asset and is actively being used. Usually emit for operations such
     * as `start_destroy` which require the asset to be in a destroying state.
     **/
    LiveAsset: GenericPalletError<Rv>

    /**
     * The asset is not live, and likely being destroyed.
     **/
    AssetNotLive: GenericPalletError<Rv>

    /**
     * The asset status is not the expected status.
     **/
    IncorrectStatus: GenericPalletError<Rv>

    /**
     * The asset should be frozen before the given operation.
     **/
    NotFrozen: GenericPalletError<Rv>

    /**
     * Callback action resulted in error
     **/
    CallbackFailed: GenericPalletError<Rv>

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>
  }
  /**
   * Pallet `CollatorSelection`'s errors
   **/
  collatorSelection: {
    /**
     * The pallet has too many candidates.
     **/
    TooManyCandidates: GenericPalletError<Rv>

    /**
     * Leaving would result in too few candidates.
     **/
    TooFewEligibleCollators: GenericPalletError<Rv>

    /**
     * Account is already a candidate.
     **/
    AlreadyCandidate: GenericPalletError<Rv>

    /**
     * Account is not a candidate.
     **/
    NotCandidate: GenericPalletError<Rv>

    /**
     * There are too many Invulnerables.
     **/
    TooManyInvulnerables: GenericPalletError<Rv>

    /**
     * Account is already an Invulnerable.
     **/
    AlreadyInvulnerable: GenericPalletError<Rv>

    /**
     * Account is not an Invulnerable.
     **/
    NotInvulnerable: GenericPalletError<Rv>

    /**
     * Account has no associated validator ID.
     **/
    NoAssociatedValidatorId: GenericPalletError<Rv>

    /**
     * Validator ID is not yet registered.
     **/
    ValidatorNotRegistered: GenericPalletError<Rv>

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>
  }
  /**
   * Pallet `Session`'s errors
   **/
  session: {
    /**
     * Invalid ownership proof.
     **/
    InvalidProof: GenericPalletError<Rv>

    /**
     * No associated validator ID for account.
     **/
    NoAssociatedValidatorId: GenericPalletError<Rv>

    /**
     * Registered duplicate key.
     **/
    DuplicatedKey: GenericPalletError<Rv>

    /**
     * No keys are associated with this account.
     **/
    NoKeys: GenericPalletError<Rv>

    /**
     * Key setting account is not live, so it's impossible to associate keys.
     **/
    NoAccount: GenericPalletError<Rv>

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>
  }
  /**
   * Pallet `Identity`'s errors
   **/
  identity: {
    /**
     * Too many subs-accounts.
     **/
    TooManySubAccounts: GenericPalletError<Rv>

    /**
     * Account isn't found.
     **/
    NotFound: GenericPalletError<Rv>

    /**
     * Account isn't named.
     **/
    NotNamed: GenericPalletError<Rv>

    /**
     * Empty index.
     **/
    EmptyIndex: GenericPalletError<Rv>

    /**
     * Fee is changed.
     **/
    FeeChanged: GenericPalletError<Rv>

    /**
     * No identity found.
     **/
    NoIdentity: GenericPalletError<Rv>

    /**
     * Sticky judgement.
     **/
    StickyJudgement: GenericPalletError<Rv>

    /**
     * Judgement given.
     **/
    JudgementGiven: GenericPalletError<Rv>

    /**
     * Invalid judgement.
     **/
    InvalidJudgement: GenericPalletError<Rv>

    /**
     * The index is invalid.
     **/
    InvalidIndex: GenericPalletError<Rv>

    /**
     * The target is invalid.
     **/
    InvalidTarget: GenericPalletError<Rv>

    /**
     * Too many additional fields.
     **/
    TooManyFields: GenericPalletError<Rv>

    /**
     * Maximum amount of registrars reached. Cannot add any more.
     **/
    TooManyRegistrars: GenericPalletError<Rv>

    /**
     * Account ID is already named.
     **/
    AlreadyClaimed: GenericPalletError<Rv>

    /**
     * Sender is not a sub-account.
     **/
    NotSub: GenericPalletError<Rv>

    /**
     * Sub-account isn't owned by sender.
     **/
    NotOwned: GenericPalletError<Rv>

    /**
     * The provided judgement was for a different identity.
     **/
    JudgementForDifferentIdentity: GenericPalletError<Rv>

    /**
     * Error that occurs when there is an issue paying for judgement.
     **/
    JudgementPaymentFailed: GenericPalletError<Rv>

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>
  }
  /**
   * Pallet `Democracy`'s errors
   **/
  democracy: {
    /**
     * Value too low
     **/
    ValueLow: GenericPalletError<Rv>

    /**
     * Proposal does not exist
     **/
    ProposalMissing: GenericPalletError<Rv>

    /**
     * Cannot cancel the same proposal twice
     **/
    AlreadyCanceled: GenericPalletError<Rv>

    /**
     * Proposal already made
     **/
    DuplicateProposal: GenericPalletError<Rv>

    /**
     * Proposal still blacklisted
     **/
    ProposalBlacklisted: GenericPalletError<Rv>

    /**
     * Next external proposal not simple majority
     **/
    NotSimpleMajority: GenericPalletError<Rv>

    /**
     * Invalid hash
     **/
    InvalidHash: GenericPalletError<Rv>

    /**
     * No external proposal
     **/
    NoProposal: GenericPalletError<Rv>

    /**
     * Identity may not veto a proposal twice
     **/
    AlreadyVetoed: GenericPalletError<Rv>

    /**
     * Vote given for invalid referendum
     **/
    ReferendumInvalid: GenericPalletError<Rv>

    /**
     * No proposals waiting
     **/
    NoneWaiting: GenericPalletError<Rv>

    /**
     * The given account did not vote on the referendum.
     **/
    NotVoter: GenericPalletError<Rv>

    /**
     * The actor has no permission to conduct the action.
     **/
    NoPermission: GenericPalletError<Rv>

    /**
     * The account is already delegating.
     **/
    AlreadyDelegating: GenericPalletError<Rv>

    /**
     * Too high a balance was provided that the account cannot afford.
     **/
    InsufficientFunds: GenericPalletError<Rv>

    /**
     * The account is not currently delegating.
     **/
    NotDelegating: GenericPalletError<Rv>

    /**
     * The account currently has votes attached to it and the operation cannot succeed until
     * these are removed, either through `unvote` or `reap_vote`.
     **/
    VotesExist: GenericPalletError<Rv>

    /**
     * The instant referendum origin is currently disallowed.
     **/
    InstantNotAllowed: GenericPalletError<Rv>

    /**
     * Delegation to oneself makes no sense.
     **/
    Nonsense: GenericPalletError<Rv>

    /**
     * Invalid upper bound.
     **/
    WrongUpperBound: GenericPalletError<Rv>

    /**
     * Maximum number of votes reached.
     **/
    MaxVotesReached: GenericPalletError<Rv>

    /**
     * Maximum number of items reached.
     **/
    TooMany: GenericPalletError<Rv>

    /**
     * Voting period too low
     **/
    VotingPeriodLow: GenericPalletError<Rv>

    /**
     * The preimage does not exist.
     **/
    PreimageNotExist: GenericPalletError<Rv>

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>
  }
  /**
   * Pallet `Council`'s errors
   **/
  council: {
    /**
     * Account is not a member
     **/
    NotMember: GenericPalletError<Rv>

    /**
     * Duplicate proposals not allowed
     **/
    DuplicateProposal: GenericPalletError<Rv>

    /**
     * Proposal must exist
     **/
    ProposalMissing: GenericPalletError<Rv>

    /**
     * Mismatched index
     **/
    WrongIndex: GenericPalletError<Rv>

    /**
     * Duplicate vote ignored
     **/
    DuplicateVote: GenericPalletError<Rv>

    /**
     * Members are already initialized!
     **/
    AlreadyInitialized: GenericPalletError<Rv>

    /**
     * The close call was made too early, before the end of the voting.
     **/
    TooEarly: GenericPalletError<Rv>

    /**
     * There can only be a maximum of `MaxProposals` active proposals.
     **/
    TooManyProposals: GenericPalletError<Rv>

    /**
     * The given weight bound for the proposal was too low.
     **/
    WrongProposalWeight: GenericPalletError<Rv>

    /**
     * The given length bound for the proposal was too low.
     **/
    WrongProposalLength: GenericPalletError<Rv>

    /**
     * Prime account is not a member
     **/
    PrimeAccountNotMember: GenericPalletError<Rv>

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>
  }
  /**
   * Pallet `Treasury`'s errors
   **/
  treasury: {
    /**
     * Proposer's balance is too low.
     **/
    InsufficientProposersBalance: GenericPalletError<Rv>

    /**
     * No proposal or bounty at that index.
     **/
    InvalidIndex: GenericPalletError<Rv>

    /**
     * Too many approvals in the queue.
     **/
    TooManyApprovals: GenericPalletError<Rv>

    /**
     * The spend origin is valid but the amount it is allowed to spend is lower than the
     * amount to be spent.
     **/
    InsufficientPermission: GenericPalletError<Rv>

    /**
     * Proposal has not been approved.
     **/
    ProposalNotApproved: GenericPalletError<Rv>

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>
  }
  /**
   * Pallet `Bounties`'s errors
   **/
  bounties: {
    /**
     * Proposer's balance is too low.
     **/
    InsufficientProposersBalance: GenericPalletError<Rv>

    /**
     * No proposal or bounty at that index.
     **/
    InvalidIndex: GenericPalletError<Rv>

    /**
     * The reason given is just too big.
     **/
    ReasonTooBig: GenericPalletError<Rv>

    /**
     * The bounty status is unexpected.
     **/
    UnexpectedStatus: GenericPalletError<Rv>

    /**
     * Require bounty curator.
     **/
    RequireCurator: GenericPalletError<Rv>

    /**
     * Invalid bounty value.
     **/
    InvalidValue: GenericPalletError<Rv>

    /**
     * Invalid bounty fee.
     **/
    InvalidFee: GenericPalletError<Rv>

    /**
     * A bounty payout is pending.
     * To cancel the bounty, you must unassign and slash the curator.
     **/
    PendingPayout: GenericPalletError<Rv>

    /**
     * The bounties cannot be claimed/closed because it's still in the countdown period.
     **/
    Premature: GenericPalletError<Rv>

    /**
     * The bounty cannot be closed because it has active child bounties.
     **/
    HasActiveChildBounty: GenericPalletError<Rv>

    /**
     * Too many approvals are already queued.
     **/
    TooManyQueued: GenericPalletError<Rv>

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>
  }
  /**
   * Pallet `Lottery`'s errors
   **/
  lottery: {
    /**
     * A lottery has not been configured.
     **/
    NotConfigured: GenericPalletError<Rv>

    /**
     * A lottery is already in progress.
     **/
    InProgress: GenericPalletError<Rv>

    /**
     * A lottery has already ended.
     **/
    AlreadyEnded: GenericPalletError<Rv>

    /**
     * The call is not valid for an open lottery.
     **/
    InvalidCall: GenericPalletError<Rv>

    /**
     * You are already participating in the lottery with this call.
     **/
    AlreadyParticipating: GenericPalletError<Rv>

    /**
     * Too many calls for a single lottery.
     **/
    TooManyCalls: GenericPalletError<Rv>

    /**
     * Failed to encode calls
     **/
    EncodingFailed: GenericPalletError<Rv>

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>
  }
  /**
   * Pallet `TechnicalCommittee`'s errors
   **/
  technicalCommittee: {
    /**
     * Account is not a member
     **/
    NotMember: GenericPalletError<Rv>

    /**
     * Duplicate proposals not allowed
     **/
    DuplicateProposal: GenericPalletError<Rv>

    /**
     * Proposal must exist
     **/
    ProposalMissing: GenericPalletError<Rv>

    /**
     * Mismatched index
     **/
    WrongIndex: GenericPalletError<Rv>

    /**
     * Duplicate vote ignored
     **/
    DuplicateVote: GenericPalletError<Rv>

    /**
     * Members are already initialized!
     **/
    AlreadyInitialized: GenericPalletError<Rv>

    /**
     * The close call was made too early, before the end of the voting.
     **/
    TooEarly: GenericPalletError<Rv>

    /**
     * There can only be a maximum of `MaxProposals` active proposals.
     **/
    TooManyProposals: GenericPalletError<Rv>

    /**
     * The given weight bound for the proposal was too low.
     **/
    WrongProposalWeight: GenericPalletError<Rv>

    /**
     * The given length bound for the proposal was too low.
     **/
    WrongProposalLength: GenericPalletError<Rv>

    /**
     * Prime account is not a member
     **/
    PrimeAccountNotMember: GenericPalletError<Rv>

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>
  }
  /**
   * Pallet `TechnicalMembership`'s errors
   **/
  technicalMembership: {
    /**
     * Already a member.
     **/
    AlreadyMember: GenericPalletError<Rv>

    /**
     * Not a member.
     **/
    NotMember: GenericPalletError<Rv>

    /**
     * Too many members.
     **/
    TooManyMembers: GenericPalletError<Rv>

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>
  }
  /**
   * Pallet `PhragmenElection`'s errors
   **/
  phragmenElection: {
    /**
     * Cannot vote when no candidates or members exist.
     **/
    UnableToVote: GenericPalletError<Rv>

    /**
     * Must vote for at least one candidate.
     **/
    NoVotes: GenericPalletError<Rv>

    /**
     * Cannot vote more than candidates.
     **/
    TooManyVotes: GenericPalletError<Rv>

    /**
     * Cannot vote more than maximum allowed.
     **/
    MaximumVotesExceeded: GenericPalletError<Rv>

    /**
     * Cannot vote with stake less than minimum balance.
     **/
    LowBalance: GenericPalletError<Rv>

    /**
     * Voter can not pay voting bond.
     **/
    UnableToPayBond: GenericPalletError<Rv>

    /**
     * Must be a voter.
     **/
    MustBeVoter: GenericPalletError<Rv>

    /**
     * Duplicated candidate submission.
     **/
    DuplicatedCandidate: GenericPalletError<Rv>

    /**
     * Too many candidates have been created.
     **/
    TooManyCandidates: GenericPalletError<Rv>

    /**
     * Member cannot re-submit candidacy.
     **/
    MemberSubmit: GenericPalletError<Rv>

    /**
     * Runner cannot re-submit candidacy.
     **/
    RunnerUpSubmit: GenericPalletError<Rv>

    /**
     * Candidate does not have enough funds.
     **/
    InsufficientCandidateFunds: GenericPalletError<Rv>

    /**
     * Not a member.
     **/
    NotMember: GenericPalletError<Rv>

    /**
     * The provided count of number of candidates is incorrect.
     **/
    InvalidWitnessData: GenericPalletError<Rv>

    /**
     * The provided count of number of votes is incorrect.
     **/
    InvalidVoteCount: GenericPalletError<Rv>

    /**
     * The renouncing origin presented a wrong `Renouncing` parameter.
     **/
    InvalidRenouncing: GenericPalletError<Rv>

    /**
     * Prediction regarding replacement after member removal is wrong.
     **/
    InvalidReplacement: GenericPalletError<Rv>

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>
  }
  /**
   * Pallet `Tips`'s errors
   **/
  tips: {
    /**
     * The reason given is just too big.
     **/
    ReasonTooBig: GenericPalletError<Rv>

    /**
     * The tip was already found/started.
     **/
    AlreadyKnown: GenericPalletError<Rv>

    /**
     * The tip hash is unknown.
     **/
    UnknownTip: GenericPalletError<Rv>

    /**
     * The account attempting to retract the tip is not the finder of the tip.
     **/
    NotFinder: GenericPalletError<Rv>

    /**
     * The tip cannot be claimed/closed because there are not enough tippers yet.
     **/
    StillOpen: GenericPalletError<Rv>

    /**
     * The tip cannot be claimed/closed because it's still in the countdown period.
     **/
    Premature: GenericPalletError<Rv>

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>
  }
  /**
   * Pallet `ChildBounties`'s errors
   **/
  childBounties: {
    /**
     * The parent bounty is not in active state.
     **/
    ParentBountyNotActive: GenericPalletError<Rv>

    /**
     * The bounty balance is not enough to add new child-bounty.
     **/
    InsufficientBountyBalance: GenericPalletError<Rv>

    /**
     * Number of child bounties exceeds limit `MaxActiveChildBountyCount`.
     **/
    TooManyChildBounties: GenericPalletError<Rv>

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>
  }
  /**
   * Pallet `ChainBridge`'s errors
   **/
  chainBridge: {
    /**
     * Relayer threshold not set
     **/
    ThresholdNotSet: GenericPalletError<Rv>

    /**
     * Provided chain Id is not valid
     **/
    InvalidChainId: GenericPalletError<Rv>

    /**
     * Relayer threshold cannot be 0
     **/
    InvalidThreshold: GenericPalletError<Rv>

    /**
     * Interactions with this chain is not permitted
     **/
    ChainNotWhitelisted: GenericPalletError<Rv>

    /**
     * Chain has already been enabled
     **/
    ChainAlreadyWhitelisted: GenericPalletError<Rv>

    /**
     * Resource ID provided isn't mapped to anything
     **/
    ResourceDoesNotExist: GenericPalletError<Rv>

    /**
     * Relayer already in set
     **/
    RelayerAlreadyExists: GenericPalletError<Rv>

    /**
     * Provided accountId is not a relayer
     **/
    RelayerInvalid: GenericPalletError<Rv>

    /**
     * Protected operation, must be performed by relayer
     **/
    MustBeRelayer: GenericPalletError<Rv>

    /**
     * Relayer has already submitted some vote for this proposal
     **/
    RelayerAlreadyVoted: GenericPalletError<Rv>

    /**
     * A proposal with these parameters has already been submitted
     **/
    ProposalAlreadyExists: GenericPalletError<Rv>

    /**
     * No proposal with the ID was found
     **/
    ProposalDoesNotExist: GenericPalletError<Rv>

    /**
     * Cannot complete proposal, needs more votes
     **/
    ProposalNotComplete: GenericPalletError<Rv>

    /**
     * Proposal has either failed or succeeded
     **/
    ProposalAlreadyComplete: GenericPalletError<Rv>

    /**
     * Lifetime of proposal has been exceeded
     **/
    ProposalExpired: GenericPalletError<Rv>

    /**
     * Got wrong paremeter when update fee
     **/
    InvalidFeeOption: GenericPalletError<Rv>

    /**
     * Unkonwn asset
     **/
    ExtractAssetFailed: GenericPalletError<Rv>

    /**
     * Unknown destnation
     **/
    ExtractDestFailed: GenericPalletError<Rv>

    /**
     * Asset can not pay as fee
     **/
    CannotPayAsFee: GenericPalletError<Rv>

    /**
     * Transfer failed
     **/
    TransactFailed: GenericPalletError<Rv>

    /**
     * Infusficient balance to withdraw
     **/
    InsufficientBalance: GenericPalletError<Rv>

    /**
     * Too expensive fee for withdrawn asset
     **/
    FeeTooExpensive: GenericPalletError<Rv>

    /**
     * Can not extract asset reserve location
     **/
    CannotDetermineReservedLocation: GenericPalletError<Rv>

    /**
     * Can not extract dest location
     **/
    DestUnrecognized: GenericPalletError<Rv>

    /**
     * Assets not registered through pallet-assets or pallet-uniques
     **/
    AssetNotRegistered: GenericPalletError<Rv>

    /**
     * Convertion failed from resource id
     **/
    AssetConversionFailed: GenericPalletError<Rv>

    /**
     * Function unimplemented
     **/
    Unimplemented: GenericPalletError<Rv>

    /**
     * Can not transfer assets to dest due to some reasons
     **/
    CannotDepositAsset: GenericPalletError<Rv>

    /**
     * Trying to push bridge event count more than `BridgeEventLimit`
     **/
    BridgeEventOverflow: GenericPalletError<Rv>

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>
  }
  /**
   * Pallet `XcmBridge`'s errors
   **/
  xcmBridge: {
    UnknownError: GenericPalletError<Rv>

    /**
     * Can not reanchor asset location according dest
     **/
    CannotReanchor: GenericPalletError<Rv>

    /**
     * Failed to measure weight of a XCM message
     **/
    UnweighableMessage: GenericPalletError<Rv>
    FeePaymentEmpty: GenericPalletError<Rv>

    /**
     * XCM message executeion failed due to some reasons
     **/
    ExecutionFailed: GenericPalletError<Rv>
    UnknownTransfer: GenericPalletError<Rv>

    /**
     * Asset not been registered or not been supported
     **/
    AssetNotFound: GenericPalletError<Rv>
    LocationInvertFailed: GenericPalletError<Rv>

    /**
     * Extract dest location failed
     **/
    IllegalDestination: GenericPalletError<Rv>

    /**
     * Can not transfer asset to dest
     **/
    CannotDepositAsset: GenericPalletError<Rv>

    /**
     * Transfer type not valid
     **/
    UnknownTransferType: GenericPalletError<Rv>

    /**
     * Unimplemented function
     **/
    Unimplemented: GenericPalletError<Rv>

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>
  }
  /**
   * Pallet `XTransfer`'s errors
   **/
  xTransfer: {
    TransactFailed: GenericPalletError<Rv>
    UnknownAsset: GenericPalletError<Rv>
    UnsupportedDest: GenericPalletError<Rv>
    UnhandledTransfer: GenericPalletError<Rv>

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>
  }
  /**
   * Pallet `AssetsRegistry`'s errors
   **/
  assetsRegistry: {
    AssetAlreadyExist: GenericPalletError<Rv>
    AssetNotRegistered: GenericPalletError<Rv>
    BridgeAlreadyEnabled: GenericPalletError<Rv>
    BridgeAlreadyDisabled: GenericPalletError<Rv>
    FailedToTransactAsset: GenericPalletError<Rv>
    DuplictedLocation: GenericPalletError<Rv>
    LocationTooLong: GenericPalletError<Rv>

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>
  }
  /**
   * Pallet `PhalaMq`'s errors
   **/
  phalaMq: {
    BadSender: GenericPalletError<Rv>
    BadSequence: GenericPalletError<Rv>
    BadDestination: GenericPalletError<Rv>

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>
  }
  /**
   * Pallet `PhalaRegistry`'s errors
   **/
  phalaRegistry: {
    CannotHandleUnknownMessage: GenericPalletError<Rv>
    InvalidSender: GenericPalletError<Rv>
    InvalidPubKey: GenericPalletError<Rv>
    MalformedSignature: GenericPalletError<Rv>
    InvalidSignatureLength: GenericPalletError<Rv>
    InvalidSignature: GenericPalletError<Rv>
    UnknownContract: GenericPalletError<Rv>
    InvalidIASSigningCert: GenericPalletError<Rv>
    InvalidReport: GenericPalletError<Rv>
    InvalidQuoteStatus: GenericPalletError<Rv>
    BadIASReport: GenericPalletError<Rv>
    OutdatedIASReport: GenericPalletError<Rv>
    UnknownQuoteBodyFormat: GenericPalletError<Rv>
    InvalidDCAPQuote: GenericPalletError<Rv>
    InvalidRuntimeInfoHash: GenericPalletError<Rv>
    InvalidRuntimeInfo: GenericPalletError<Rv>
    InvalidInput: GenericPalletError<Rv>
    InvalidBenchReport: GenericPalletError<Rv>
    WorkerNotFound: GenericPalletError<Rv>
    NoneAttestationDisabled: GenericPalletError<Rv>
    InvalidGatekeeper: GenericPalletError<Rv>
    InvalidMasterPubkey: GenericPalletError<Rv>
    MasterKeyMismatch: GenericPalletError<Rv>
    MasterKeyUninitialized: GenericPalletError<Rv>
    GenesisBlockHashRejected: GenericPalletError<Rv>
    GenesisBlockHashAlreadyExists: GenericPalletError<Rv>
    GenesisBlockHashNotFound: GenericPalletError<Rv>
    PRuntimeRejected: GenericPalletError<Rv>
    PRuntimeAlreadyExists: GenericPalletError<Rv>
    PRuntimeNotFound: GenericPalletError<Rv>
    UnknownCluster: GenericPalletError<Rv>
    NotImplemented: GenericPalletError<Rv>
    CannotRemoveLastGatekeeper: GenericPalletError<Rv>
    MasterKeyInRotation: GenericPalletError<Rv>
    InvalidRotatedMasterPubkey: GenericPalletError<Rv>
    InvalidEndpointSigningTime: GenericPalletError<Rv>

    /**
     * Migration root not authorized
     **/
    NotMigrationRoot: GenericPalletError<Rv>
    ParachainIdMismatch: GenericPalletError<Rv>
    InvalidConsensusVersion: GenericPalletError<Rv>
    UnsupportedAttestationType: GenericPalletError<Rv>

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>
  }
  /**
   * Pallet `PhalaComputation`'s errors
   **/
  phalaComputation: {
    /**
     * The transaction is sent by an unauthorized sender
     **/
    BadSender: GenericPalletError<Rv>

    /**
     * Deprecated.
     **/
    InvalidMessage: GenericPalletError<Rv>

    /**
     * The worker is not registered in the registry.
     **/
    WorkerNotRegistered: GenericPalletError<Rv>

    /**
     * Deprecated
     **/
    GatekeeperNotRegistered: GenericPalletError<Rv>

    /**
     * Not permitted because the session is already bound with another worker.
     **/
    DuplicateBoundSession: GenericPalletError<Rv>

    /**
     * There's no benchmark result on the blockchain.
     **/
    BenchmarkMissing: GenericPalletError<Rv>

    /**
     * session not found.
     **/
    SessionNotFound: GenericPalletError<Rv>

    /**
     * Not permitted because the session is not bound with a worker.
     **/
    SessionNotBound: GenericPalletError<Rv>

    /**
     * Worker is not in `Ready` state to proceed.
     **/
    WorkerNotReady: GenericPalletError<Rv>

    /**
     * Worker is not in `Computation` state to stop computing.
     **/
    WorkerNotComputing: GenericPalletError<Rv>

    /**
     * Not permitted because the worker is not bound with a worker account.
     **/
    WorkerNotBound: GenericPalletError<Rv>

    /**
     * Cannot reclaim the worker because it's still in cooldown period.
     **/
    CoolDownNotReady: GenericPalletError<Rv>

    /**
     * Cannot start computing because there's too little stake.
     **/
    InsufficientStake: GenericPalletError<Rv>

    /**
     * Cannot start computing because there's too much stake (exceeds Vmax).
     **/
    TooMuchStake: GenericPalletError<Rv>

    /**
     * Internal error. The tokenomic parameter is not set.
     **/
    InternalErrorBadTokenomicParameters: GenericPalletError<Rv>

    /**
     * Not permitted because the worker is already bound with another session account.
     **/
    DuplicateBoundWorker: GenericPalletError<Rv>

    /**
     * Indicating the initial benchmark score is too low to start computing.
     **/
    BenchmarkTooLow: GenericPalletError<Rv>

    /**
     * Internal error. A worker should never start with existing stake in the storage.
     **/
    InternalErrorCannotStartWithExistingStake: GenericPalletError<Rv>

    /**
     * Migration root not authorized
     **/
    NotMigrationRoot: GenericPalletError<Rv>
    NonceIndexInvalid: GenericPalletError<Rv>
    BudgetUpdateBlockInvalid: GenericPalletError<Rv>
    BudgetExceedMaxLimit: GenericPalletError<Rv>

    /**
     * The worker need to be re-registered to be added to a pool.
     **/
    WorkerReregisterNeeded: GenericPalletError<Rv>

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>
  }
  /**
   * Pallet `PhalaStakePool`'s errors
   **/
  phalaStakePool: {
    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>
  }
  /**
   * Pallet `PhalaStakePoolv2`'s errors
   **/
  phalaStakePoolv2: {
    /**
     * The worker is not registered in the registry when adding to the pool
     **/
    WorkerNotRegistered: GenericPalletError<Rv>

    /**
     * The worker doesn't have a valid benchmark when adding to the pool
     **/
    BenchmarkMissing: GenericPalletError<Rv>

    /**
     * The worker is already added to the pool
     **/
    WorkerExists: GenericPalletError<Rv>

    /**
     * The worker is already in cd_workers
     **/
    WorkerAlreadyStopped: GenericPalletError<Rv>

    /**
     * The target worker is not in the pool
     **/
    WorkerDoesNotExist: GenericPalletError<Rv>

    /**
     * The worker is already added to another pool
     **/
    WorkerInAnotherPool: GenericPalletError<Rv>

    /**
     * The owner of the pool doesn't have the access to the worker
     *
     * The access to a worker is granted by it's `operator` parameter set by `register_worker`
     **/
    UnauthorizedOperator: GenericPalletError<Rv>

    /**
     * The caller is not the owner of the pool
     **/
    UnauthorizedPoolOwner: GenericPalletError<Rv>

    /**
     * The stake capacity is set too low to cover the existing stake
     **/
    InadequateCapacity: GenericPalletError<Rv>

    /**
     * The stake added to a pool exceeds its capacity
     **/
    StakeExceedsCapacity: GenericPalletError<Rv>

    /**
     * The specified pool doesn't exist
     **/
    PoolDoesNotExist: GenericPalletError<Rv>
    PoolIsBusy: GenericPalletError<Rv>

    /**
     * The contributed stake is smaller than the minimum threshold
     **/
    InsufficientContribution: GenericPalletError<Rv>

    /**
     * The caller has no nft to withdraw
     **/
    NoNftToWithdraw: GenericPalletError<Rv>

    /**
     * Trying to contribute more than the available balance
     **/
    InsufficientBalance: GenericPalletError<Rv>

    /**
     * The user doesn't have stake in a pool
     **/
    PoolStakeNotFound: GenericPalletError<Rv>

    /**
     * Cannot start computing because there's no enough free stake
     **/
    InsufficientFreeStake: GenericPalletError<Rv>

    /**
     * The withdrawal amount is too small (considered as dust)
     **/
    InvalidWithdrawalAmount: GenericPalletError<Rv>

    /**
     * Couldn't bind worker and the pool computing subaccount
     **/
    FailedToBindSessionAndWorker: GenericPalletError<Rv>

    /**
     * Internal error: Cannot withdraw from the subsidy pool. This should never happen.
     **/
    InternalSubsidyPoolCannotWithdraw: GenericPalletError<Rv>

    /**
     * The pool has already got all the stake completely slashed.
     *
     * In this case, no more funds can be contributed to the pool until all the pending slash
     * has been resolved.
     **/
    PoolBankrupt: GenericPalletError<Rv>

    /**
     * There's no pending reward to claim
     **/
    NoRewardToClaim: GenericPalletError<Rv>

    /**
     * The StakePool is not enabled yet.
     **/
    FeatureNotEnabled: GenericPalletError<Rv>

    /**
     * Failed to add a worker because the number of the workers exceeds the upper limit.
     **/
    WorkersExceedLimit: GenericPalletError<Rv>

    /**
     * Restarted with a less stake is not allowed in the tokenomic.
     **/
    CannotRestartWithLessStake: GenericPalletError<Rv>

    /**
     * Invalid amount of balance input when force reward.
     **/
    InvalidForceRewardAmount: GenericPalletError<Rv>

    /**
     * Withdraw queue is not empty so that we can't restart computing
     **/
    WithdrawQueueNotEmpty: GenericPalletError<Rv>

    /**
     * Stakepool's collection_id isn't founded
     **/
    MissingCollectionId: GenericPalletError<Rv>

    /**
     * Vault is forced locked for it has some expired withdrawal
     **/
    VaultIsLocked: GenericPalletError<Rv>

    /**
     * The target miner is not in the `miner` storage
     **/
    SessionDoesNotExist: GenericPalletError<Rv>

    /**
     * The target worker is not reclaimed and can not be removed from a pool.
     **/
    WorkerIsNotReady: GenericPalletError<Rv>
    LockAccountStakeError: GenericPalletError<Rv>
    NoLegacyRewardToClaim: GenericPalletError<Rv>

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>
  }
  /**
   * Pallet `PhalaVault`'s errors
   **/
  phalaVault: {
    /**
     * The caller is not the owner of the pool
     **/
    UnauthorizedPoolOwner: GenericPalletError<Rv>

    /**
     * The withdrawal amount is too small or too large
     **/
    NoEnoughShareToClaim: GenericPalletError<Rv>

    /**
     * The vault have no owner shares to claim
     **/
    NoRewardToClaim: GenericPalletError<Rv>

    /**
     * The asset account hasn't been created. It indicates an internal error.
     **/
    AssetAccountNotExist: GenericPalletError<Rv>

    /**
     * Trying to contribute more than the available balance
     **/
    InsufficientBalance: GenericPalletError<Rv>

    /**
     * The contributed stake is smaller than the minimum threshold
     **/
    InsufficientContribution: GenericPalletError<Rv>

    /**
     * The Vault was bankrupt; cannot interact with it unless all the shares are withdrawn.
     **/
    VaultBankrupt: GenericPalletError<Rv>

    /**
     * The caller has no nft to withdraw
     **/
    NoNftToWithdraw: GenericPalletError<Rv>

    /**
     * The commission is not changed
     **/
    CommissionNotChanged: GenericPalletError<Rv>

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>
  }
  /**
   * Pallet `PhalaWrappedBalances`'s errors
   **/
  phalaWrappedBalances: {
    /**
     * user's `FinanceAccount` does not exist in storage: `StakerAccounts`
     **/
    StakerAccountNotFound: GenericPalletError<Rv>

    /**
     * Trying to unwrap more than the available balance
     **/
    UnwrapAmountExceedsAvaliableStake: GenericPalletError<Rv>

    /**
     * Trying to vote more than the available balance
     **/
    VoteAmountLargerThanTotalStakes: GenericPalletError<Rv>

    /**
     * The vote is not currently on going
     **/
    ReferendumInvalid: GenericPalletError<Rv>

    /**
     * The vote is now on going and the W-PHA used in voting can not be unlocked
     **/
    ReferendumOngoing: GenericPalletError<Rv>

    /**
     * The Iteration exceed the max limitaion
     **/
    IterationsIsNotVaild: GenericPalletError<Rv>

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>
  }
  /**
   * Pallet `PhalaBasePool`'s errors
   **/
  phalaBasePool: {
    /**
     * basepool's collection_id isn't founded
     **/
    MissCollectionId: GenericPalletError<Rv>

    /**
     * The pool has already got all the stake completely slashed.
     *
     * In this case, no more funds can be contributed to the pool until all the pending slash
     * has been resolved.
     **/
    PoolBankrupt: GenericPalletError<Rv>

    /**
     * CheckSub less than zero, indicate share amount is invalid
     **/
    InvalidShareToWithdraw: GenericPalletError<Rv>

    /**
     * The withdrawal amount is too small (considered as dust)
     **/
    InvalidWithdrawalAmount: GenericPalletError<Rv>

    /**
     * RMRK errors
     **/
    RmrkError: GenericPalletError<Rv>

    /**
     * The Specified pid does not match to any pool
     **/
    PoolDoesNotExist: GenericPalletError<Rv>

    /**
     * Tried to access a pool type that doesn't match the actual pool type in the storage.
     *
     * E.g. Try to access a vault but it's actually a stake pool.
     **/
    PoolTypeNotMatch: GenericPalletError<Rv>

    /**
     * NftId does not match any nft
     **/
    NftIdNotFound: GenericPalletError<Rv>

    /**
     * Occurs when pool's shares is zero
     **/
    InvalidSharePrice: GenericPalletError<Rv>

    /**
     * Tried to get a `NftGuard` when the nft is locked. It indicates an internal error occured.
     **/
    AttrLocked: GenericPalletError<Rv>

    /**
     * The caller is not the owner of the pool
     **/
    UnauthorizedPoolOwner: GenericPalletError<Rv>

    /**
     * Can not add the staker to whitelist because the staker is already in whitelist.
     **/
    AlreadyInContributeWhitelist: GenericPalletError<Rv>

    /**
     * Invalid staker to contribute because origin isn't in Pool's contribution whitelist.
     **/
    NotInContributeWhitelist: GenericPalletError<Rv>

    /**
     * Too many stakers in contribution whitelist that exceed the limit
     **/
    ExceedWhitelistMaxLen: GenericPalletError<Rv>

    /**
     * The pool hasn't have a whitelist created
     **/
    NoWhitelistCreated: GenericPalletError<Rv>

    /**
     * Too long for pool description length
     **/
    ExceedMaxDescriptionLen: GenericPalletError<Rv>

    /**
     * Migration root not authorized
     **/
    NotMigrationRoot: GenericPalletError<Rv>

    /**
     * Burn nft failed
     **/
    BurnNftFailed: GenericPalletError<Rv>
    DeprecatedTransferSharesAmountInvalid: GenericPalletError<Rv>

    /**
     * No reimbursement to claim
     **/
    NoReimbursementToClaim: GenericPalletError<Rv>
    InternalSubsidyPoolCannotWithdraw: GenericPalletError<Rv>

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>
  }
  /**
   * Pallet `PhalaPhatContracts`'s errors
   **/
  phalaPhatContracts: {
    CodeNotFound: GenericPalletError<Rv>
    ClusterNotFound: GenericPalletError<Rv>
    ClusterNotDeployed: GenericPalletError<Rv>
    ClusterPermissionDenied: GenericPalletError<Rv>
    DuplicatedContract: GenericPalletError<Rv>
    DuplicatedDeployment: GenericPalletError<Rv>
    NoWorkerSpecified: GenericPalletError<Rv>
    InvalidSender: GenericPalletError<Rv>
    WorkerNotFound: GenericPalletError<Rv>
    PayloadTooLarge: GenericPalletError<Rv>
    NoPinkSystemCode: GenericPalletError<Rv>
    ContractNotFound: GenericPalletError<Rv>
    WorkerIsBusy: GenericPalletError<Rv>

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>
  }
  /**
   * Pallet `PhalaPhatTokenomic`'s errors
   **/
  phalaPhatTokenomic: {
    InvalidAmountOfStake: GenericPalletError<Rv>

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>
  }
  /**
   * Pallet `Uniques`'s errors
   **/
  uniques: {
    /**
     * The signing account has no permission to do the operation.
     **/
    NoPermission: GenericPalletError<Rv>

    /**
     * The given item ID is unknown.
     **/
    UnknownCollection: GenericPalletError<Rv>

    /**
     * The item ID has already been used for an item.
     **/
    AlreadyExists: GenericPalletError<Rv>

    /**
     * The owner turned out to be different to what was expected.
     **/
    WrongOwner: GenericPalletError<Rv>

    /**
     * Invalid witness data given.
     **/
    BadWitness: GenericPalletError<Rv>

    /**
     * The item ID is already taken.
     **/
    InUse: GenericPalletError<Rv>

    /**
     * The item or collection is frozen.
     **/
    Frozen: GenericPalletError<Rv>

    /**
     * The delegate turned out to be different to what was expected.
     **/
    WrongDelegate: GenericPalletError<Rv>

    /**
     * There is no delegate approved.
     **/
    NoDelegate: GenericPalletError<Rv>

    /**
     * No approval exists that would allow the transfer.
     **/
    Unapproved: GenericPalletError<Rv>

    /**
     * The named owner has not signed ownership of the collection is acceptable.
     **/
    Unaccepted: GenericPalletError<Rv>

    /**
     * The item is locked.
     **/
    Locked: GenericPalletError<Rv>

    /**
     * All items have been minted.
     **/
    MaxSupplyReached: GenericPalletError<Rv>

    /**
     * The max supply has already been set.
     **/
    MaxSupplyAlreadySet: GenericPalletError<Rv>

    /**
     * The provided max supply is less to the amount of items a collection already has.
     **/
    MaxSupplyTooSmall: GenericPalletError<Rv>

    /**
     * The given item ID is unknown.
     **/
    UnknownItem: GenericPalletError<Rv>

    /**
     * Item is not for sale.
     **/
    NotForSale: GenericPalletError<Rv>

    /**
     * The provided bid is too low.
     **/
    BidTooLow: GenericPalletError<Rv>

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>
  }
  /**
   * Pallet `RmrkCore`'s errors
   **/
  rmrkCore: {
    /**
     * Error names should be descriptive.
     **/
    NoneValue: GenericPalletError<Rv>

    /**
     * Errors should have helpful documentation associated with them.
     **/
    StorageOverflow: GenericPalletError<Rv>
    TooLong: GenericPalletError<Rv>
    NoAvailableCollectionId: GenericPalletError<Rv>
    NoAvailableResourceId: GenericPalletError<Rv>
    MetadataNotSet: GenericPalletError<Rv>
    RecipientNotSet: GenericPalletError<Rv>
    NoAvailableNftId: GenericPalletError<Rv>
    NotInRange: GenericPalletError<Rv>
    RoyaltyNotSet: GenericPalletError<Rv>
    CollectionUnknown: GenericPalletError<Rv>
    NoPermission: GenericPalletError<Rv>
    NoWitness: GenericPalletError<Rv>
    CollectionNotEmpty: GenericPalletError<Rv>
    CollectionFullOrLocked: GenericPalletError<Rv>
    CannotSendToDescendentOrSelf: GenericPalletError<Rv>
    ResourceAlreadyExists: GenericPalletError<Rv>
    NftAlreadyExists: GenericPalletError<Rv>
    EmptyResource: GenericPalletError<Rv>

    /**
     * The recursion limit has been reached.
     **/
    TooManyRecursions: GenericPalletError<Rv>
    NftIsLocked: GenericPalletError<Rv>
    CannotAcceptNonOwnedNft: GenericPalletError<Rv>
    CannotRejectNonOwnedNft: GenericPalletError<Rv>
    CannotRejectNonPendingNft: GenericPalletError<Rv>
    ResourceDoesntExist: GenericPalletError<Rv>

    /**
     * Accepting a resource that is not pending should fail
     **/
    ResourceNotPending: GenericPalletError<Rv>
    NonTransferable: GenericPalletError<Rv>
    CannotSendEquippedItem: GenericPalletError<Rv>
    CannotAcceptToNewOwner: GenericPalletError<Rv>
    FailedTransferHooksPreCheck: GenericPalletError<Rv>
    FailedTransferHooksPostTransfer: GenericPalletError<Rv>

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>
  }
  /**
   * Pallet `RmrkEquip`'s errors
   **/
  rmrkEquip: {
    PermissionError: GenericPalletError<Rv>
    ItemDoesntExist: GenericPalletError<Rv>
    EquipperDoesntExist: GenericPalletError<Rv>
    NoAvailableBaseId: GenericPalletError<Rv>
    TooManyEquippables: GenericPalletError<Rv>
    NoAvailablePartId: GenericPalletError<Rv>
    MustBeDirectParent: GenericPalletError<Rv>
    PartDoesntExist: GenericPalletError<Rv>
    BaseDoesntExist: GenericPalletError<Rv>
    CantEquipFixedPart: GenericPalletError<Rv>
    NoResourceForThisBaseFoundOnNft: GenericPalletError<Rv>
    CollectionNotEquippable: GenericPalletError<Rv>
    ItemHasNoResourceToEquipThere: GenericPalletError<Rv>
    NoEquippableOnFixedPart: GenericPalletError<Rv>
    NeedsDefaultThemeFirst: GenericPalletError<Rv>
    ItemAlreadyEquipped: GenericPalletError<Rv>
    SlotAlreadyEquipped: GenericPalletError<Rv>
    SlotNotEquipped: GenericPalletError<Rv>
    UnknownError: GenericPalletError<Rv>
    ExceedsMaxPartsPerBase: GenericPalletError<Rv>
    TooManyProperties: GenericPalletError<Rv>
    ItemNotEquipped: GenericPalletError<Rv>
    UnequipperMustOwnEitherItemOrEquipper: GenericPalletError<Rv>
    UnexpectedTryFromIntError: GenericPalletError<Rv>
    UnexpectedVecConversionError: GenericPalletError<Rv>

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>
  }
  /**
   * Pallet `RmrkMarket`'s errors
   **/
  rmrkMarket: {
    /**
     * No permissions for account to interact with NFT
     **/
    NoPermission: GenericPalletError<Rv>

    /**
     * Token cannot be bought
     **/
    TokenNotForSale: GenericPalletError<Rv>

    /**
     * Offer already accepted and cannot withdraw
     **/
    CannotWithdrawOffer: GenericPalletError<Rv>

    /**
     * Cannot unlist NFT as it has already been unlisted or sold
     **/
    CannotUnlistToken: GenericPalletError<Rv>

    /**
     * Cannot make offer on NFT on own NFT
     **/
    CannotOfferOnOwnToken: GenericPalletError<Rv>

    /**
     * Cannot buy NFT that is already owned
     **/
    CannotBuyOwnToken: GenericPalletError<Rv>

    /**
     * Offer is unknown
     **/
    UnknownOffer: GenericPalletError<Rv>

    /**
     * Cannot list NFT owned by a NFT
     **/
    CannotListNftOwnedByNft: GenericPalletError<Rv>

    /**
     * Cannot list a non-existing NFT
     **/
    TokenDoesNotExist: GenericPalletError<Rv>

    /**
     * Offer is below the OfferMinimumAmount threshold
     **/
    OfferTooLow: GenericPalletError<Rv>

    /**
     * Account cannot offer on a NFT again with an active offer
     **/
    AlreadyOffered: GenericPalletError<Rv>

    /**
     * Accepted offer has expired and cannot be accepted
     **/
    OfferHasExpired: GenericPalletError<Rv>

    /**
     * Listing has expired and cannot be bought
     **/
    ListingHasExpired: GenericPalletError<Rv>

    /**
     * Price differs from when `buy` was executed
     **/
    PriceDiffersFromExpected: GenericPalletError<Rv>

    /**
     * Not possible to list non-transferable NFT
     **/
    NonTransferable: GenericPalletError<Rv>

    /**
     * Marketplace owner not configured
     **/
    MarketplaceOwnerNotSet: GenericPalletError<Rv>

    /**
     * Cannot list NFT based on downstream logic implemented for MarketplaceHooks trait
     **/
    CannotListNft: GenericPalletError<Rv>

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>
  }
  /**
   * Pallet `SygmaAccessSegregator`'s errors
   **/
  sygmaAccessSegregator: {
    /**
     * Function unimplemented
     **/
    Unimplemented: GenericPalletError<Rv>

    /**
     * Failed to grant extrinsic access permission to an account
     **/
    GrantAccessFailed: GenericPalletError<Rv>

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>
  }
  /**
   * Pallet `SygmaBasicFeeHandler`'s errors
   **/
  sygmaBasicFeeHandler: {
    /**
     * Function unimplemented
     **/
    Unimplemented: GenericPalletError<Rv>

    /**
     * Account has not gained access permission
     **/
    AccessDenied: GenericPalletError<Rv>

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>
  }
  /**
   * Pallet `SygmaBridge`'s errors
   **/
  sygmaBridge: {
    /**
     * Account has not gained access permission
     **/
    AccessDenied: GenericPalletError<Rv>

    /**
     * Protected operation, must be performed by relayer
     **/
    BadMpcSignature: GenericPalletError<Rv>

    /**
     * Insufficient balance on sender account
     **/
    InsufficientBalance: GenericPalletError<Rv>

    /**
     * Asset transactor execution failed
     **/
    TransactFailed: GenericPalletError<Rv>

    /**
     * The withdrawn amount can not cover the fee payment
     **/
    FeeTooExpensive: GenericPalletError<Rv>

    /**
     * MPC address not set
     **/
    MissingMpcAddress: GenericPalletError<Rv>

    /**
     * MPC address can not be updated
     **/
    MpcAddrNotUpdatable: GenericPalletError<Rv>

    /**
     * Bridge is paused
     **/
    BridgePaused: GenericPalletError<Rv>

    /**
     * Bridge is unpaused
     **/
    BridgeUnpaused: GenericPalletError<Rv>

    /**
     * Fee config option missing
     **/
    MissingFeeConfig: GenericPalletError<Rv>

    /**
     * Asset not bound to a resource id
     **/
    AssetNotBound: GenericPalletError<Rv>

    /**
     * Proposal has either failed or succeeded
     **/
    ProposalAlreadyComplete: GenericPalletError<Rv>

    /**
     * Proposal list empty
     **/
    EmptyProposalList: GenericPalletError<Rv>

    /**
     * Transactor operation failed
     **/
    TransactorFailed: GenericPalletError<Rv>

    /**
     * Deposit data not correct
     **/
    InvalidDepositData: GenericPalletError<Rv>

    /**
     * Dest domain not supported
     **/
    DestDomainNotSupported: GenericPalletError<Rv>

    /**
     * Dest chain id not match
     **/
    DestChainIDNotMatch: GenericPalletError<Rv>

    /**
     * Failed to extract destination data
     **/
    ExtractDestDataFailed: GenericPalletError<Rv>

    /**
     * Failed on the decimal converter
     **/
    DecimalConversionFail: GenericPalletError<Rv>

    /**
     * Deposit nonce has reached max integer value
     **/
    DepositNonceOverflow: GenericPalletError<Rv>

    /**
     * Asset not bound to a liquidity holder account
     **/
    NoLiquidityHolderAccountBound: GenericPalletError<Rv>

    /**
     * Function unimplemented
     **/
    Unimplemented: GenericPalletError<Rv>

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>
  }
  /**
   * Pallet `SygmaFeeHandlerRouter`'s errors
   **/
  sygmaFeeHandlerRouter: {
    /**
     * Account has not gained access permission
     **/
    AccessDenied: GenericPalletError<Rv>

    /**
     * Function unimplemented
     **/
    Unimplemented: GenericPalletError<Rv>

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>
  }
  /**
   * Pallet `SygmaWrapper`'s errors
   **/
  sygmaWrapper: {
    /**
     * Can not transfer asset to dest
     **/
    CannotDepositAsset: GenericPalletError<Rv>

    /**
     * Unimplemented function
     **/
    Unimplemented: GenericPalletError<Rv>

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>
  }
  /**
   * Pallet `SygmaPercentageFeeHandler`'s errors
   **/
  sygmaPercentageFeeHandler: {
    /**
     * Function unimplemented
     **/
    Unimplemented: GenericPalletError<Rv>

    /**
     * Account has not gained access permission
     **/
    AccessDenied: GenericPalletError<Rv>

    /**
     * Fee rate is out of range [0, 10000)
     **/
    FeeRateOutOfRange: GenericPalletError<Rv>

    /**
     * Percentage fee bound is invalid
     **/
    InvalidFeeBound: GenericPalletError<Rv>

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>
  }
  /**
   * Pallet `PalletIndex`'s errors
   **/
  palletIndex: {
    AssetNotFound: GenericPalletError<Rv>
    WorkerAlreadySet: GenericPalletError<Rv>
    WorkerNotSet: GenericPalletError<Rv>
    WorkerMismatch: GenericPalletError<Rv>
    TaskAlreadyExist: GenericPalletError<Rv>
    NotFoundInTaskQueue: GenericPalletError<Rv>
    TaskQueueEmpty: GenericPalletError<Rv>
    TransactFailed: GenericPalletError<Rv>
    FeeTooExpensive: GenericPalletError<Rv>

    /**
     * Generic pallet error
     **/
    [error: string]: GenericPalletError<Rv>
  }
}
